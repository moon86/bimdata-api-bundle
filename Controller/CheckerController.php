<?php

/**
 * CheckerController
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Controller
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * BIMData API
 *
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1 (v1)
 * Contact: support@bimdata.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Controller;

use \Exception;
use JMS\Serializer\Exception\RuntimeException as SerializerRuntimeException;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel\Exception\HttpException;
use Symfony\Component\Validator\Constraints as Assert;
use OpenAPI\Server\Api\CheckerApiInterface;
use OpenAPI\Server\Model\CheckPlan;
use OpenAPI\Server\Model\CheckPlanRequest;
use OpenAPI\Server\Model\CheckerResult;
use OpenAPI\Server\Model\CheckerResultRequest;
use OpenAPI\Server\Model\IfcChecker;
use OpenAPI\Server\Model\IfcCheckerRequest;
use OpenAPI\Server\Model\PatchedCheckPlanRequest;
use OpenAPI\Server\Model\PatchedCheckerResultRequest;
use OpenAPI\Server\Model\PatchedIfcCheckerRequest;
use OpenAPI\Server\Model\PatchedRuleComponentRequest;
use OpenAPI\Server\Model\PatchedRuleRequest;
use OpenAPI\Server\Model\PatchedRulesetRequest;
use OpenAPI\Server\Model\Rule;
use OpenAPI\Server\Model\RuleComponent;
use OpenAPI\Server\Model\RuleComponentRequest;
use OpenAPI\Server\Model\RuleRequest;
use OpenAPI\Server\Model\Ruleset;
use OpenAPI\Server\Model\RulesetRequest;

/**
 * CheckerController Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Server\Controller
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */
class CheckerController extends Controller
{

    /**
     * Operation createChecker
     *
     * Create a checker to a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function createCheckerAction(Request $request, $cloudPk, $modelPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $ifcCheckerRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $ifcCheckerRequest = $this->deserialize($ifcCheckerRequest, 'OpenAPI\Server\Model\IfcCheckerRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\IfcCheckerRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($ifcCheckerRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->createChecker($cloudPk, $modelPk, $projectPk, $ifcCheckerRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 201:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation createCheckerResult
     *
     * Create a CheckerResult
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function createCheckerResultAction(Request $request, $checkerPk, $cloudPk, $modelPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $checkerResultRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $checkerPk = $this->deserialize($checkerPk, 'int', 'string');
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $checkerResultRequest = $this->deserialize($checkerResultRequest, 'OpenAPI\Server\Model\CheckerResultRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($checkerPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\CheckerResultRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($checkerResultRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->createCheckerResult($checkerPk, $cloudPk, $modelPk, $projectPk, $checkerResultRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 201:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation createCheckplan
     *
     * Create a Checkplan
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function createCheckplanAction(Request $request, $cloudPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $checkPlanRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $checkPlanRequest = $this->deserialize($checkPlanRequest, 'OpenAPI\Server\Model\CheckPlanRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\CheckPlanRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($checkPlanRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->createCheckplan($cloudPk, $projectPk, $checkPlanRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 201:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation createRule
     *
     * Create a Rule
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function createRuleAction(Request $request, $checkPlanPk, $cloudPk, $projectPk, $rulesetPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $ruleRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $checkPlanPk = $this->deserialize($checkPlanPk, 'int', 'string');
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $rulesetPk = $this->deserialize($rulesetPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $ruleRequest = $this->deserialize($ruleRequest, 'OpenAPI\Server\Model\RuleRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($checkPlanPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($rulesetPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\RuleRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($ruleRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->createRule($checkPlanPk, $cloudPk, $projectPk, $rulesetPk, $ruleRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 201:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation createRuleComponent
     *
     * Create a RuleComponent
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function createRuleComponentAction(Request $request, $checkPlanPk, $cloudPk, $projectPk, $rulePk, $rulesetPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $ruleComponentRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $checkPlanPk = $this->deserialize($checkPlanPk, 'int', 'string');
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $rulePk = $this->deserialize($rulePk, 'int', 'string');
            $rulesetPk = $this->deserialize($rulesetPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $ruleComponentRequest = $this->deserialize($ruleComponentRequest, 'OpenAPI\Server\Model\RuleComponentRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($checkPlanPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($rulePk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($rulesetPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\RuleComponentRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($ruleComponentRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->createRuleComponent($checkPlanPk, $cloudPk, $projectPk, $rulePk, $rulesetPk, $ruleComponentRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 201:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation createRuleset
     *
     * Create a Ruleset
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function createRulesetAction(Request $request, $checkPlanPk, $cloudPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $rulesetRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $checkPlanPk = $this->deserialize($checkPlanPk, 'int', 'string');
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $rulesetRequest = $this->deserialize($rulesetRequest, 'OpenAPI\Server\Model\RulesetRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($checkPlanPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\RulesetRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($rulesetRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->createRuleset($checkPlanPk, $cloudPk, $projectPk, $rulesetRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 201:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation deleteChecker
     *
     * Delete a checker of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function deleteCheckerAction(Request $request, $cloudPk, $id, $modelPk, $projectPk)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->deleteChecker($cloudPk, $id, $modelPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation deleteCheckerResult
     *
     * Delete a CheckerResult
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function deleteCheckerResultAction(Request $request, $checkerPk, $cloudPk, $id, $modelPk, $projectPk)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $checkerPk = $this->deserialize($checkerPk, 'int', 'string');
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($checkerPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->deleteCheckerResult($checkerPk, $cloudPk, $id, $modelPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation deleteCheckplan
     *
     * Delete a Checkplan
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function deleteCheckplanAction(Request $request, $cloudPk, $id, $projectPk)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->deleteCheckplan($cloudPk, $id, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation deleteRule
     *
     * Delete a Rule
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function deleteRuleAction(Request $request, $checkPlanPk, $cloudPk, $id, $projectPk, $rulesetPk)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $checkPlanPk = $this->deserialize($checkPlanPk, 'int', 'string');
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $rulesetPk = $this->deserialize($rulesetPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($checkPlanPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($rulesetPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->deleteRule($checkPlanPk, $cloudPk, $id, $projectPk, $rulesetPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation deleteRuleComponent
     *
     * Delete a RuleComponent
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function deleteRuleComponentAction(Request $request, $checkPlanPk, $cloudPk, $id, $projectPk, $rulePk, $rulesetPk)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $checkPlanPk = $this->deserialize($checkPlanPk, 'int', 'string');
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $rulePk = $this->deserialize($rulePk, 'int', 'string');
            $rulesetPk = $this->deserialize($rulesetPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($checkPlanPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($rulePk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($rulesetPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->deleteRuleComponent($checkPlanPk, $cloudPk, $id, $projectPk, $rulePk, $rulesetPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation deleteRuleset
     *
     * Delete a Ruleset
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function deleteRulesetAction(Request $request, $checkPlanPk, $cloudPk, $id, $projectPk)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $checkPlanPk = $this->deserialize($checkPlanPk, 'int', 'string');
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($checkPlanPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->deleteRuleset($checkPlanPk, $cloudPk, $id, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getChecker
     *
     * Retrieve a checker of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getCheckerAction(Request $request, $cloudPk, $id, $modelPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getChecker($cloudPk, $id, $modelPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getCheckerResult
     *
     * Retrieve one CheckerResult
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getCheckerResultAction(Request $request, $checkerPk, $cloudPk, $id, $modelPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $checkerPk = $this->deserialize($checkerPk, 'int', 'string');
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($checkerPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getCheckerResult($checkerPk, $cloudPk, $id, $modelPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getCheckerResults
     *
     * Retrieve all CheckerResults
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getCheckerResultsAction(Request $request, $checkerPk, $cloudPk, $modelPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $checkerPk = $this->deserialize($checkerPk, 'int', 'string');
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($checkerPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getCheckerResults($checkerPk, $cloudPk, $modelPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getCheckers
     *
     * Retrieve all checkers of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getCheckersAction(Request $request, $cloudPk, $modelPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getCheckers($cloudPk, $modelPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getCheckplan
     *
     * Retrieve one Checkplan
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getCheckplanAction(Request $request, $cloudPk, $id, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getCheckplan($cloudPk, $id, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getCheckplans
     *
     * Retrieve all Checkplans
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getCheckplansAction(Request $request, $cloudPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getCheckplans($cloudPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getRule
     *
     * Retrieve one Rule
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getRuleAction(Request $request, $checkPlanPk, $cloudPk, $id, $projectPk, $rulesetPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $checkPlanPk = $this->deserialize($checkPlanPk, 'int', 'string');
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $rulesetPk = $this->deserialize($rulesetPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($checkPlanPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($rulesetPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getRule($checkPlanPk, $cloudPk, $id, $projectPk, $rulesetPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getRuleComponent
     *
     * Retrieve one RuleComponent
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getRuleComponentAction(Request $request, $checkPlanPk, $cloudPk, $id, $projectPk, $rulePk, $rulesetPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $checkPlanPk = $this->deserialize($checkPlanPk, 'int', 'string');
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $rulePk = $this->deserialize($rulePk, 'int', 'string');
            $rulesetPk = $this->deserialize($rulesetPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($checkPlanPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($rulePk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($rulesetPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getRuleComponent($checkPlanPk, $cloudPk, $id, $projectPk, $rulePk, $rulesetPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getRuleComponents
     *
     * Retrieve all RuleComponents
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getRuleComponentsAction(Request $request, $checkPlanPk, $cloudPk, $projectPk, $rulePk, $rulesetPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $checkPlanPk = $this->deserialize($checkPlanPk, 'int', 'string');
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $rulePk = $this->deserialize($rulePk, 'int', 'string');
            $rulesetPk = $this->deserialize($rulesetPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($checkPlanPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($rulePk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($rulesetPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getRuleComponents($checkPlanPk, $cloudPk, $projectPk, $rulePk, $rulesetPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getRules
     *
     * Retrieve all Rules
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getRulesAction(Request $request, $checkPlanPk, $cloudPk, $projectPk, $rulesetPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $checkPlanPk = $this->deserialize($checkPlanPk, 'int', 'string');
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $rulesetPk = $this->deserialize($rulesetPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($checkPlanPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($rulesetPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getRules($checkPlanPk, $cloudPk, $projectPk, $rulesetPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getRuleset
     *
     * Retrieve one Ruleset
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getRulesetAction(Request $request, $checkPlanPk, $cloudPk, $id, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $checkPlanPk = $this->deserialize($checkPlanPk, 'int', 'string');
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($checkPlanPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getRuleset($checkPlanPk, $cloudPk, $id, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getRulesets
     *
     * Retrieve all Rulesets
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getRulesetsAction(Request $request, $checkPlanPk, $cloudPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $checkPlanPk = $this->deserialize($checkPlanPk, 'int', 'string');
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($checkPlanPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getRulesets($checkPlanPk, $cloudPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation launchNewCheck
     *
     * Launch a new check on the model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function launchNewCheckAction(Request $request, $cloudPk, $id, $modelPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $ifcCheckerRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $ifcCheckerRequest = $this->deserialize($ifcCheckerRequest, 'OpenAPI\Server\Model\IfcCheckerRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\IfcCheckerRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($ifcCheckerRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->launchNewCheck($cloudPk, $id, $modelPk, $projectPk, $ifcCheckerRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 201:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation updateChecker
     *
     * Update some fields of a checker of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function updateCheckerAction(Request $request, $cloudPk, $id, $modelPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $patchedIfcCheckerRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $patchedIfcCheckerRequest = $this->deserialize($patchedIfcCheckerRequest, 'OpenAPI\Server\Model\PatchedIfcCheckerRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\PatchedIfcCheckerRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($patchedIfcCheckerRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->updateChecker($cloudPk, $id, $modelPk, $projectPk, $patchedIfcCheckerRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation updateCheckerResult
     *
     * Update some fields of a CheckerResult
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function updateCheckerResultAction(Request $request, $checkerPk, $cloudPk, $id, $modelPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $patchedCheckerResultRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $checkerPk = $this->deserialize($checkerPk, 'int', 'string');
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $patchedCheckerResultRequest = $this->deserialize($patchedCheckerResultRequest, 'OpenAPI\Server\Model\PatchedCheckerResultRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($checkerPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\PatchedCheckerResultRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($patchedCheckerResultRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->updateCheckerResult($checkerPk, $cloudPk, $id, $modelPk, $projectPk, $patchedCheckerResultRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation updateCheckplan
     *
     * Update some fields of a Checkplan
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function updateCheckplanAction(Request $request, $cloudPk, $id, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $patchedCheckPlanRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $patchedCheckPlanRequest = $this->deserialize($patchedCheckPlanRequest, 'OpenAPI\Server\Model\PatchedCheckPlanRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\PatchedCheckPlanRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($patchedCheckPlanRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->updateCheckplan($cloudPk, $id, $projectPk, $patchedCheckPlanRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation updateRule
     *
     * Update some fields of a Rule
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function updateRuleAction(Request $request, $checkPlanPk, $cloudPk, $id, $projectPk, $rulesetPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $patchedRuleRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $checkPlanPk = $this->deserialize($checkPlanPk, 'int', 'string');
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $rulesetPk = $this->deserialize($rulesetPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $patchedRuleRequest = $this->deserialize($patchedRuleRequest, 'OpenAPI\Server\Model\PatchedRuleRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($checkPlanPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($rulesetPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\PatchedRuleRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($patchedRuleRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->updateRule($checkPlanPk, $cloudPk, $id, $projectPk, $rulesetPk, $patchedRuleRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation updateRuleComponent
     *
     * Update some fields of a RuleComponent
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function updateRuleComponentAction(Request $request, $checkPlanPk, $cloudPk, $id, $projectPk, $rulePk, $rulesetPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $patchedRuleComponentRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $checkPlanPk = $this->deserialize($checkPlanPk, 'int', 'string');
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $rulePk = $this->deserialize($rulePk, 'int', 'string');
            $rulesetPk = $this->deserialize($rulesetPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $patchedRuleComponentRequest = $this->deserialize($patchedRuleComponentRequest, 'OpenAPI\Server\Model\PatchedRuleComponentRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($checkPlanPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($rulePk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($rulesetPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\PatchedRuleComponentRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($patchedRuleComponentRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->updateRuleComponent($checkPlanPk, $cloudPk, $id, $projectPk, $rulePk, $rulesetPk, $patchedRuleComponentRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation updateRuleset
     *
     * Update some fields of a Ruleset
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function updateRulesetAction(Request $request, $checkPlanPk, $cloudPk, $id, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $patchedRulesetRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $checkPlanPk = $this->deserialize($checkPlanPk, 'int', 'string');
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $patchedRulesetRequest = $this->deserialize($patchedRulesetRequest, 'OpenAPI\Server\Model\PatchedRulesetRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($checkPlanPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\PatchedRulesetRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($patchedRulesetRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->updateRuleset($checkPlanPk, $cloudPk, $id, $projectPk, $patchedRulesetRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Returns the handler for this API controller.
     * @return CheckerApiInterface
     */
    public function getApiHandler()
    {
        return $this->apiServer->getApiHandler('checker');
    }
}
