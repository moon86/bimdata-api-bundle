<?php

/**
 * IfcController
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Controller
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * BIMData API
 *
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1 (v1)
 * Contact: support@bimdata.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Controller;

use \Exception;
use JMS\Serializer\Exception\RuntimeException as SerializerRuntimeException;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel\Exception\HttpException;
use Symfony\Component\Validator\Constraints as Assert;
use OpenAPI\Server\Api\IfcApiInterface;
use OpenAPI\Server\Model\Building;
use OpenAPI\Server\Model\BuildingModelPlanRequest;
use OpenAPI\Server\Model\CheckerResult;
use OpenAPI\Server\Model\CheckerResultRequest;
use OpenAPI\Server\Model\Classification;
use OpenAPI\Server\Model\ClassificationRequest;
use OpenAPI\Server\Model\CreateBuildingByNameRequest;
use OpenAPI\Server\Model\CreateModelRequest;
use OpenAPI\Server\Model\Document;
use OpenAPI\Server\Model\DocumentWithElementList;
use OpenAPI\Server\Model\Element;
use OpenAPI\Server\Model\ElementClassificationRelation;
use OpenAPI\Server\Model\ElementClassificationRelationRequest;
use OpenAPI\Server\Model\ElementPropertySetRelationRequest;
use OpenAPI\Server\Model\ElementRequest;
use OpenAPI\Server\Model\IfcAccessToken;
use OpenAPI\Server\Model\IfcAccessTokenRequest;
use OpenAPI\Server\Model\IfcChecker;
use OpenAPI\Server\Model\IfcCheckerRequest;
use OpenAPI\Server\Model\IfcExport;
use OpenAPI\Server\Model\IfcExportRequest;
use OpenAPI\Server\Model\IfcMergeRequest;
use OpenAPI\Server\Model\IfcOptimizeRequest;
use OpenAPI\Server\Model\Layer;
use OpenAPI\Server\Model\LayerRequest;
use OpenAPI\Server\Model\Material;
use OpenAPI\Server\Model\Model;
use OpenAPI\Server\Model\ModelErrors;
use OpenAPI\Server\Model\ModelErrorsRequest;
use OpenAPI\Server\Model\ModelFiles;
use OpenAPI\Server\Model\PatchedCheckerResultRequest;
use OpenAPI\Server\Model\PatchedElementRequest;
use OpenAPI\Server\Model\PatchedIfcAccessTokenRequest;
use OpenAPI\Server\Model\PatchedIfcCheckerRequest;
use OpenAPI\Server\Model\PatchedLayerRequest;
use OpenAPI\Server\Model\PatchedModelRequest;
use OpenAPI\Server\Model\PatchedPositioningPlanRequest;
use OpenAPI\Server\Model\PatchedProcessorHandlerRequest;
use OpenAPI\Server\Model\PatchedPropertyDefinitionRequest;
use OpenAPI\Server\Model\PatchedPropertyRequest;
use OpenAPI\Server\Model\PatchedPropertySetRequest;
use OpenAPI\Server\Model\PatchedSpaceRequest;
use OpenAPI\Server\Model\PatchedStoreyBuildingRequest;
use OpenAPI\Server\Model\PatchedSystemRequest;
use OpenAPI\Server\Model\PatchedUnitRequest;
use OpenAPI\Server\Model\PatchedZoneRequest;
use OpenAPI\Server\Model\PatchedZoneSpaceRequest;
use OpenAPI\Server\Model\PositioningPlan;
use OpenAPI\Server\Model\ProcessorHandler;
use OpenAPI\Server\Model\Property;
use OpenAPI\Server\Model\PropertyDefinition;
use OpenAPI\Server\Model\PropertyDefinitionRequest;
use OpenAPI\Server\Model\PropertyRequest;
use OpenAPI\Server\Model\PropertySet;
use OpenAPI\Server\Model\PropertySetRequest;
use OpenAPI\Server\Model\RawElements;
use OpenAPI\Server\Model\RawElementsRequest;
use OpenAPI\Server\Model\SimpleElement;
use OpenAPI\Server\Model\Space;
use OpenAPI\Server\Model\SpaceRequest;
use OpenAPI\Server\Model\Storey;
use OpenAPI\Server\Model\StoreyBuildingRequest;
use OpenAPI\Server\Model\StoreyModelPlanRequest;
use OpenAPI\Server\Model\System;
use OpenAPI\Server\Model\SystemRequest;
use OpenAPI\Server\Model\Unit;
use OpenAPI\Server\Model\UnitRequest;
use OpenAPI\Server\Model\Zone;
use OpenAPI\Server\Model\ZoneRequest;
use OpenAPI\Server\Model\ZoneSpace;
use OpenAPI\Server\Model\ZoneSpaceRequest;

/**
 * IfcController Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Server\Controller
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */
class IfcController extends Controller
{

    /**
     * Operation addIfcErrorsDeprecated
     *
     * Add errors to model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function addIfcErrorsDeprecatedAction(Request $request, $cloudPk, $id, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $modelErrorsRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $modelErrorsRequest = $this->deserialize($modelErrorsRequest, 'OpenAPI\Server\Model\ModelErrorsRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\ModelErrorsRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($modelErrorsRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->addIfcErrorsDeprecated($cloudPk, $id, $projectPk, $modelErrorsRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation bulkDeleteIfcClassificationsDeprecated
     *
     * Remove all classifications from model's elements
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function bulkDeleteIfcClassificationsDeprecatedAction(Request $request, $cloudPk, $ifcPk, $projectPk)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->bulkDeleteIfcClassificationsDeprecated($cloudPk, $ifcPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation bulkDeleteIfcPropertiesDeprecated
     *
     * Delete many Property of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function bulkDeleteIfcPropertiesDeprecatedAction(Request $request, $cloudPk, $ifcPk, $projectPk)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->bulkDeleteIfcPropertiesDeprecated($cloudPk, $ifcPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation bulkDeleteIfcPropertyDefinitionsDeprecated
     *
     * Delete many PropertyDefinitions of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function bulkDeleteIfcPropertyDefinitionsDeprecatedAction(Request $request, $cloudPk, $ifcPk, $projectPk)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->bulkDeleteIfcPropertyDefinitionsDeprecated($cloudPk, $ifcPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation bulkDeleteIfcUnitsDeprecated
     *
     * Delete many Units of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function bulkDeleteIfcUnitsDeprecatedAction(Request $request, $cloudPk, $ifcPk, $projectPk)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->bulkDeleteIfcUnitsDeprecated($cloudPk, $ifcPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation bulkDeletePropertySetDeprecated
     *
     * Delete many PropertySet of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function bulkDeletePropertySetDeprecatedAction(Request $request, $cloudPk, $ifcPk, $projectPk)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->bulkDeletePropertySetDeprecated($cloudPk, $ifcPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation bulkFullUpdateElementsDeprecated
     *
     * Update many elements at once (only changing fields may be defined)
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function bulkFullUpdateElementsDeprecatedAction(Request $request, $cloudPk, $ifcPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $classification = $request->query->get('classification');
        $classificationNotation = $request->query->get('classificationNotation');
        $type = $request->query->get('type');
        $elementRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $elementRequest = $this->deserialize($elementRequest, 'array<OpenAPI\Server\Model\ElementRequest>', $inputFormat);
            $classification = $this->deserialize($classification, 'string', 'string');
            $classificationNotation = $this->deserialize($classificationNotation, 'string', 'string');
            $type = $this->deserialize($type, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\All([
            new Assert\Type("OpenAPI\Server\Model\ElementRequest"),
        ]);
        $asserts[] = new Assert\Valid();
        $response = $this->validate($elementRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($classification, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($classificationNotation, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($type, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->bulkFullUpdateElementsDeprecated($cloudPk, $ifcPk, $projectPk, $elementRequest, $classification, $classificationNotation, $type, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'If all updates fail: a list of errors';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation bulkFullUpdateIfcPropertyDeprecated
     *
     * Update some fields of many properties of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function bulkFullUpdateIfcPropertyDeprecatedAction(Request $request, $cloudPk, $ifcPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $propertyRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $propertyRequest = $this->deserialize($propertyRequest, 'array<OpenAPI\Server\Model\PropertyRequest>', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\All([
            new Assert\Type("OpenAPI\Server\Model\PropertyRequest"),
        ]);
        $asserts[] = new Assert\Valid();
        $response = $this->validate($propertyRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->bulkFullUpdateIfcPropertyDeprecated($cloudPk, $ifcPk, $projectPk, $propertyRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'All updates failed: list of errors';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation bulkRemoveClassificationsOfElementDeprecated
     *
     * Remove many classifications from an element
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function bulkRemoveClassificationsOfElementDeprecatedAction(Request $request, $cloudPk, $elementUuid, $ifcPk, $projectPk)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $elementUuid = $this->deserialize($elementUuid, 'string', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($elementUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->bulkRemoveClassificationsOfElementDeprecated($cloudPk, $elementUuid, $ifcPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation bulkRemoveDocumentsOfElementDeprecated
     *
     * Remove many documents from an element
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function bulkRemoveDocumentsOfElementDeprecatedAction(Request $request, $cloudPk, $elementUuid, $ifcPk, $projectPk)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $elementUuid = $this->deserialize($elementUuid, 'string', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($elementUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->bulkRemoveDocumentsOfElementDeprecated($cloudPk, $elementUuid, $ifcPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation bulkRemoveElementsFromClassificationDeprecated
     *
     * Remove the classifications from all elements
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function bulkRemoveElementsFromClassificationDeprecatedAction(Request $request, $cloudPk, $ifcPk, $modelClassificationPk, $projectPk)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $modelClassificationPk = $this->deserialize($modelClassificationPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelClassificationPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->bulkRemoveElementsFromClassificationDeprecated($cloudPk, $ifcPk, $modelClassificationPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation bulkUpdateElementsDeprecated
     *
     * Update many elements at once (all field must be defined)
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function bulkUpdateElementsDeprecatedAction(Request $request, $cloudPk, $ifcPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $classification = $request->query->get('classification');
        $classificationNotation = $request->query->get('classificationNotation');
        $type = $request->query->get('type');
        $elementRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $elementRequest = $this->deserialize($elementRequest, 'array<OpenAPI\Server\Model\ElementRequest>', $inputFormat);
            $classification = $this->deserialize($classification, 'string', 'string');
            $classificationNotation = $this->deserialize($classificationNotation, 'string', 'string');
            $type = $this->deserialize($type, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\All([
            new Assert\Type("OpenAPI\Server\Model\ElementRequest"),
        ]);
        $asserts[] = new Assert\Valid();
        $response = $this->validate($elementRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($classification, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($classificationNotation, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($type, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->bulkUpdateElementsDeprecated($cloudPk, $ifcPk, $projectPk, $elementRequest, $classification, $classificationNotation, $type, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'If all updates fail: a list of errors';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation bulkUpdateIfcPropertyDeprecated
     *
     * Update all fields of many properties of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function bulkUpdateIfcPropertyDeprecatedAction(Request $request, $cloudPk, $ifcPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $propertyRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $propertyRequest = $this->deserialize($propertyRequest, 'array<OpenAPI\Server\Model\PropertyRequest>', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\All([
            new Assert\Type("OpenAPI\Server\Model\PropertyRequest"),
        ]);
        $asserts[] = new Assert\Valid();
        $response = $this->validate($propertyRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->bulkUpdateIfcPropertyDeprecated($cloudPk, $ifcPk, $projectPk, $propertyRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'All updates failed: list of errors';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation createAccessTokenDeprecated
     *
     * Create a token for this model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function createAccessTokenDeprecatedAction(Request $request, $cloudPk, $ifcPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $ifcAccessTokenRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $ifcAccessTokenRequest = $this->deserialize($ifcAccessTokenRequest, 'OpenAPI\Server\Model\IfcAccessTokenRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\IfcAccessTokenRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($ifcAccessTokenRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->createAccessTokenDeprecated($cloudPk, $ifcPk, $projectPk, $ifcAccessTokenRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 201:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation createBuildingDeprecated
     *
     * Create a building of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function createBuildingDeprecatedAction(Request $request, $cloudPk, $ifcPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $storeyBuildingRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $storeyBuildingRequest = $this->deserialize($storeyBuildingRequest, 'OpenAPI\Server\Model\StoreyBuildingRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\StoreyBuildingRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($storeyBuildingRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->createBuildingDeprecated($cloudPk, $ifcPk, $projectPk, $storeyBuildingRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 201:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation createBuildingPlanDeprecated
     *
     * Create a relation between a 2d model and a building
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function createBuildingPlanDeprecatedAction(Request $request, $buildingUuid, $cloudPk, $ifcPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $buildingModelPlanRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $buildingUuid = $this->deserialize($buildingUuid, 'string', 'string');
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $buildingModelPlanRequest = $this->deserialize($buildingModelPlanRequest, 'OpenAPI\Server\Model\BuildingModelPlanRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($buildingUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\BuildingModelPlanRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($buildingModelPlanRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->createBuildingPlanDeprecated($buildingUuid, $cloudPk, $ifcPk, $projectPk, $buildingModelPlanRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 201:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation createCheckerDeprecated
     *
     * Create a checker to a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function createCheckerDeprecatedAction(Request $request, $cloudPk, $ifcPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $ifcCheckerRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $ifcCheckerRequest = $this->deserialize($ifcCheckerRequest, 'OpenAPI\Server\Model\IfcCheckerRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\IfcCheckerRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($ifcCheckerRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->createCheckerDeprecated($cloudPk, $ifcPk, $projectPk, $ifcCheckerRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 201:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation createCheckerResultDeprecated
     *
     * Create a CheckerResult
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function createCheckerResultDeprecatedAction(Request $request, $checkerPk, $cloudPk, $ifcPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $checkerResultRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $checkerPk = $this->deserialize($checkerPk, 'int', 'string');
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $checkerResultRequest = $this->deserialize($checkerResultRequest, 'OpenAPI\Server\Model\CheckerResultRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($checkerPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\CheckerResultRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($checkerResultRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->createCheckerResultDeprecated($checkerPk, $cloudPk, $ifcPk, $projectPk, $checkerResultRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 201:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation createClassificationElementRelationsDeprecated
     *
     * Create association between existing classification and existing element
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function createClassificationElementRelationsDeprecatedAction(Request $request, $cloudPk, $ifcPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $elementClassificationRelationRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $elementClassificationRelationRequest = $this->deserialize($elementClassificationRelationRequest, 'array<OpenAPI\Server\Model\ElementClassificationRelationRequest>', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\All([
            new Assert\Type("OpenAPI\Server\Model\ElementClassificationRelationRequest"),
        ]);
        $asserts[] = new Assert\Valid();
        $response = $this->validate($elementClassificationRelationRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->createClassificationElementRelationsDeprecated($cloudPk, $ifcPk, $projectPk, $elementClassificationRelationRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 201:
                    $message = 'No response body';
                    break;
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation createClassificationsOfElementDeprecated
     *
     * Create one or many classifications to an element
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function createClassificationsOfElementDeprecatedAction(Request $request, $cloudPk, $elementUuid, $ifcPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $classificationRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $elementUuid = $this->deserialize($elementUuid, 'string', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $classificationRequest = $this->deserialize($classificationRequest, 'array<OpenAPI\Server\Model\ClassificationRequest>', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($elementUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\All([
            new Assert\Type("OpenAPI\Server\Model\ClassificationRequest"),
        ]);
        $asserts[] = new Assert\Valid();
        $response = $this->validate($classificationRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->createClassificationsOfElementDeprecated($cloudPk, $elementUuid, $ifcPk, $projectPk, $classificationRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'All creates failed: list of errors';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation createElementDeprecated
     *
     * Create an element in the model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function createElementDeprecatedAction(Request $request, $cloudPk, $ifcPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $classification = $request->query->get('classification');
        $classificationNotation = $request->query->get('classificationNotation');
        $type = $request->query->get('type');
        $elementRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $elementRequest = $this->deserialize($elementRequest, 'array<OpenAPI\Server\Model\ElementRequest>', $inputFormat);
            $classification = $this->deserialize($classification, 'string', 'string');
            $classificationNotation = $this->deserialize($classificationNotation, 'string', 'string');
            $type = $this->deserialize($type, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\All([
            new Assert\Type("OpenAPI\Server\Model\ElementRequest"),
        ]);
        $asserts[] = new Assert\Valid();
        $response = $this->validate($elementRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($classification, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($classificationNotation, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($type, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->createElementDeprecated($cloudPk, $ifcPk, $projectPk, $elementRequest, $classification, $classificationNotation, $type, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'If all creates fail: a list of errors';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation createElementPropertySetDeprecated
     *
     * Create a PropertySets to an element
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function createElementPropertySetDeprecatedAction(Request $request, $cloudPk, $elementUuid, $ifcPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $propertySetRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $elementUuid = $this->deserialize($elementUuid, 'string', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $propertySetRequest = $this->deserialize($propertySetRequest, 'OpenAPI\Server\Model\PropertySetRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($elementUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\PropertySetRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($propertySetRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->createElementPropertySetDeprecated($cloudPk, $elementUuid, $ifcPk, $projectPk, $propertySetRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 201:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation createElementPropertySetPropertyDefinitionDeprecated
     *
     * Create a Definition to a Property
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function createElementPropertySetPropertyDefinitionDeprecatedAction(Request $request, $cloudPk, $elementUuid, $ifcPk, $projectPk, $propertyPk, $propertysetPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $propertyDefinitionRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $elementUuid = $this->deserialize($elementUuid, 'string', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $propertyPk = $this->deserialize($propertyPk, 'int', 'string');
            $propertysetPk = $this->deserialize($propertysetPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $propertyDefinitionRequest = $this->deserialize($propertyDefinitionRequest, 'OpenAPI\Server\Model\PropertyDefinitionRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($elementUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($propertyPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($propertysetPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\PropertyDefinitionRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($propertyDefinitionRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->createElementPropertySetPropertyDefinitionDeprecated($cloudPk, $elementUuid, $ifcPk, $projectPk, $propertyPk, $propertysetPk, $propertyDefinitionRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 201:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation createElementPropertySetPropertyDefinitionUnitDeprecated
     *
     * Create a Unit to a Definition
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function createElementPropertySetPropertyDefinitionUnitDeprecatedAction(Request $request, $cloudPk, $elementUuid, $ifcPk, $projectPk, $propertyPk, $propertydefinitionPk, $propertysetPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $unitRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $elementUuid = $this->deserialize($elementUuid, 'string', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $propertyPk = $this->deserialize($propertyPk, 'int', 'string');
            $propertydefinitionPk = $this->deserialize($propertydefinitionPk, 'int', 'string');
            $propertysetPk = $this->deserialize($propertysetPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $unitRequest = $this->deserialize($unitRequest, 'OpenAPI\Server\Model\UnitRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($elementUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($propertyPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($propertydefinitionPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($propertysetPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\UnitRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($unitRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->createElementPropertySetPropertyDefinitionUnitDeprecated($cloudPk, $elementUuid, $ifcPk, $projectPk, $propertyPk, $propertydefinitionPk, $propertysetPk, $unitRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 201:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation createElementPropertySetPropertyDeprecated
     *
     * Create a property to a PropertySet
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function createElementPropertySetPropertyDeprecatedAction(Request $request, $cloudPk, $elementUuid, $ifcPk, $projectPk, $propertysetPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $propertyRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $elementUuid = $this->deserialize($elementUuid, 'string', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $propertysetPk = $this->deserialize($propertysetPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $propertyRequest = $this->deserialize($propertyRequest, 'OpenAPI\Server\Model\PropertyRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($elementUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($propertysetPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\PropertyRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($propertyRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->createElementPropertySetPropertyDeprecated($cloudPk, $elementUuid, $ifcPk, $projectPk, $propertysetPk, $propertyRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 201:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation createIfcDeprecated
     *
     * Make a PDF or Image file a Model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function createIfcDeprecatedAction(Request $request, $cloudPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $createModelRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $createModelRequest = $this->deserialize($createModelRequest, 'OpenAPI\Server\Model\CreateModelRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\CreateModelRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($createModelRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->createIfcDeprecated($cloudPk, $projectPk, $createModelRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 201:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation createIfcPropertyDefinitionDeprecated
     *
     * Create a PropertyDefinition on the model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function createIfcPropertyDefinitionDeprecatedAction(Request $request, $cloudPk, $ifcPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $propertyDefinitionRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $propertyDefinitionRequest = $this->deserialize($propertyDefinitionRequest, 'array<OpenAPI\Server\Model\PropertyDefinitionRequest>', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\All([
            new Assert\Type("OpenAPI\Server\Model\PropertyDefinitionRequest"),
        ]);
        $asserts[] = new Assert\Valid();
        $response = $this->validate($propertyDefinitionRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->createIfcPropertyDefinitionDeprecated($cloudPk, $ifcPk, $projectPk, $propertyDefinitionRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'All creates failed: list of errors';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation createIfcUnitDeprecated
     *
     * Create a Unit on a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function createIfcUnitDeprecatedAction(Request $request, $cloudPk, $ifcPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $unitRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $unitRequest = $this->deserialize($unitRequest, 'array<OpenAPI\Server\Model\UnitRequest>', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\All([
            new Assert\Type("OpenAPI\Server\Model\UnitRequest"),
        ]);
        $asserts[] = new Assert\Valid();
        $response = $this->validate($unitRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->createIfcUnitDeprecated($cloudPk, $ifcPk, $projectPk, $unitRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'All creates failed: list of errors';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation createLayerDeprecated
     *
     * Create a layer in the model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function createLayerDeprecatedAction(Request $request, $cloudPk, $ifcPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $layerRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $layerRequest = $this->deserialize($layerRequest, 'OpenAPI\Server\Model\LayerRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\LayerRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($layerRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->createLayerDeprecated($cloudPk, $ifcPk, $projectPk, $layerRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 201:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation createMetaBuildingDeprecated
     *
     * Create an empty 3D Model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function createMetaBuildingDeprecatedAction(Request $request, $cloudPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $createBuildingByNameRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $createBuildingByNameRequest = $this->deserialize($createBuildingByNameRequest, 'OpenAPI\Server\Model\CreateBuildingByNameRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\CreateBuildingByNameRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($createBuildingByNameRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->createMetaBuildingDeprecated($cloudPk, $projectPk, $createBuildingByNameRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 201:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation createPropertySetDeprecated
     *
     * Create one or many PropertySet
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function createPropertySetDeprecatedAction(Request $request, $cloudPk, $ifcPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $propertySetRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $propertySetRequest = $this->deserialize($propertySetRequest, 'array<OpenAPI\Server\Model\PropertySetRequest>', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\All([
            new Assert\Type("OpenAPI\Server\Model\PropertySetRequest"),
        ]);
        $asserts[] = new Assert\Valid();
        $response = $this->validate($propertySetRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->createPropertySetDeprecated($cloudPk, $ifcPk, $projectPk, $propertySetRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'All creates failed: list of errors';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation createPropertySetElementRelationsDeprecated
     *
     * Create association between PropertySet and element
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function createPropertySetElementRelationsDeprecatedAction(Request $request, $cloudPk, $ifcPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $elementPropertySetRelationRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $elementPropertySetRelationRequest = $this->deserialize($elementPropertySetRelationRequest, 'array<OpenAPI\Server\Model\ElementPropertySetRelationRequest>', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\All([
            new Assert\Type("OpenAPI\Server\Model\ElementPropertySetRelationRequest"),
        ]);
        $asserts[] = new Assert\Valid();
        $response = $this->validate($elementPropertySetRelationRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->createPropertySetElementRelationsDeprecated($cloudPk, $ifcPk, $projectPk, $elementPropertySetRelationRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 201:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation createRawElementsDeprecated
     *
     * Create elements in an optimized format
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function createRawElementsDeprecatedAction(Request $request, $cloudPk, $ifcPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $rawElementsRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $rawElementsRequest = $this->deserialize($rawElementsRequest, 'OpenAPI\Server\Model\RawElementsRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\RawElementsRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($rawElementsRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->createRawElementsDeprecated($cloudPk, $ifcPk, $projectPk, $rawElementsRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 201:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation createSpaceDeprecated
     *
     * Create a space in the model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function createSpaceDeprecatedAction(Request $request, $cloudPk, $ifcPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $spaceRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $spaceRequest = $this->deserialize($spaceRequest, 'array<OpenAPI\Server\Model\SpaceRequest>', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\All([
            new Assert\Type("OpenAPI\Server\Model\SpaceRequest"),
        ]);
        $asserts[] = new Assert\Valid();
        $response = $this->validate($spaceRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->createSpaceDeprecated($cloudPk, $ifcPk, $projectPk, $spaceRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'All creates failed: list of errors';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation createStoreyDeprecated
     *
     * Create a storey of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function createStoreyDeprecatedAction(Request $request, $cloudPk, $ifcPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $storeyBuildingRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $storeyBuildingRequest = $this->deserialize($storeyBuildingRequest, 'OpenAPI\Server\Model\StoreyBuildingRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\StoreyBuildingRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($storeyBuildingRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->createStoreyDeprecated($cloudPk, $ifcPk, $projectPk, $storeyBuildingRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 201:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation createStoreyPlanDeprecated
     *
     * Create a relation between a 2d model and a storey
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function createStoreyPlanDeprecatedAction(Request $request, $cloudPk, $ifcPk, $projectPk, $storeyUuid)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $storeyModelPlanRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $storeyUuid = $this->deserialize($storeyUuid, 'string', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $storeyModelPlanRequest = $this->deserialize($storeyModelPlanRequest, 'OpenAPI\Server\Model\StoreyModelPlanRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($storeyUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\StoreyModelPlanRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($storeyModelPlanRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->createStoreyPlanDeprecated($cloudPk, $ifcPk, $projectPk, $storeyUuid, $storeyModelPlanRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 201:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation createSystemDeprecated
     *
     * Create a system in the model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function createSystemDeprecatedAction(Request $request, $cloudPk, $ifcPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $systemRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $systemRequest = $this->deserialize($systemRequest, 'OpenAPI\Server\Model\SystemRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\SystemRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($systemRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->createSystemDeprecated($cloudPk, $ifcPk, $projectPk, $systemRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 201:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation createTilesetDeprecated
     *
     * Create the tileset of the model and upload all files
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function createTilesetDeprecatedAction(Request $request, $cloudPk, $id, $projectPk)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->createTilesetDeprecated($cloudPk, $id, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 201:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation createZoneDeprecated
     *
     * Create a zone in the model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function createZoneDeprecatedAction(Request $request, $cloudPk, $ifcPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $color = $request->query->get('color');
        $zoneRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $zoneRequest = $this->deserialize($zoneRequest, 'array<OpenAPI\Server\Model\ZoneRequest>', $inputFormat);
            $color = $this->deserialize($color, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\All([
            new Assert\Type("OpenAPI\Server\Model\ZoneRequest"),
        ]);
        $asserts[] = new Assert\Valid();
        $response = $this->validate($zoneRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($color, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->createZoneDeprecated($cloudPk, $ifcPk, $projectPk, $zoneRequest, $color, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'If all creates fail: a list of errors';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation createZoneSpaceDeprecated
     *
     * Create a space in a zone
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function createZoneSpaceDeprecatedAction(Request $request, $cloudPk, $ifcPk, $projectPk, $zonePk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $zoneSpaceRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $zonePk = $this->deserialize($zonePk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $zoneSpaceRequest = $this->deserialize($zoneSpaceRequest, 'OpenAPI\Server\Model\ZoneSpaceRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($zonePk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\ZoneSpaceRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($zoneSpaceRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->createZoneSpaceDeprecated($cloudPk, $ifcPk, $projectPk, $zonePk, $zoneSpaceRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 201:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation deleteAccessTokenDeprecated
     *
     * Delete a token
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function deleteAccessTokenDeprecatedAction(Request $request, $cloudPk, $ifcPk, $projectPk, $token)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $token = $this->deserialize($token, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($token, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->deleteAccessTokenDeprecated($cloudPk, $ifcPk, $projectPk, $token, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation deleteBuildingDeprecated
     *
     * Delete a building of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function deleteBuildingDeprecatedAction(Request $request, $cloudPk, $ifcPk, $projectPk, $uuid)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $uuid = $this->deserialize($uuid, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($uuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->deleteBuildingDeprecated($cloudPk, $ifcPk, $projectPk, $uuid, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation deleteBuildingPlanDeprecated
     *
     * Delete the relation between a 2d model and a building
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function deleteBuildingPlanDeprecatedAction(Request $request, $buildingUuid, $cloudPk, $id, $ifcPk, $projectPk)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $buildingUuid = $this->deserialize($buildingUuid, 'string', 'string');
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($buildingUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->deleteBuildingPlanDeprecated($buildingUuid, $cloudPk, $id, $ifcPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation deleteCheckerDeprecated
     *
     * Delete a checker of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function deleteCheckerDeprecatedAction(Request $request, $cloudPk, $id, $ifcPk, $projectPk)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->deleteCheckerDeprecated($cloudPk, $id, $ifcPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation deleteCheckerResultDeprecated
     *
     * Delete a CheckerResult
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function deleteCheckerResultDeprecatedAction(Request $request, $checkerPk, $cloudPk, $id, $ifcPk, $projectPk)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $checkerPk = $this->deserialize($checkerPk, 'int', 'string');
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($checkerPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->deleteCheckerResultDeprecated($checkerPk, $cloudPk, $id, $ifcPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation deleteElementDeprecated
     *
     * Delete an element of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function deleteElementDeprecatedAction(Request $request, $cloudPk, $ifcPk, $projectPk, $uuid)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $uuid = $this->deserialize($uuid, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($uuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->deleteElementDeprecated($cloudPk, $ifcPk, $projectPk, $uuid, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation deleteIfcDeprecated
     *
     * Delete a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function deleteIfcDeprecatedAction(Request $request, $cloudPk, $id, $projectPk)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->deleteIfcDeprecated($cloudPk, $id, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation deleteIfcPropertyDefinitionDeprecated
     *
     * Delete a PropertyDefinitions of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function deleteIfcPropertyDefinitionDeprecatedAction(Request $request, $cloudPk, $id, $ifcPk, $projectPk)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->deleteIfcPropertyDefinitionDeprecated($cloudPk, $id, $ifcPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation deleteIfcPropertyDeprecated
     *
     * Delete a Property of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function deleteIfcPropertyDeprecatedAction(Request $request, $cloudPk, $id, $ifcPk, $projectPk)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->deleteIfcPropertyDeprecated($cloudPk, $id, $ifcPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation deleteIfcUnitDeprecated
     *
     * Delete a Unit of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function deleteIfcUnitDeprecatedAction(Request $request, $cloudPk, $id, $ifcPk, $projectPk)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->deleteIfcUnitDeprecated($cloudPk, $id, $ifcPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation deleteIfcWithoutDocDeprecated
     *
     * Delete the Model without deleting the related document
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function deleteIfcWithoutDocDeprecatedAction(Request $request, $cloudPk, $id, $projectPk)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->deleteIfcWithoutDocDeprecated($cloudPk, $id, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation deleteLayerDeprecated
     *
     * Delete a layer of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function deleteLayerDeprecatedAction(Request $request, $cloudPk, $id, $ifcPk, $projectPk)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->deleteLayerDeprecated($cloudPk, $id, $ifcPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation deletePropertySetDeprecated
     *
     * Delete a PropertySet of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function deletePropertySetDeprecatedAction(Request $request, $cloudPk, $id, $ifcPk, $projectPk)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->deletePropertySetDeprecated($cloudPk, $id, $ifcPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation deleteSpaceDeprecated
     *
     * Delete a space
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function deleteSpaceDeprecatedAction(Request $request, $cloudPk, $id, $ifcPk, $projectPk)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->deleteSpaceDeprecated($cloudPk, $id, $ifcPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation deleteStoreyDeprecated
     *
     * Delete a storey of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function deleteStoreyDeprecatedAction(Request $request, $cloudPk, $ifcPk, $projectPk, $uuid)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $uuid = $this->deserialize($uuid, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($uuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->deleteStoreyDeprecated($cloudPk, $ifcPk, $projectPk, $uuid, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation deleteStoreyPlanDeprecated
     *
     * Delete the relation between a 2d model and a storey
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function deleteStoreyPlanDeprecatedAction(Request $request, $cloudPk, $id, $ifcPk, $projectPk, $storeyUuid)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $storeyUuid = $this->deserialize($storeyUuid, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($storeyUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->deleteStoreyPlanDeprecated($cloudPk, $id, $ifcPk, $projectPk, $storeyUuid, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation deleteSystemDeprecated
     *
     * Delete a system of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function deleteSystemDeprecatedAction(Request $request, $cloudPk, $ifcPk, $projectPk, $uuid)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $uuid = $this->deserialize($uuid, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($uuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->deleteSystemDeprecated($cloudPk, $ifcPk, $projectPk, $uuid, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation deleteZoneDeprecated
     *
     * Delete a zone of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function deleteZoneDeprecatedAction(Request $request, $cloudPk, $id, $ifcPk, $projectPk)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->deleteZoneDeprecated($cloudPk, $id, $ifcPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation deleteZoneSpaceDeprecated
     *
     * Delete a space of a zone
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function deleteZoneSpaceDeprecatedAction(Request $request, $cloudPk, $id, $ifcPk, $projectPk, $zonePk)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $zonePk = $this->deserialize($zonePk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($zonePk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->deleteZoneSpaceDeprecated($cloudPk, $id, $ifcPk, $projectPk, $zonePk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation exportIfcDeprecated
     *
     * Export IFC
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function exportIfcDeprecatedAction(Request $request, $cloudPk, $id, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $ifcExportRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $ifcExportRequest = $this->deserialize($ifcExportRequest, 'OpenAPI\Server\Model\IfcExportRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\IfcExportRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($ifcExportRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->exportIfcDeprecated($cloudPk, $id, $projectPk, $ifcExportRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation fullUpdateElementDeprecated
     *
     * Update all fields of an element
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function fullUpdateElementDeprecatedAction(Request $request, $cloudPk, $ifcPk, $projectPk, $uuid)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $elementRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $uuid = $this->deserialize($uuid, 'string', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $elementRequest = $this->deserialize($elementRequest, 'OpenAPI\Server\Model\ElementRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($uuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\ElementRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($elementRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->fullUpdateElementDeprecated($cloudPk, $ifcPk, $projectPk, $uuid, $elementRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getAccessTokenDeprecated
     *
     * Retrieve one token created for this model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function getAccessTokenDeprecatedAction(Request $request, $cloudPk, $ifcPk, $projectPk, $token)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $token = $this->deserialize($token, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($token, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getAccessTokenDeprecated($cloudPk, $ifcPk, $projectPk, $token, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getAccessTokensDeprecated
     *
     * Retrieve all tokens created for this model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function getAccessTokensDeprecatedAction(Request $request, $cloudPk, $ifcPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getAccessTokensDeprecated($cloudPk, $ifcPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getBuildingDeprecated
     *
     * Retrieve a building of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function getBuildingDeprecatedAction(Request $request, $cloudPk, $ifcPk, $projectPk, $uuid)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $uuid = $this->deserialize($uuid, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($uuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getBuildingDeprecated($cloudPk, $ifcPk, $projectPk, $uuid, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getBuildingPlanPositioningDeprecated
     *
     * Retrieve the postioning of the plan in the building
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function getBuildingPlanPositioningDeprecatedAction(Request $request, $buildingUuid, $cloudPk, $id, $ifcPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $buildingUuid = $this->deserialize($buildingUuid, 'string', 'string');
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($buildingUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getBuildingPlanPositioningDeprecated($buildingUuid, $cloudPk, $id, $ifcPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getBuildingsDeprecated
     *
     * Retrieve all buildings of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function getBuildingsDeprecatedAction(Request $request, $cloudPk, $ifcPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getBuildingsDeprecated($cloudPk, $ifcPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getCheckerDeprecated
     *
     * Retrieve a checker of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function getCheckerDeprecatedAction(Request $request, $cloudPk, $id, $ifcPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getCheckerDeprecated($cloudPk, $id, $ifcPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getCheckerResultDeprecated
     *
     * Retrieve one CheckerResult
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function getCheckerResultDeprecatedAction(Request $request, $checkerPk, $cloudPk, $id, $ifcPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $checkerPk = $this->deserialize($checkerPk, 'int', 'string');
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($checkerPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getCheckerResultDeprecated($checkerPk, $cloudPk, $id, $ifcPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getCheckerResultsDeprecated
     *
     * Retrieve all CheckerResults
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function getCheckerResultsDeprecatedAction(Request $request, $checkerPk, $cloudPk, $ifcPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $checkerPk = $this->deserialize($checkerPk, 'int', 'string');
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($checkerPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getCheckerResultsDeprecated($checkerPk, $cloudPk, $ifcPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getCheckersDeprecated
     *
     * Retrieve all checkers of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function getCheckersDeprecatedAction(Request $request, $cloudPk, $ifcPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getCheckersDeprecated($cloudPk, $ifcPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getClassificationsOfElementDeprecated
     *
     * Retrieve all classifications of an element
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function getClassificationsOfElementDeprecatedAction(Request $request, $cloudPk, $elementUuid, $ifcPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $elementUuid = $this->deserialize($elementUuid, 'string', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($elementUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getClassificationsOfElementDeprecated($cloudPk, $elementUuid, $ifcPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getDocumentsOfElementDeprecated
     *
     * Retrieve all documents of an element
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function getDocumentsOfElementDeprecatedAction(Request $request, $cloudPk, $elementUuid, $ifcPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $elementUuid = $this->deserialize($elementUuid, 'string', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($elementUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getDocumentsOfElementDeprecated($cloudPk, $elementUuid, $ifcPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getElementDeprecated
     *
     * Retrieve an element of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function getElementDeprecatedAction(Request $request, $cloudPk, $ifcPk, $projectPk, $uuid)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $uuid = $this->deserialize($uuid, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($uuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getElementDeprecated($cloudPk, $ifcPk, $projectPk, $uuid, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getElementLinkedDocumentsDeprecated
     *
     * Retrieve all documents linked to any element
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function getElementLinkedDocumentsDeprecatedAction(Request $request, $cloudPk, $ifcPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $classification = $request->query->get('classification');
        $classificationNotation = $request->query->get('classificationNotation');
        $type = $request->query->get('type');

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $classification = $this->deserialize($classification, 'string', 'string');
            $classificationNotation = $this->deserialize($classificationNotation, 'string', 'string');
            $type = $this->deserialize($type, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($classification, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($classificationNotation, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($type, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getElementLinkedDocumentsDeprecated($cloudPk, $ifcPk, $projectPk, $classification, $classificationNotation, $type, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getElementPropertySetDeprecated
     *
     * Retrieve a PropertySet of an element
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function getElementPropertySetDeprecatedAction(Request $request, $cloudPk, $elementUuid, $id, $ifcPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $elementUuid = $this->deserialize($elementUuid, 'string', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($elementUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getElementPropertySetDeprecated($cloudPk, $elementUuid, $id, $ifcPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getElementPropertySetPropertiesDeprecated
     *
     * Retrieve all Properties of a PropertySet
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function getElementPropertySetPropertiesDeprecatedAction(Request $request, $cloudPk, $elementUuid, $ifcPk, $projectPk, $propertysetPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $elementUuid = $this->deserialize($elementUuid, 'string', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $propertysetPk = $this->deserialize($propertysetPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($elementUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($propertysetPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getElementPropertySetPropertiesDeprecated($cloudPk, $elementUuid, $ifcPk, $projectPk, $propertysetPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getElementPropertySetPropertyDefinitionDeprecated
     *
     * Retrieve a Definition of a Property
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function getElementPropertySetPropertyDefinitionDeprecatedAction(Request $request, $cloudPk, $elementUuid, $id, $ifcPk, $projectPk, $propertyPk, $propertysetPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $elementUuid = $this->deserialize($elementUuid, 'string', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $propertyPk = $this->deserialize($propertyPk, 'int', 'string');
            $propertysetPk = $this->deserialize($propertysetPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($elementUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($propertyPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($propertysetPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getElementPropertySetPropertyDefinitionDeprecated($cloudPk, $elementUuid, $id, $ifcPk, $projectPk, $propertyPk, $propertysetPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getElementPropertySetPropertyDefinitionUnitDeprecated
     *
     * Retrieve a Unit of a Definition
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function getElementPropertySetPropertyDefinitionUnitDeprecatedAction(Request $request, $cloudPk, $elementUuid, $id, $ifcPk, $projectPk, $propertyPk, $propertydefinitionPk, $propertysetPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $elementUuid = $this->deserialize($elementUuid, 'string', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $propertyPk = $this->deserialize($propertyPk, 'int', 'string');
            $propertydefinitionPk = $this->deserialize($propertydefinitionPk, 'int', 'string');
            $propertysetPk = $this->deserialize($propertysetPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($elementUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($propertyPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($propertydefinitionPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($propertysetPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getElementPropertySetPropertyDefinitionUnitDeprecated($cloudPk, $elementUuid, $id, $ifcPk, $projectPk, $propertyPk, $propertydefinitionPk, $propertysetPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getElementPropertySetPropertyDefinitionUnitsDeprecated
     *
     * Retrieve all Units of a Definition
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function getElementPropertySetPropertyDefinitionUnitsDeprecatedAction(Request $request, $cloudPk, $elementUuid, $ifcPk, $projectPk, $propertyPk, $propertydefinitionPk, $propertysetPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $elementUuid = $this->deserialize($elementUuid, 'string', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $propertyPk = $this->deserialize($propertyPk, 'int', 'string');
            $propertydefinitionPk = $this->deserialize($propertydefinitionPk, 'int', 'string');
            $propertysetPk = $this->deserialize($propertysetPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($elementUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($propertyPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($propertydefinitionPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($propertysetPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getElementPropertySetPropertyDefinitionUnitsDeprecated($cloudPk, $elementUuid, $ifcPk, $projectPk, $propertyPk, $propertydefinitionPk, $propertysetPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getElementPropertySetPropertyDefinitionsDeprecated
     *
     * Retrieve all Definitions of a PropertySet
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function getElementPropertySetPropertyDefinitionsDeprecatedAction(Request $request, $cloudPk, $elementUuid, $ifcPk, $projectPk, $propertyPk, $propertysetPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $elementUuid = $this->deserialize($elementUuid, 'string', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $propertyPk = $this->deserialize($propertyPk, 'int', 'string');
            $propertysetPk = $this->deserialize($propertysetPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($elementUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($propertyPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($propertysetPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getElementPropertySetPropertyDefinitionsDeprecated($cloudPk, $elementUuid, $ifcPk, $projectPk, $propertyPk, $propertysetPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getElementPropertySetPropertyDeprecated
     *
     * Retrieve a Property of a PropertySet
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function getElementPropertySetPropertyDeprecatedAction(Request $request, $cloudPk, $elementUuid, $id, $ifcPk, $projectPk, $propertysetPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $elementUuid = $this->deserialize($elementUuid, 'string', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $propertysetPk = $this->deserialize($propertysetPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($elementUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($propertysetPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getElementPropertySetPropertyDeprecated($cloudPk, $elementUuid, $id, $ifcPk, $projectPk, $propertysetPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getElementPropertySetsDeprecated
     *
     * Retrieve all PropertySets of an element
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function getElementPropertySetsDeprecatedAction(Request $request, $cloudPk, $elementUuid, $ifcPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $elementUuid = $this->deserialize($elementUuid, 'string', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($elementUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getElementPropertySetsDeprecated($cloudPk, $elementUuid, $ifcPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getElementsDeprecated
     *
     * Retrieve all elements of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function getElementsDeprecatedAction(Request $request, $cloudPk, $ifcPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $classification = $request->query->get('classification');
        $classificationNotation = $request->query->get('classificationNotation');
        $type = $request->query->get('type');

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $classification = $this->deserialize($classification, 'string', 'string');
            $classificationNotation = $this->deserialize($classificationNotation, 'string', 'string');
            $type = $this->deserialize($type, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($classification, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($classificationNotation, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($type, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getElementsDeprecated($cloudPk, $ifcPk, $projectPk, $classification, $classificationNotation, $type, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getElementsFromClassificationDeprecated
     *
     * Retrieve all elements with the classification
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function getElementsFromClassificationDeprecatedAction(Request $request, $cloudPk, $ifcPk, $modelClassificationPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $modelClassificationPk = $this->deserialize($modelClassificationPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelClassificationPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getElementsFromClassificationDeprecated($cloudPk, $ifcPk, $modelClassificationPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getIfcClassificationsDeprecated
     *
     * Retrieve all classifications in a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function getIfcClassificationsDeprecatedAction(Request $request, $cloudPk, $ifcPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getIfcClassificationsDeprecated($cloudPk, $ifcPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getIfcDeprecated
     *
     * Retrieve one model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function getIfcDeprecatedAction(Request $request, $cloudPk, $id, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getIfcDeprecated($cloudPk, $id, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getIfcMaterialDeprecated
     *
     * Retrieve a material of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function getIfcMaterialDeprecatedAction(Request $request, $cloudPk, $id, $ifcPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getIfcMaterialDeprecated($cloudPk, $id, $ifcPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getIfcMaterialsDeprecated
     *
     * Retrieve all materials of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function getIfcMaterialsDeprecatedAction(Request $request, $cloudPk, $ifcPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getIfcMaterialsDeprecated($cloudPk, $ifcPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getIfcPropertiesDeprecated
     *
     * Retrieve all Properties of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function getIfcPropertiesDeprecatedAction(Request $request, $cloudPk, $ifcPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getIfcPropertiesDeprecated($cloudPk, $ifcPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getIfcPropertyDefinitionDeprecated
     *
     * Retrieve a PropertyDefinition of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function getIfcPropertyDefinitionDeprecatedAction(Request $request, $cloudPk, $id, $ifcPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getIfcPropertyDefinitionDeprecated($cloudPk, $id, $ifcPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getIfcPropertyDefinitionsDeprecated
     *
     * Retrieve all PropertyDefinitions of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function getIfcPropertyDefinitionsDeprecatedAction(Request $request, $cloudPk, $ifcPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getIfcPropertyDefinitionsDeprecated($cloudPk, $ifcPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getIfcPropertyDeprecated
     *
     * Retrieve a Property of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function getIfcPropertyDeprecatedAction(Request $request, $cloudPk, $id, $ifcPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getIfcPropertyDeprecated($cloudPk, $id, $ifcPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getIfcUnitDeprecated
     *
     * Retrieve a Unit of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function getIfcUnitDeprecatedAction(Request $request, $cloudPk, $id, $ifcPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getIfcUnitDeprecated($cloudPk, $id, $ifcPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getIfcUnitsDeprecated
     *
     * Retrieve all Units of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function getIfcUnitsDeprecatedAction(Request $request, $cloudPk, $ifcPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getIfcUnitsDeprecated($cloudPk, $ifcPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getIfcsDeprecated
     *
     * Retrieve all models
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function getIfcsDeprecatedAction(Request $request, $cloudPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $source = $request->query->get('source');
        $status = $request->query->get('status');
        $type = $request->query->get('type');

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $source = $this->deserialize($source, 'string', 'string');
            $status = $this->deserialize($status, 'array<multi,string>', 'string');
            $type = $this->deserialize($type, 'array<multi,string>', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Choice([ "EXPORT", "MERGE", "OPTIMIZED", "SPLIT", "UPLOAD" ]);
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($source, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\All([
            new Assert\Choice([ "C", "D", "E", "I", "P", "W", "X" ])
        ]);
        $asserts[] = new Assert\All([
            new Assert\Type("string"),
        ]);
        $asserts[] = new Assert\Valid();
        $response = $this->validate($status, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\All([
            new Assert\Choice([ "BFX", "DAE", "DWG", "DXF", "GLTF", "IFC", "JPEG", "METABUILDING", "OBJ", "PDF", "PNG", "POINT_CLOUD" ])
        ]);
        $asserts[] = new Assert\All([
            new Assert\Type("string"),
        ]);
        $asserts[] = new Assert\Valid();
        $response = $this->validate($type, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getIfcsDeprecated($cloudPk, $projectPk, $source, $status, $type, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getLayerDeprecated
     *
     * Retrieve a layer of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function getLayerDeprecatedAction(Request $request, $cloudPk, $id, $ifcPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getLayerDeprecated($cloudPk, $id, $ifcPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getLayersDeprecated
     *
     * Retrieve all layers of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function getLayersDeprecatedAction(Request $request, $cloudPk, $ifcPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getLayersDeprecated($cloudPk, $ifcPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getMaterialDeprecated
     *
     * Retrieve a material of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function getMaterialDeprecatedAction(Request $request, $cloudPk, $elementUuid, $id, $ifcPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $elementUuid = $this->deserialize($elementUuid, 'string', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($elementUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getMaterialDeprecated($cloudPk, $elementUuid, $id, $ifcPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getMaterialsDeprecated
     *
     * Retrieve all materials of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function getMaterialsDeprecatedAction(Request $request, $cloudPk, $elementUuid, $ifcPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $elementUuid = $this->deserialize($elementUuid, 'string', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($elementUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getMaterialsDeprecated($cloudPk, $elementUuid, $ifcPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getProcessorHandlerDeprecated
     *
     * Retrieve a processor handler
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function getProcessorHandlerDeprecatedAction(Request $request, $cloudPk, $id, $ifcPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getProcessorHandlerDeprecated($cloudPk, $id, $ifcPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getProcessorHandlersDeprecated
     *
     * Get all processor handlers
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function getProcessorHandlersDeprecatedAction(Request $request, $cloudPk, $ifcPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getProcessorHandlersDeprecated($cloudPk, $ifcPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getPropertySetDeprecated
     *
     * Retrieve a PropertySet of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function getPropertySetDeprecatedAction(Request $request, $cloudPk, $id, $ifcPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getPropertySetDeprecated($cloudPk, $id, $ifcPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getPropertySetsDeprecated
     *
     * Retrieve all PropertySets of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function getPropertySetsDeprecatedAction(Request $request, $cloudPk, $ifcPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getPropertySetsDeprecated($cloudPk, $ifcPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getRawElementsDeprecated
     *
     * Retrieve all elements in a optimized format
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function getRawElementsDeprecatedAction(Request $request, $cloudPk, $ifcPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getRawElementsDeprecated($cloudPk, $ifcPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getSimpleElementDeprecated
     *
     * Retrieve an element of a model with a simple value representation
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function getSimpleElementDeprecatedAction(Request $request, $cloudPk, $ifcPk, $projectPk, $uuid)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $uuid = $this->deserialize($uuid, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($uuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getSimpleElementDeprecated($cloudPk, $ifcPk, $projectPk, $uuid, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getSimpleElementsDeprecated
     *
     * Retrieve all elements of a model with a simple value representation
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function getSimpleElementsDeprecatedAction(Request $request, $cloudPk, $ifcPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getSimpleElementsDeprecated($cloudPk, $ifcPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getSpaceDeprecated
     *
     * Retrieve one space of the model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function getSpaceDeprecatedAction(Request $request, $cloudPk, $id, $ifcPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getSpaceDeprecated($cloudPk, $id, $ifcPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getSpacesDeprecated
     *
     * Retrieve all spaces of the model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function getSpacesDeprecatedAction(Request $request, $cloudPk, $ifcPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getSpacesDeprecated($cloudPk, $ifcPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getStoreyDeprecated
     *
     * Retrieve a storey of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function getStoreyDeprecatedAction(Request $request, $cloudPk, $ifcPk, $projectPk, $uuid)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $uuid = $this->deserialize($uuid, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($uuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getStoreyDeprecated($cloudPk, $ifcPk, $projectPk, $uuid, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getStoreyPlanPositioningDeprecated
     *
     * Retrieve the postioning of the plan in the storey
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function getStoreyPlanPositioningDeprecatedAction(Request $request, $cloudPk, $id, $ifcPk, $projectPk, $storeyUuid)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $storeyUuid = $this->deserialize($storeyUuid, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($storeyUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getStoreyPlanPositioningDeprecated($cloudPk, $id, $ifcPk, $projectPk, $storeyUuid, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getStoreysDeprecated
     *
     * Retrieve all storeys of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function getStoreysDeprecatedAction(Request $request, $cloudPk, $ifcPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getStoreysDeprecated($cloudPk, $ifcPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getSystemDeprecated
     *
     * Retrieve a system of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function getSystemDeprecatedAction(Request $request, $cloudPk, $ifcPk, $projectPk, $uuid)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $uuid = $this->deserialize($uuid, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($uuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getSystemDeprecated($cloudPk, $ifcPk, $projectPk, $uuid, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getSystemsDeprecated
     *
     * Retrieve all systems of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function getSystemsDeprecatedAction(Request $request, $cloudPk, $ifcPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getSystemsDeprecated($cloudPk, $ifcPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getTilesetDeprecated
     *
     * Retrieve the tileset of the model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function getTilesetDeprecatedAction(Request $request, $cloudPk, $id, $projectPk)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $tileFormat = $request->query->get('tileFormat', 'pnts');

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $tileFormat = $this->deserialize($tileFormat, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Choice([ "pnts", "xkt" ]);
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($tileFormat, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->getTilesetDeprecated($cloudPk, $id, $projectPk, $tileFormat, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = 'No response body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getZoneDeprecated
     *
     * Retrieve one zone of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function getZoneDeprecatedAction(Request $request, $cloudPk, $id, $ifcPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getZoneDeprecated($cloudPk, $id, $ifcPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getZoneSpaceDeprecated
     *
     * Retrieve one space of a zone
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function getZoneSpaceDeprecatedAction(Request $request, $cloudPk, $id, $ifcPk, $projectPk, $zonePk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $zonePk = $this->deserialize($zonePk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($zonePk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getZoneSpaceDeprecated($cloudPk, $id, $ifcPk, $projectPk, $zonePk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getZoneSpacesDeprecated
     *
     * Retrieve all spaces of a zone
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function getZoneSpacesDeprecatedAction(Request $request, $cloudPk, $ifcPk, $projectPk, $zonePk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $zonePk = $this->deserialize($zonePk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($zonePk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getZoneSpacesDeprecated($cloudPk, $ifcPk, $projectPk, $zonePk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getZonesDeprecated
     *
     * Retrieve zones of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function getZonesDeprecatedAction(Request $request, $cloudPk, $ifcPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $color = $request->query->get('color');

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $color = $this->deserialize($color, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($color, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getZonesDeprecated($cloudPk, $ifcPk, $projectPk, $color, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation launchNewCheckDeprecated
     *
     * Launch a new check on the model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function launchNewCheckDeprecatedAction(Request $request, $cloudPk, $id, $ifcPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $ifcCheckerRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $ifcCheckerRequest = $this->deserialize($ifcCheckerRequest, 'OpenAPI\Server\Model\IfcCheckerRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\IfcCheckerRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($ifcCheckerRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->launchNewCheckDeprecated($cloudPk, $id, $ifcPk, $projectPk, $ifcCheckerRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 201:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation linkDocumentsOfElementDeprecated
     *
     * Link one or many documents to an element
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function linkDocumentsOfElementDeprecatedAction(Request $request, $cloudPk, $elementUuid, $ifcPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $requestBody = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $elementUuid = $this->deserialize($elementUuid, 'string', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $requestBody = $this->deserialize($requestBody, 'array<int>', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($elementUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\All([
            new Assert\Type("int"),
        ]);
        $asserts[] = new Assert\Valid();
        $response = $this->validate($requestBody, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->linkDocumentsOfElementDeprecated($cloudPk, $elementUuid, $ifcPk, $projectPk, $requestBody, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'All creates failed: list of errors';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation listClassificationElementRelationsDeprecated
     *
     * List all associations between classifications and elements
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function listClassificationElementRelationsDeprecatedAction(Request $request, $cloudPk, $ifcPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->listClassificationElementRelationsDeprecated($cloudPk, $ifcPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation mergeIfcsDeprecated
     *
     * Merge IFC files
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function mergeIfcsDeprecatedAction(Request $request, $cloudPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $ifcMergeRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $ifcMergeRequest = $this->deserialize($ifcMergeRequest, 'OpenAPI\Server\Model\IfcMergeRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\IfcMergeRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($ifcMergeRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->mergeIfcsDeprecated($cloudPk, $projectPk, $ifcMergeRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation optimizeIfcDeprecated
     *
     * Optimize the IFC
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function optimizeIfcDeprecatedAction(Request $request, $cloudPk, $id, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $ifcOptimizeRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $ifcOptimizeRequest = $this->deserialize($ifcOptimizeRequest, 'OpenAPI\Server\Model\IfcOptimizeRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\IfcOptimizeRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($ifcOptimizeRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->optimizeIfcDeprecated($cloudPk, $id, $projectPk, $ifcOptimizeRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation removeAllElementPropertySetDeprecated
     *
     * Remove all property sets from element
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function removeAllElementPropertySetDeprecatedAction(Request $request, $cloudPk, $elementUuid, $ifcPk, $projectPk)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $elementUuid = $this->deserialize($elementUuid, 'string', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($elementUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->removeAllElementPropertySetDeprecated($cloudPk, $elementUuid, $ifcPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation removeClassificationOfElementDeprecated
     *
     * Remove a classification from an element
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function removeClassificationOfElementDeprecatedAction(Request $request, $cloudPk, $elementUuid, $id, $ifcPk, $projectPk)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $elementUuid = $this->deserialize($elementUuid, 'string', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($elementUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->removeClassificationOfElementDeprecated($cloudPk, $elementUuid, $id, $ifcPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation removeDocumentOfElementDeprecated
     *
     * Remove a documents from an element
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function removeDocumentOfElementDeprecatedAction(Request $request, $cloudPk, $elementUuid, $id, $ifcPk, $projectPk)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $elementUuid = $this->deserialize($elementUuid, 'string', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($elementUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->removeDocumentOfElementDeprecated($cloudPk, $elementUuid, $id, $ifcPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation removeElementPropertySetDeprecated
     *
     * Remove a PropertySet from an element
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function removeElementPropertySetDeprecatedAction(Request $request, $cloudPk, $elementUuid, $id, $ifcPk, $projectPk)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $elementUuid = $this->deserialize($elementUuid, 'string', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($elementUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->removeElementPropertySetDeprecated($cloudPk, $elementUuid, $id, $ifcPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation removeElementPropertySetPropertyDefinitionDeprecated
     *
     * Delete a Definition to a Property
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function removeElementPropertySetPropertyDefinitionDeprecatedAction(Request $request, $cloudPk, $elementUuid, $id, $ifcPk, $projectPk, $propertyPk, $propertysetPk)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $elementUuid = $this->deserialize($elementUuid, 'string', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $propertyPk = $this->deserialize($propertyPk, 'int', 'string');
            $propertysetPk = $this->deserialize($propertysetPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($elementUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($propertyPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($propertysetPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->removeElementPropertySetPropertyDefinitionDeprecated($cloudPk, $elementUuid, $id, $ifcPk, $projectPk, $propertyPk, $propertysetPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation removeElementPropertySetPropertyDefinitionUnitDeprecated
     *
     * Remove a Unit from a Definition
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function removeElementPropertySetPropertyDefinitionUnitDeprecatedAction(Request $request, $cloudPk, $elementUuid, $id, $ifcPk, $projectPk, $propertyPk, $propertydefinitionPk, $propertysetPk)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $elementUuid = $this->deserialize($elementUuid, 'string', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $propertyPk = $this->deserialize($propertyPk, 'int', 'string');
            $propertydefinitionPk = $this->deserialize($propertydefinitionPk, 'int', 'string');
            $propertysetPk = $this->deserialize($propertysetPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($elementUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($propertyPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($propertydefinitionPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($propertysetPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->removeElementPropertySetPropertyDefinitionUnitDeprecated($cloudPk, $elementUuid, $id, $ifcPk, $projectPk, $propertyPk, $propertydefinitionPk, $propertysetPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation removeElementPropertySetPropertyDeprecated
     *
     * Remove a property from a PropertySet
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function removeElementPropertySetPropertyDeprecatedAction(Request $request, $cloudPk, $elementUuid, $id, $ifcPk, $projectPk, $propertysetPk)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $elementUuid = $this->deserialize($elementUuid, 'string', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $propertysetPk = $this->deserialize($propertysetPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($elementUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($propertysetPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->removeElementPropertySetPropertyDeprecated($cloudPk, $elementUuid, $id, $ifcPk, $projectPk, $propertysetPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation removeElementsFromClassificationDeprecated
     *
     * Remove the classification from all elements
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function removeElementsFromClassificationDeprecatedAction(Request $request, $cloudPk, $ifcPk, $modelClassificationPk, $projectPk, $uuid)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $modelClassificationPk = $this->deserialize($modelClassificationPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $uuid = $this->deserialize($uuid, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelClassificationPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($uuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->removeElementsFromClassificationDeprecated($cloudPk, $ifcPk, $modelClassificationPk, $projectPk, $uuid, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation reprocessIfcDeprecated
     *
     * Reprocess Model file
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function reprocessIfcDeprecatedAction(Request $request, $cloudPk, $id, $projectPk)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->reprocessIfcDeprecated($cloudPk, $id, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation updateAccessTokenDeprecated
     *
     * Update some fields of a token
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function updateAccessTokenDeprecatedAction(Request $request, $cloudPk, $ifcPk, $projectPk, $token)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $patchedIfcAccessTokenRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $token = $this->deserialize($token, 'string', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $patchedIfcAccessTokenRequest = $this->deserialize($patchedIfcAccessTokenRequest, 'OpenAPI\Server\Model\PatchedIfcAccessTokenRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($token, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\PatchedIfcAccessTokenRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($patchedIfcAccessTokenRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->updateAccessTokenDeprecated($cloudPk, $ifcPk, $projectPk, $token, $patchedIfcAccessTokenRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation updateBuildingDeprecated
     *
     * Update some fields of a building
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function updateBuildingDeprecatedAction(Request $request, $cloudPk, $ifcPk, $projectPk, $uuid)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $patchedStoreyBuildingRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $uuid = $this->deserialize($uuid, 'string', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $patchedStoreyBuildingRequest = $this->deserialize($patchedStoreyBuildingRequest, 'OpenAPI\Server\Model\PatchedStoreyBuildingRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($uuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\PatchedStoreyBuildingRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($patchedStoreyBuildingRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->updateBuildingDeprecated($cloudPk, $ifcPk, $projectPk, $uuid, $patchedStoreyBuildingRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation updateBuildingPlanPositioningDeprecated
     *
     * Update the postioning of the plan in the building
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function updateBuildingPlanPositioningDeprecatedAction(Request $request, $buildingUuid, $cloudPk, $id, $ifcPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $patchedPositioningPlanRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $buildingUuid = $this->deserialize($buildingUuid, 'string', 'string');
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $patchedPositioningPlanRequest = $this->deserialize($patchedPositioningPlanRequest, 'OpenAPI\Server\Model\PatchedPositioningPlanRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($buildingUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\PatchedPositioningPlanRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($patchedPositioningPlanRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->updateBuildingPlanPositioningDeprecated($buildingUuid, $cloudPk, $id, $ifcPk, $projectPk, $patchedPositioningPlanRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation updateCheckerDeprecated
     *
     * Update some fields of a checker of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function updateCheckerDeprecatedAction(Request $request, $cloudPk, $id, $ifcPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $patchedIfcCheckerRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $patchedIfcCheckerRequest = $this->deserialize($patchedIfcCheckerRequest, 'OpenAPI\Server\Model\PatchedIfcCheckerRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\PatchedIfcCheckerRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($patchedIfcCheckerRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->updateCheckerDeprecated($cloudPk, $id, $ifcPk, $projectPk, $patchedIfcCheckerRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation updateCheckerResultDeprecated
     *
     * Update some fields of a CheckerResult
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function updateCheckerResultDeprecatedAction(Request $request, $checkerPk, $cloudPk, $id, $ifcPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $patchedCheckerResultRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $checkerPk = $this->deserialize($checkerPk, 'int', 'string');
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $patchedCheckerResultRequest = $this->deserialize($patchedCheckerResultRequest, 'OpenAPI\Server\Model\PatchedCheckerResultRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($checkerPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\PatchedCheckerResultRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($patchedCheckerResultRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->updateCheckerResultDeprecated($checkerPk, $cloudPk, $id, $ifcPk, $projectPk, $patchedCheckerResultRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation updateElementDeprecated
     *
     * Update some fields of an element
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function updateElementDeprecatedAction(Request $request, $cloudPk, $ifcPk, $projectPk, $uuid)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $patchedElementRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $uuid = $this->deserialize($uuid, 'string', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $patchedElementRequest = $this->deserialize($patchedElementRequest, 'OpenAPI\Server\Model\PatchedElementRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($uuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\PatchedElementRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($patchedElementRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->updateElementDeprecated($cloudPk, $ifcPk, $projectPk, $uuid, $patchedElementRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation updateElementPropertySetPropertyDeprecated
     *
     * Update a property from an element
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function updateElementPropertySetPropertyDeprecatedAction(Request $request, $cloudPk, $elementUuid, $id, $ifcPk, $projectPk, $propertysetPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $patchedPropertyRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $elementUuid = $this->deserialize($elementUuid, 'string', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $propertysetPk = $this->deserialize($propertysetPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $patchedPropertyRequest = $this->deserialize($patchedPropertyRequest, 'OpenAPI\Server\Model\PatchedPropertyRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($elementUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($propertysetPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\PatchedPropertyRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($patchedPropertyRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->updateElementPropertySetPropertyDeprecated($cloudPk, $elementUuid, $id, $ifcPk, $projectPk, $propertysetPk, $patchedPropertyRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation updateIfcDeprecated
     *
     * Update some fields of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function updateIfcDeprecatedAction(Request $request, $cloudPk, $id, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $patchedModelRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $patchedModelRequest = $this->deserialize($patchedModelRequest, 'OpenAPI\Server\Model\PatchedModelRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\PatchedModelRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($patchedModelRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->updateIfcDeprecated($cloudPk, $id, $projectPk, $patchedModelRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation updateIfcFilesDeprecated
     *
     * Update models file (gltf, svg, structure, etc)
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function updateIfcFilesDeprecatedAction(Request $request, $cloudPk, $id, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $structureFile = $request->files->get('structureFile');
        $systemsFile = $request->files->get('systemsFile');
        $mapFile = $request->files->get('mapFile');
        $gltfFile = $request->files->get('gltfFile');
        $gltfWithOpeningsFile = $request->files->get('gltfWithOpeningsFile');
        $bvhTreeFile = $request->files->get('bvhTreeFile');
        $previewFile = $request->files->get('previewFile');
        $xktFile = $request->files->get('xktFile');

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\File();
        $response = $this->validate($structureFile, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\File();
        $response = $this->validate($systemsFile, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\File();
        $response = $this->validate($mapFile, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\File();
        $response = $this->validate($gltfFile, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\File();
        $response = $this->validate($gltfWithOpeningsFile, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\File();
        $response = $this->validate($bvhTreeFile, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\File();
        $response = $this->validate($previewFile, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\File();
        $response = $this->validate($xktFile, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->updateIfcFilesDeprecated($cloudPk, $id, $projectPk, $structureFile, $systemsFile, $mapFile, $gltfFile, $gltfWithOpeningsFile, $bvhTreeFile, $previewFile, $xktFile, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation updateIfcPropertyDefinitionDeprecated
     *
     * Update some fields of many PropertyDefinitions of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function updateIfcPropertyDefinitionDeprecatedAction(Request $request, $cloudPk, $id, $ifcPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $patchedPropertyDefinitionRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $patchedPropertyDefinitionRequest = $this->deserialize($patchedPropertyDefinitionRequest, 'OpenAPI\Server\Model\PatchedPropertyDefinitionRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\PatchedPropertyDefinitionRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($patchedPropertyDefinitionRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->updateIfcPropertyDefinitionDeprecated($cloudPk, $id, $ifcPk, $projectPk, $patchedPropertyDefinitionRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation updateIfcPropertyDeprecated
     *
     * Update some fields of a Property
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function updateIfcPropertyDeprecatedAction(Request $request, $cloudPk, $id, $ifcPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $patchedPropertyRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $patchedPropertyRequest = $this->deserialize($patchedPropertyRequest, 'OpenAPI\Server\Model\PatchedPropertyRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\PatchedPropertyRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($patchedPropertyRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->updateIfcPropertyDeprecated($cloudPk, $id, $ifcPk, $projectPk, $patchedPropertyRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation updateIfcUnitDeprecated
     *
     * Update some fields of a Unit of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function updateIfcUnitDeprecatedAction(Request $request, $cloudPk, $id, $ifcPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $patchedUnitRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $patchedUnitRequest = $this->deserialize($patchedUnitRequest, 'OpenAPI\Server\Model\PatchedUnitRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\PatchedUnitRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($patchedUnitRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->updateIfcUnitDeprecated($cloudPk, $id, $ifcPk, $projectPk, $patchedUnitRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation updateLayerDeprecated
     *
     * Update some fields of a layer
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function updateLayerDeprecatedAction(Request $request, $cloudPk, $id, $ifcPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $patchedLayerRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $patchedLayerRequest = $this->deserialize($patchedLayerRequest, 'OpenAPI\Server\Model\PatchedLayerRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\PatchedLayerRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($patchedLayerRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->updateLayerDeprecated($cloudPk, $id, $ifcPk, $projectPk, $patchedLayerRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation updateOrderBuildingPlanDeprecated
     *
     * Update order of all plan of a building
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function updateOrderBuildingPlanDeprecatedAction(Request $request, $buildingUuid, $cloudPk, $ifcPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $requestBody = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $buildingUuid = $this->deserialize($buildingUuid, 'string', 'string');
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $requestBody = $this->deserialize($requestBody, 'array<int>', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($buildingUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\All([
            new Assert\Type("int"),
        ]);
        $asserts[] = new Assert\Valid();
        $response = $this->validate($requestBody, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->updateOrderBuildingPlanDeprecated($buildingUuid, $cloudPk, $ifcPk, $projectPk, $requestBody, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation updateOrderStoreyPlanDeprecated
     *
     * Update order of all plan of a storey
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function updateOrderStoreyPlanDeprecatedAction(Request $request, $cloudPk, $ifcPk, $projectPk, $storeyUuid)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $requestBody = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $storeyUuid = $this->deserialize($storeyUuid, 'string', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $requestBody = $this->deserialize($requestBody, 'array<int>', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($storeyUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\All([
            new Assert\Type("int"),
        ]);
        $asserts[] = new Assert\Valid();
        $response = $this->validate($requestBody, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->updateOrderStoreyPlanDeprecated($cloudPk, $ifcPk, $projectPk, $storeyUuid, $requestBody, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation updateOrderStoreysDeprecated
     *
     * Update order of all storey of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function updateOrderStoreysDeprecatedAction(Request $request, $cloudPk, $ifcPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $requestBody = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $requestBody = $this->deserialize($requestBody, 'array<string>', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\All([
            new Assert\Type("string"),
        ]);
        $asserts[] = new Assert\Valid();
        $response = $this->validate($requestBody, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->updateOrderStoreysDeprecated($cloudPk, $ifcPk, $projectPk, $requestBody, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation updateProcessorHandlerDeprecated
     *
     * Update the status of a processor handler
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function updateProcessorHandlerDeprecatedAction(Request $request, $cloudPk, $id, $ifcPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $patchedProcessorHandlerRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $patchedProcessorHandlerRequest = $this->deserialize($patchedProcessorHandlerRequest, 'OpenAPI\Server\Model\PatchedProcessorHandlerRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\PatchedProcessorHandlerRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($patchedProcessorHandlerRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->updateProcessorHandlerDeprecated($cloudPk, $id, $ifcPk, $projectPk, $patchedProcessorHandlerRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation updatePropertySetDeprecated
     *
     * Update some fields of a PropertySet
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function updatePropertySetDeprecatedAction(Request $request, $cloudPk, $id, $ifcPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $patchedPropertySetRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $patchedPropertySetRequest = $this->deserialize($patchedPropertySetRequest, 'OpenAPI\Server\Model\PatchedPropertySetRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\PatchedPropertySetRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($patchedPropertySetRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->updatePropertySetDeprecated($cloudPk, $id, $ifcPk, $projectPk, $patchedPropertySetRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation updateSpaceDeprecated
     *
     * Update some fields of a space
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function updateSpaceDeprecatedAction(Request $request, $cloudPk, $id, $ifcPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $patchedSpaceRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $patchedSpaceRequest = $this->deserialize($patchedSpaceRequest, 'OpenAPI\Server\Model\PatchedSpaceRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\PatchedSpaceRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($patchedSpaceRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->updateSpaceDeprecated($cloudPk, $id, $ifcPk, $projectPk, $patchedSpaceRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation updateStoreyDeprecated
     *
     * Update some fields of a storey
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function updateStoreyDeprecatedAction(Request $request, $cloudPk, $ifcPk, $projectPk, $uuid)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $patchedStoreyBuildingRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $uuid = $this->deserialize($uuid, 'string', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $patchedStoreyBuildingRequest = $this->deserialize($patchedStoreyBuildingRequest, 'OpenAPI\Server\Model\PatchedStoreyBuildingRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($uuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\PatchedStoreyBuildingRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($patchedStoreyBuildingRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->updateStoreyDeprecated($cloudPk, $ifcPk, $projectPk, $uuid, $patchedStoreyBuildingRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation updateStoreyPlanPositioningDeprecated
     *
     * Update the postioning of the plan in the storey
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function updateStoreyPlanPositioningDeprecatedAction(Request $request, $cloudPk, $id, $ifcPk, $projectPk, $storeyUuid)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $patchedPositioningPlanRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $storeyUuid = $this->deserialize($storeyUuid, 'string', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $patchedPositioningPlanRequest = $this->deserialize($patchedPositioningPlanRequest, 'OpenAPI\Server\Model\PatchedPositioningPlanRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($storeyUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\PatchedPositioningPlanRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($patchedPositioningPlanRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->updateStoreyPlanPositioningDeprecated($cloudPk, $id, $ifcPk, $projectPk, $storeyUuid, $patchedPositioningPlanRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation updateSystemDeprecated
     *
     * Update some fields of a system
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function updateSystemDeprecatedAction(Request $request, $cloudPk, $ifcPk, $projectPk, $uuid)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $patchedSystemRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $uuid = $this->deserialize($uuid, 'string', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $patchedSystemRequest = $this->deserialize($patchedSystemRequest, 'OpenAPI\Server\Model\PatchedSystemRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($uuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\PatchedSystemRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($patchedSystemRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->updateSystemDeprecated($cloudPk, $ifcPk, $projectPk, $uuid, $patchedSystemRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation updateZoneDeprecated
     *
     * Update some fields of a zone
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function updateZoneDeprecatedAction(Request $request, $cloudPk, $id, $ifcPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $patchedZoneRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $patchedZoneRequest = $this->deserialize($patchedZoneRequest, 'OpenAPI\Server\Model\PatchedZoneRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\PatchedZoneRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($patchedZoneRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->updateZoneDeprecated($cloudPk, $id, $ifcPk, $projectPk, $patchedZoneRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation updateZoneSpaceDeprecated
     *
     * Update some fields of a space
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function updateZoneSpaceDeprecatedAction(Request $request, $cloudPk, $id, $ifcPk, $projectPk, $zonePk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $patchedZoneSpaceRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $ifcPk = $this->deserialize($ifcPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $zonePk = $this->deserialize($zonePk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $patchedZoneSpaceRequest = $this->deserialize($patchedZoneSpaceRequest, 'OpenAPI\Server\Model\PatchedZoneSpaceRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($ifcPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($zonePk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\PatchedZoneSpaceRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($patchedZoneSpaceRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->updateZoneSpaceDeprecated($cloudPk, $id, $ifcPk, $projectPk, $zonePk, $patchedZoneSpaceRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Returns the handler for this API controller.
     * @return IfcApiInterface
     */
    public function getApiHandler()
    {
        return $this->apiServer->getApiHandler('ifc');
    }
}
