<?php

/**
 * WebhookController
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Controller
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * BIMData API
 *
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1 (v1)
 * Contact: support@bimdata.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Controller;

use \Exception;
use JMS\Serializer\Exception\RuntimeException as SerializerRuntimeException;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel\Exception\HttpException;
use Symfony\Component\Validator\Constraints as Assert;
use OpenAPI\Server\Api\WebhookApiInterface;
use OpenAPI\Server\Model\PatchedWebHookRequest;
use OpenAPI\Server\Model\WebHook;
use OpenAPI\Server\Model\WebHookRequest;

/**
 * WebhookController Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Server\Controller
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */
class WebhookController extends Controller
{

    /**
     * Operation createWebHook
     *
     * Create a new Webhook
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function createWebHookAction(Request $request, $cloudPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $webHookRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $webHookRequest = $this->deserialize($webHookRequest, 'OpenAPI\Server\Model\WebHookRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\WebHookRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($webHookRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->createWebHook($cloudPk, $webHookRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 201:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation deleteWebHook
     *
     * Delete a webhook
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function deleteWebHookAction(Request $request, $cloudPk, $id)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->deleteWebHook($cloudPk, $id, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getWebHook
     *
     * Retrieve one configured webhook
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getWebHookAction(Request $request, $cloudPk, $id)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getWebHook($cloudPk, $id, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getWebHooks
     *
     * Retrieve all configured webhooks
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getWebHooksAction(Request $request, $cloudPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getWebHooks($cloudPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation pingWebHook
     *
     * Test a webhook
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function pingWebHookAction(Request $request, $cloudPk, $id)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $webHookRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $webHookRequest = $this->deserialize($webHookRequest, 'OpenAPI\Server\Model\WebHookRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\WebHookRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($webHookRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->pingWebHook($cloudPk, $id, $webHookRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation updateWebHook
     *
     * Update some field of a webhook
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function updateWebHookAction(Request $request, $cloudPk, $id)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $patchedWebHookRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $patchedWebHookRequest = $this->deserialize($patchedWebHookRequest, 'OpenAPI\Server\Model\PatchedWebHookRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\PatchedWebHookRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($patchedWebHookRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->updateWebHook($cloudPk, $id, $patchedWebHookRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Returns the handler for this API controller.
     * @return WebhookApiInterface
     */
    public function getApiHandler()
    {
        return $this->apiServer->getApiHandler('webhook');
    }
}
