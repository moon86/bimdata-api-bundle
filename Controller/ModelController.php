<?php

/**
 * ModelController
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Controller
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * BIMData API
 *
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1 (v1)
 * Contact: support@bimdata.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Controller;

use \Exception;
use JMS\Serializer\Exception\RuntimeException as SerializerRuntimeException;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel\Exception\HttpException;
use Symfony\Component\Validator\Constraints as Assert;
use OpenAPI\Server\Api\ModelApiInterface;
use OpenAPI\Server\Model\Building;
use OpenAPI\Server\Model\BuildingModelPlanRequest;
use OpenAPI\Server\Model\Classification;
use OpenAPI\Server\Model\ClassificationRequest;
use OpenAPI\Server\Model\CreateBuildingByNameRequest;
use OpenAPI\Server\Model\CreateModelRequest;
use OpenAPI\Server\Model\Document;
use OpenAPI\Server\Model\DocumentWithElementList;
use OpenAPI\Server\Model\Element;
use OpenAPI\Server\Model\ElementClassificationRelation;
use OpenAPI\Server\Model\ElementClassificationRelationRequest;
use OpenAPI\Server\Model\ElementPropertySetRelationRequest;
use OpenAPI\Server\Model\ElementRequest;
use OpenAPI\Server\Model\IfcAccessToken;
use OpenAPI\Server\Model\IfcAccessTokenRequest;
use OpenAPI\Server\Model\IfcExport;
use OpenAPI\Server\Model\IfcExportRequest;
use OpenAPI\Server\Model\IfcMergeRequest;
use OpenAPI\Server\Model\IfcOptimizeRequest;
use OpenAPI\Server\Model\Layer;
use OpenAPI\Server\Model\LayerRequest;
use OpenAPI\Server\Model\Material;
use OpenAPI\Server\Model\Model;
use OpenAPI\Server\Model\ModelErrors;
use OpenAPI\Server\Model\ModelErrorsRequest;
use OpenAPI\Server\Model\ModelFiles;
use OpenAPI\Server\Model\PatchedElementRequest;
use OpenAPI\Server\Model\PatchedIfcAccessTokenRequest;
use OpenAPI\Server\Model\PatchedLayerRequest;
use OpenAPI\Server\Model\PatchedModelRequest;
use OpenAPI\Server\Model\PatchedPositioningPlanRequest;
use OpenAPI\Server\Model\PatchedProcessorHandlerRequest;
use OpenAPI\Server\Model\PatchedPropertyDefinitionRequest;
use OpenAPI\Server\Model\PatchedPropertyRequest;
use OpenAPI\Server\Model\PatchedPropertySetRequest;
use OpenAPI\Server\Model\PatchedSpaceRequest;
use OpenAPI\Server\Model\PatchedStoreyBuildingRequest;
use OpenAPI\Server\Model\PatchedSystemRequest;
use OpenAPI\Server\Model\PatchedUnitRequest;
use OpenAPI\Server\Model\PatchedZoneRequest;
use OpenAPI\Server\Model\PatchedZoneSpaceRequest;
use OpenAPI\Server\Model\PositioningPlan;
use OpenAPI\Server\Model\ProcessorHandler;
use OpenAPI\Server\Model\Property;
use OpenAPI\Server\Model\PropertyDefinition;
use OpenAPI\Server\Model\PropertyDefinitionRequest;
use OpenAPI\Server\Model\PropertyRequest;
use OpenAPI\Server\Model\PropertySet;
use OpenAPI\Server\Model\PropertySetRequest;
use OpenAPI\Server\Model\RawElements;
use OpenAPI\Server\Model\RawElementsRequest;
use OpenAPI\Server\Model\SimpleElement;
use OpenAPI\Server\Model\Space;
use OpenAPI\Server\Model\SpaceRequest;
use OpenAPI\Server\Model\Storey;
use OpenAPI\Server\Model\StoreyBuildingRequest;
use OpenAPI\Server\Model\StoreyModelPlanRequest;
use OpenAPI\Server\Model\System;
use OpenAPI\Server\Model\SystemRequest;
use OpenAPI\Server\Model\Unit;
use OpenAPI\Server\Model\UnitRequest;
use OpenAPI\Server\Model\Zone;
use OpenAPI\Server\Model\ZoneRequest;
use OpenAPI\Server\Model\ZoneSpace;
use OpenAPI\Server\Model\ZoneSpaceRequest;

/**
 * ModelController Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Server\Controller
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */
class ModelController extends Controller
{

    /**
     * Operation addModelErrors
     *
     * Add errors to model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function addModelErrorsAction(Request $request, $cloudPk, $id, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $modelErrorsRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $modelErrorsRequest = $this->deserialize($modelErrorsRequest, 'OpenAPI\Server\Model\ModelErrorsRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\ModelErrorsRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($modelErrorsRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->addModelErrors($cloudPk, $id, $projectPk, $modelErrorsRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation bulkDeleteModelClassifications
     *
     * Remove all classifications from model's elements
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function bulkDeleteModelClassificationsAction(Request $request, $cloudPk, $modelPk, $projectPk)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->bulkDeleteModelClassifications($cloudPk, $modelPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation bulkDeleteModelProperties
     *
     * Delete many Property of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function bulkDeleteModelPropertiesAction(Request $request, $cloudPk, $modelPk, $projectPk)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->bulkDeleteModelProperties($cloudPk, $modelPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation bulkDeleteModelPropertyDefinitions
     *
     * Delete many PropertyDefinitions of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function bulkDeleteModelPropertyDefinitionsAction(Request $request, $cloudPk, $modelPk, $projectPk)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->bulkDeleteModelPropertyDefinitions($cloudPk, $modelPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation bulkDeleteModelUnits
     *
     * Delete many Units of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function bulkDeleteModelUnitsAction(Request $request, $cloudPk, $modelPk, $projectPk)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->bulkDeleteModelUnits($cloudPk, $modelPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation bulkDeletePropertySet
     *
     * Delete many PropertySet of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function bulkDeletePropertySetAction(Request $request, $cloudPk, $modelPk, $projectPk)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->bulkDeletePropertySet($cloudPk, $modelPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation bulkFullUpdateElements
     *
     * Update many elements at once (only changing fields may be defined)
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function bulkFullUpdateElementsAction(Request $request, $cloudPk, $modelPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $classification = $request->query->get('classification');
        $classificationNotation = $request->query->get('classificationNotation');
        $type = $request->query->get('type');
        $elementRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $elementRequest = $this->deserialize($elementRequest, 'array<OpenAPI\Server\Model\ElementRequest>', $inputFormat);
            $classification = $this->deserialize($classification, 'string', 'string');
            $classificationNotation = $this->deserialize($classificationNotation, 'string', 'string');
            $type = $this->deserialize($type, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\All([
            new Assert\Type("OpenAPI\Server\Model\ElementRequest"),
        ]);
        $asserts[] = new Assert\Valid();
        $response = $this->validate($elementRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($classification, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($classificationNotation, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($type, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->bulkFullUpdateElements($cloudPk, $modelPk, $projectPk, $elementRequest, $classification, $classificationNotation, $type, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'If all updates fail: a list of errors';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation bulkFullUpdateModelProperty
     *
     * Update some fields of many properties of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function bulkFullUpdateModelPropertyAction(Request $request, $cloudPk, $modelPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $propertyRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $propertyRequest = $this->deserialize($propertyRequest, 'array<OpenAPI\Server\Model\PropertyRequest>', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\All([
            new Assert\Type("OpenAPI\Server\Model\PropertyRequest"),
        ]);
        $asserts[] = new Assert\Valid();
        $response = $this->validate($propertyRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->bulkFullUpdateModelProperty($cloudPk, $modelPk, $projectPk, $propertyRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'All updates failed: list of errors';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation bulkRemoveClassificationsOfElement
     *
     * Remove many classifications from an element
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function bulkRemoveClassificationsOfElementAction(Request $request, $cloudPk, $elementUuid, $modelPk, $projectPk)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $elementUuid = $this->deserialize($elementUuid, 'string', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($elementUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->bulkRemoveClassificationsOfElement($cloudPk, $elementUuid, $modelPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation bulkRemoveDocumentsOfElement
     *
     * Remove many documents from an element
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function bulkRemoveDocumentsOfElementAction(Request $request, $cloudPk, $elementUuid, $modelPk, $projectPk)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $elementUuid = $this->deserialize($elementUuid, 'string', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($elementUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->bulkRemoveDocumentsOfElement($cloudPk, $elementUuid, $modelPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation bulkRemoveElementsFromClassification
     *
     * Remove the classifications from all elements
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function bulkRemoveElementsFromClassificationAction(Request $request, $cloudPk, $modelClassificationPk, $modelPk, $projectPk)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelClassificationPk = $this->deserialize($modelClassificationPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelClassificationPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->bulkRemoveElementsFromClassification($cloudPk, $modelClassificationPk, $modelPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation bulkUpdateElements
     *
     * Update many elements at once (all field must be defined)
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function bulkUpdateElementsAction(Request $request, $cloudPk, $modelPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $classification = $request->query->get('classification');
        $classificationNotation = $request->query->get('classificationNotation');
        $type = $request->query->get('type');
        $elementRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $elementRequest = $this->deserialize($elementRequest, 'array<OpenAPI\Server\Model\ElementRequest>', $inputFormat);
            $classification = $this->deserialize($classification, 'string', 'string');
            $classificationNotation = $this->deserialize($classificationNotation, 'string', 'string');
            $type = $this->deserialize($type, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\All([
            new Assert\Type("OpenAPI\Server\Model\ElementRequest"),
        ]);
        $asserts[] = new Assert\Valid();
        $response = $this->validate($elementRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($classification, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($classificationNotation, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($type, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->bulkUpdateElements($cloudPk, $modelPk, $projectPk, $elementRequest, $classification, $classificationNotation, $type, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'If all updates fail: a list of errors';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation bulkUpdateModelProperty
     *
     * Update all fields of many properties of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function bulkUpdateModelPropertyAction(Request $request, $cloudPk, $modelPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $propertyRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $propertyRequest = $this->deserialize($propertyRequest, 'array<OpenAPI\Server\Model\PropertyRequest>', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\All([
            new Assert\Type("OpenAPI\Server\Model\PropertyRequest"),
        ]);
        $asserts[] = new Assert\Valid();
        $response = $this->validate($propertyRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->bulkUpdateModelProperty($cloudPk, $modelPk, $projectPk, $propertyRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'All updates failed: list of errors';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation createAccessToken
     *
     * Create a token for this model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function createAccessTokenAction(Request $request, $cloudPk, $modelPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $ifcAccessTokenRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $ifcAccessTokenRequest = $this->deserialize($ifcAccessTokenRequest, 'OpenAPI\Server\Model\IfcAccessTokenRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\IfcAccessTokenRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($ifcAccessTokenRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->createAccessToken($cloudPk, $modelPk, $projectPk, $ifcAccessTokenRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 201:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation createBuilding
     *
     * Create a building of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function createBuildingAction(Request $request, $cloudPk, $modelPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $storeyBuildingRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $storeyBuildingRequest = $this->deserialize($storeyBuildingRequest, 'OpenAPI\Server\Model\StoreyBuildingRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\StoreyBuildingRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($storeyBuildingRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->createBuilding($cloudPk, $modelPk, $projectPk, $storeyBuildingRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 201:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation createBuildingPlan
     *
     * Create a relation between a 2d model and a building
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function createBuildingPlanAction(Request $request, $buildingUuid, $cloudPk, $modelPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $buildingModelPlanRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $buildingUuid = $this->deserialize($buildingUuid, 'string', 'string');
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $buildingModelPlanRequest = $this->deserialize($buildingModelPlanRequest, 'OpenAPI\Server\Model\BuildingModelPlanRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($buildingUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\BuildingModelPlanRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($buildingModelPlanRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->createBuildingPlan($buildingUuid, $cloudPk, $modelPk, $projectPk, $buildingModelPlanRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 201:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation createClassificationElementRelations
     *
     * Create association between existing classification and existing element
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function createClassificationElementRelationsAction(Request $request, $cloudPk, $modelPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $elementClassificationRelationRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $elementClassificationRelationRequest = $this->deserialize($elementClassificationRelationRequest, 'array<OpenAPI\Server\Model\ElementClassificationRelationRequest>', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\All([
            new Assert\Type("OpenAPI\Server\Model\ElementClassificationRelationRequest"),
        ]);
        $asserts[] = new Assert\Valid();
        $response = $this->validate($elementClassificationRelationRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->createClassificationElementRelations($cloudPk, $modelPk, $projectPk, $elementClassificationRelationRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 201:
                    $message = 'No response body';
                    break;
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation createClassificationsOfElement
     *
     * Create one or many classifications to an element
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function createClassificationsOfElementAction(Request $request, $cloudPk, $elementUuid, $modelPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $classificationRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $elementUuid = $this->deserialize($elementUuid, 'string', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $classificationRequest = $this->deserialize($classificationRequest, 'array<OpenAPI\Server\Model\ClassificationRequest>', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($elementUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\All([
            new Assert\Type("OpenAPI\Server\Model\ClassificationRequest"),
        ]);
        $asserts[] = new Assert\Valid();
        $response = $this->validate($classificationRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->createClassificationsOfElement($cloudPk, $elementUuid, $modelPk, $projectPk, $classificationRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'All creates failed: list of errors';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation createElement
     *
     * Create an element in the model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function createElementAction(Request $request, $cloudPk, $modelPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $classification = $request->query->get('classification');
        $classificationNotation = $request->query->get('classificationNotation');
        $type = $request->query->get('type');
        $elementRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $elementRequest = $this->deserialize($elementRequest, 'array<OpenAPI\Server\Model\ElementRequest>', $inputFormat);
            $classification = $this->deserialize($classification, 'string', 'string');
            $classificationNotation = $this->deserialize($classificationNotation, 'string', 'string');
            $type = $this->deserialize($type, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\All([
            new Assert\Type("OpenAPI\Server\Model\ElementRequest"),
        ]);
        $asserts[] = new Assert\Valid();
        $response = $this->validate($elementRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($classification, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($classificationNotation, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($type, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->createElement($cloudPk, $modelPk, $projectPk, $elementRequest, $classification, $classificationNotation, $type, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'If all creates fail: a list of errors';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation createElementPropertySet
     *
     * Create a PropertySets to an element
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function createElementPropertySetAction(Request $request, $cloudPk, $elementUuid, $modelPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $propertySetRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $elementUuid = $this->deserialize($elementUuid, 'string', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $propertySetRequest = $this->deserialize($propertySetRequest, 'OpenAPI\Server\Model\PropertySetRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($elementUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\PropertySetRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($propertySetRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->createElementPropertySet($cloudPk, $elementUuid, $modelPk, $projectPk, $propertySetRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 201:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation createElementPropertySetProperty
     *
     * Create a property to a PropertySet
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function createElementPropertySetPropertyAction(Request $request, $cloudPk, $elementUuid, $modelPk, $projectPk, $propertysetPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $propertyRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $elementUuid = $this->deserialize($elementUuid, 'string', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $propertysetPk = $this->deserialize($propertysetPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $propertyRequest = $this->deserialize($propertyRequest, 'OpenAPI\Server\Model\PropertyRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($elementUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($propertysetPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\PropertyRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($propertyRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->createElementPropertySetProperty($cloudPk, $elementUuid, $modelPk, $projectPk, $propertysetPk, $propertyRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 201:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation createElementPropertySetPropertyDefinition
     *
     * Create a Definition to a Property
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function createElementPropertySetPropertyDefinitionAction(Request $request, $cloudPk, $elementUuid, $modelPk, $projectPk, $propertyPk, $propertysetPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $propertyDefinitionRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $elementUuid = $this->deserialize($elementUuid, 'string', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $propertyPk = $this->deserialize($propertyPk, 'int', 'string');
            $propertysetPk = $this->deserialize($propertysetPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $propertyDefinitionRequest = $this->deserialize($propertyDefinitionRequest, 'OpenAPI\Server\Model\PropertyDefinitionRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($elementUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($propertyPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($propertysetPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\PropertyDefinitionRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($propertyDefinitionRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->createElementPropertySetPropertyDefinition($cloudPk, $elementUuid, $modelPk, $projectPk, $propertyPk, $propertysetPk, $propertyDefinitionRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 201:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation createElementPropertySetPropertyDefinitionUnit
     *
     * Create a Unit to a Definition
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function createElementPropertySetPropertyDefinitionUnitAction(Request $request, $cloudPk, $elementUuid, $modelPk, $projectPk, $propertyPk, $propertydefinitionPk, $propertysetPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $unitRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $elementUuid = $this->deserialize($elementUuid, 'string', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $propertyPk = $this->deserialize($propertyPk, 'int', 'string');
            $propertydefinitionPk = $this->deserialize($propertydefinitionPk, 'int', 'string');
            $propertysetPk = $this->deserialize($propertysetPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $unitRequest = $this->deserialize($unitRequest, 'OpenAPI\Server\Model\UnitRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($elementUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($propertyPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($propertydefinitionPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($propertysetPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\UnitRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($unitRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->createElementPropertySetPropertyDefinitionUnit($cloudPk, $elementUuid, $modelPk, $projectPk, $propertyPk, $propertydefinitionPk, $propertysetPk, $unitRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 201:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation createLayer
     *
     * Create a layer in the model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function createLayerAction(Request $request, $cloudPk, $modelPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $layerRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $layerRequest = $this->deserialize($layerRequest, 'OpenAPI\Server\Model\LayerRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\LayerRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($layerRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->createLayer($cloudPk, $modelPk, $projectPk, $layerRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 201:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation createMetaBuilding
     *
     * Create an empty 3D Model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function createMetaBuildingAction(Request $request, $cloudPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $createBuildingByNameRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $createBuildingByNameRequest = $this->deserialize($createBuildingByNameRequest, 'OpenAPI\Server\Model\CreateBuildingByNameRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\CreateBuildingByNameRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($createBuildingByNameRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->createMetaBuilding($cloudPk, $projectPk, $createBuildingByNameRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 201:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation createModel
     *
     * Make a PDF or Image file a Model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function createModelAction(Request $request, $cloudPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $createModelRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $createModelRequest = $this->deserialize($createModelRequest, 'OpenAPI\Server\Model\CreateModelRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\CreateModelRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($createModelRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->createModel($cloudPk, $projectPk, $createModelRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 201:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation createModelPropertyDefinition
     *
     * Create a PropertyDefinition on the model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function createModelPropertyDefinitionAction(Request $request, $cloudPk, $modelPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $propertyDefinitionRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $propertyDefinitionRequest = $this->deserialize($propertyDefinitionRequest, 'array<OpenAPI\Server\Model\PropertyDefinitionRequest>', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\All([
            new Assert\Type("OpenAPI\Server\Model\PropertyDefinitionRequest"),
        ]);
        $asserts[] = new Assert\Valid();
        $response = $this->validate($propertyDefinitionRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->createModelPropertyDefinition($cloudPk, $modelPk, $projectPk, $propertyDefinitionRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'All creates failed: list of errors';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation createModelUnit
     *
     * Create a Unit on a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function createModelUnitAction(Request $request, $cloudPk, $modelPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $unitRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $unitRequest = $this->deserialize($unitRequest, 'array<OpenAPI\Server\Model\UnitRequest>', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\All([
            new Assert\Type("OpenAPI\Server\Model\UnitRequest"),
        ]);
        $asserts[] = new Assert\Valid();
        $response = $this->validate($unitRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->createModelUnit($cloudPk, $modelPk, $projectPk, $unitRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'All creates failed: list of errors';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation createPropertySet
     *
     * Create one or many PropertySet
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function createPropertySetAction(Request $request, $cloudPk, $modelPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $propertySetRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $propertySetRequest = $this->deserialize($propertySetRequest, 'array<OpenAPI\Server\Model\PropertySetRequest>', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\All([
            new Assert\Type("OpenAPI\Server\Model\PropertySetRequest"),
        ]);
        $asserts[] = new Assert\Valid();
        $response = $this->validate($propertySetRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->createPropertySet($cloudPk, $modelPk, $projectPk, $propertySetRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'All creates failed: list of errors';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation createPropertySetElementRelations
     *
     * Create association between PropertySet and element
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function createPropertySetElementRelationsAction(Request $request, $cloudPk, $modelPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $elementPropertySetRelationRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $elementPropertySetRelationRequest = $this->deserialize($elementPropertySetRelationRequest, 'array<OpenAPI\Server\Model\ElementPropertySetRelationRequest>', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\All([
            new Assert\Type("OpenAPI\Server\Model\ElementPropertySetRelationRequest"),
        ]);
        $asserts[] = new Assert\Valid();
        $response = $this->validate($elementPropertySetRelationRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->createPropertySetElementRelations($cloudPk, $modelPk, $projectPk, $elementPropertySetRelationRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 201:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation createRawElements
     *
     * Create elements in an optimized format
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function createRawElementsAction(Request $request, $cloudPk, $modelPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $rawElementsRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $rawElementsRequest = $this->deserialize($rawElementsRequest, 'OpenAPI\Server\Model\RawElementsRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\RawElementsRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($rawElementsRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->createRawElements($cloudPk, $modelPk, $projectPk, $rawElementsRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 201:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation createSpace
     *
     * Create a space in the model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function createSpaceAction(Request $request, $cloudPk, $modelPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $spaceRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $spaceRequest = $this->deserialize($spaceRequest, 'array<OpenAPI\Server\Model\SpaceRequest>', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\All([
            new Assert\Type("OpenAPI\Server\Model\SpaceRequest"),
        ]);
        $asserts[] = new Assert\Valid();
        $response = $this->validate($spaceRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->createSpace($cloudPk, $modelPk, $projectPk, $spaceRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'All creates failed: list of errors';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation createStorey
     *
     * Create a storey of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function createStoreyAction(Request $request, $cloudPk, $modelPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $storeyBuildingRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $storeyBuildingRequest = $this->deserialize($storeyBuildingRequest, 'OpenAPI\Server\Model\StoreyBuildingRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\StoreyBuildingRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($storeyBuildingRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->createStorey($cloudPk, $modelPk, $projectPk, $storeyBuildingRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 201:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation createStoreyPlan
     *
     * Create a relation between a 2d model and a storey
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function createStoreyPlanAction(Request $request, $cloudPk, $modelPk, $projectPk, $storeyUuid)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $storeyModelPlanRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $storeyUuid = $this->deserialize($storeyUuid, 'string', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $storeyModelPlanRequest = $this->deserialize($storeyModelPlanRequest, 'OpenAPI\Server\Model\StoreyModelPlanRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($storeyUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\StoreyModelPlanRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($storeyModelPlanRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->createStoreyPlan($cloudPk, $modelPk, $projectPk, $storeyUuid, $storeyModelPlanRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 201:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation createSystem
     *
     * Create a system in the model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function createSystemAction(Request $request, $cloudPk, $modelPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $systemRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $systemRequest = $this->deserialize($systemRequest, 'OpenAPI\Server\Model\SystemRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\SystemRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($systemRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->createSystem($cloudPk, $modelPk, $projectPk, $systemRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 201:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation createTileset
     *
     * Create the tileset of the model and upload all files
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function createTilesetAction(Request $request, $cloudPk, $id, $projectPk)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->createTileset($cloudPk, $id, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 201:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation createZone
     *
     * Create a zone in the model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function createZoneAction(Request $request, $cloudPk, $modelPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $color = $request->query->get('color');
        $zoneRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $zoneRequest = $this->deserialize($zoneRequest, 'array<OpenAPI\Server\Model\ZoneRequest>', $inputFormat);
            $color = $this->deserialize($color, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\All([
            new Assert\Type("OpenAPI\Server\Model\ZoneRequest"),
        ]);
        $asserts[] = new Assert\Valid();
        $response = $this->validate($zoneRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($color, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->createZone($cloudPk, $modelPk, $projectPk, $zoneRequest, $color, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'If all creates fail: a list of errors';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation createZoneSpace
     *
     * Create a space in a zone
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function createZoneSpaceAction(Request $request, $cloudPk, $modelPk, $projectPk, $zonePk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $zoneSpaceRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $zonePk = $this->deserialize($zonePk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $zoneSpaceRequest = $this->deserialize($zoneSpaceRequest, 'OpenAPI\Server\Model\ZoneSpaceRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($zonePk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\ZoneSpaceRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($zoneSpaceRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->createZoneSpace($cloudPk, $modelPk, $projectPk, $zonePk, $zoneSpaceRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 201:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation deleteAccessToken
     *
     * Delete a token
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function deleteAccessTokenAction(Request $request, $cloudPk, $modelPk, $projectPk, $token)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $token = $this->deserialize($token, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($token, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->deleteAccessToken($cloudPk, $modelPk, $projectPk, $token, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation deleteBuilding
     *
     * Delete a building of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function deleteBuildingAction(Request $request, $cloudPk, $modelPk, $projectPk, $uuid)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $uuid = $this->deserialize($uuid, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($uuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->deleteBuilding($cloudPk, $modelPk, $projectPk, $uuid, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation deleteBuildingPlan
     *
     * Delete the relation between a 2d model and a building
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function deleteBuildingPlanAction(Request $request, $buildingUuid, $cloudPk, $id, $modelPk, $projectPk)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $buildingUuid = $this->deserialize($buildingUuid, 'string', 'string');
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($buildingUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->deleteBuildingPlan($buildingUuid, $cloudPk, $id, $modelPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation deleteElement
     *
     * Delete an element of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function deleteElementAction(Request $request, $cloudPk, $modelPk, $projectPk, $uuid)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $uuid = $this->deserialize($uuid, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($uuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->deleteElement($cloudPk, $modelPk, $projectPk, $uuid, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation deleteLayer
     *
     * Delete a layer of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function deleteLayerAction(Request $request, $cloudPk, $id, $modelPk, $projectPk)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->deleteLayer($cloudPk, $id, $modelPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation deleteModel
     *
     * Delete a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function deleteModelAction(Request $request, $cloudPk, $id, $projectPk)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->deleteModel($cloudPk, $id, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation deleteModelProperty
     *
     * Delete a Property of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function deleteModelPropertyAction(Request $request, $cloudPk, $id, $modelPk, $projectPk)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->deleteModelProperty($cloudPk, $id, $modelPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation deleteModelPropertyDefinition
     *
     * Delete a PropertyDefinitions of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function deleteModelPropertyDefinitionAction(Request $request, $cloudPk, $id, $modelPk, $projectPk)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->deleteModelPropertyDefinition($cloudPk, $id, $modelPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation deleteModelUnit
     *
     * Delete a Unit of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function deleteModelUnitAction(Request $request, $cloudPk, $id, $modelPk, $projectPk)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->deleteModelUnit($cloudPk, $id, $modelPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation deleteModelWithoutDoc
     *
     * Delete the Model without deleting the related document
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function deleteModelWithoutDocAction(Request $request, $cloudPk, $id, $projectPk)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->deleteModelWithoutDoc($cloudPk, $id, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation deletePropertySet
     *
     * Delete a PropertySet of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function deletePropertySetAction(Request $request, $cloudPk, $id, $modelPk, $projectPk)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->deletePropertySet($cloudPk, $id, $modelPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation deleteSpace
     *
     * Delete a space
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function deleteSpaceAction(Request $request, $cloudPk, $id, $modelPk, $projectPk)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->deleteSpace($cloudPk, $id, $modelPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation deleteStorey
     *
     * Delete a storey of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function deleteStoreyAction(Request $request, $cloudPk, $modelPk, $projectPk, $uuid)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $uuid = $this->deserialize($uuid, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($uuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->deleteStorey($cloudPk, $modelPk, $projectPk, $uuid, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation deleteStoreyPlan
     *
     * Delete the relation between a 2d model and a storey
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function deleteStoreyPlanAction(Request $request, $cloudPk, $id, $modelPk, $projectPk, $storeyUuid)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $storeyUuid = $this->deserialize($storeyUuid, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($storeyUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->deleteStoreyPlan($cloudPk, $id, $modelPk, $projectPk, $storeyUuid, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation deleteSystem
     *
     * Delete a system of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function deleteSystemAction(Request $request, $cloudPk, $modelPk, $projectPk, $uuid)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $uuid = $this->deserialize($uuid, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($uuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->deleteSystem($cloudPk, $modelPk, $projectPk, $uuid, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation deleteZone
     *
     * Delete a zone of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function deleteZoneAction(Request $request, $cloudPk, $id, $modelPk, $projectPk)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->deleteZone($cloudPk, $id, $modelPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation deleteZoneSpace
     *
     * Delete a space of a zone
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function deleteZoneSpaceAction(Request $request, $cloudPk, $id, $modelPk, $projectPk, $zonePk)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $zonePk = $this->deserialize($zonePk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($zonePk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->deleteZoneSpace($cloudPk, $id, $modelPk, $projectPk, $zonePk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation exportIfc
     *
     * Export IFC
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function exportIfcAction(Request $request, $cloudPk, $id, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $ifcExportRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $ifcExportRequest = $this->deserialize($ifcExportRequest, 'OpenAPI\Server\Model\IfcExportRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\IfcExportRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($ifcExportRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->exportIfc($cloudPk, $id, $projectPk, $ifcExportRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation fullUpdateElement
     *
     * Update all fields of an element
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function fullUpdateElementAction(Request $request, $cloudPk, $modelPk, $projectPk, $uuid)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $elementRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $uuid = $this->deserialize($uuid, 'string', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $elementRequest = $this->deserialize($elementRequest, 'OpenAPI\Server\Model\ElementRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($uuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\ElementRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($elementRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->fullUpdateElement($cloudPk, $modelPk, $projectPk, $uuid, $elementRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getAccessToken
     *
     * Retrieve one token created for this model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getAccessTokenAction(Request $request, $cloudPk, $modelPk, $projectPk, $token)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $token = $this->deserialize($token, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($token, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getAccessToken($cloudPk, $modelPk, $projectPk, $token, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getAccessTokens
     *
     * Retrieve all tokens created for this model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getAccessTokensAction(Request $request, $cloudPk, $modelPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getAccessTokens($cloudPk, $modelPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getBuilding
     *
     * Retrieve a building of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getBuildingAction(Request $request, $cloudPk, $modelPk, $projectPk, $uuid)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $uuid = $this->deserialize($uuid, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($uuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getBuilding($cloudPk, $modelPk, $projectPk, $uuid, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getBuildingPlanPositioning
     *
     * Retrieve the postioning of the plan in the building
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getBuildingPlanPositioningAction(Request $request, $buildingUuid, $cloudPk, $id, $modelPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $buildingUuid = $this->deserialize($buildingUuid, 'string', 'string');
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($buildingUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getBuildingPlanPositioning($buildingUuid, $cloudPk, $id, $modelPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getBuildings
     *
     * Retrieve all buildings of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getBuildingsAction(Request $request, $cloudPk, $modelPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getBuildings($cloudPk, $modelPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getClassificationsOfElement
     *
     * Retrieve all classifications of an element
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getClassificationsOfElementAction(Request $request, $cloudPk, $elementUuid, $modelPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $elementUuid = $this->deserialize($elementUuid, 'string', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($elementUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getClassificationsOfElement($cloudPk, $elementUuid, $modelPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getDocumentsOfElement
     *
     * Retrieve all documents of an element
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getDocumentsOfElementAction(Request $request, $cloudPk, $elementUuid, $modelPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $elementUuid = $this->deserialize($elementUuid, 'string', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($elementUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getDocumentsOfElement($cloudPk, $elementUuid, $modelPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getElement
     *
     * Retrieve an element of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getElementAction(Request $request, $cloudPk, $modelPk, $projectPk, $uuid)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $uuid = $this->deserialize($uuid, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($uuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getElement($cloudPk, $modelPk, $projectPk, $uuid, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getElementLinkedDocuments
     *
     * Retrieve all documents linked to any element
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getElementLinkedDocumentsAction(Request $request, $cloudPk, $modelPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $classification = $request->query->get('classification');
        $classificationNotation = $request->query->get('classificationNotation');
        $type = $request->query->get('type');

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $classification = $this->deserialize($classification, 'string', 'string');
            $classificationNotation = $this->deserialize($classificationNotation, 'string', 'string');
            $type = $this->deserialize($type, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($classification, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($classificationNotation, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($type, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getElementLinkedDocuments($cloudPk, $modelPk, $projectPk, $classification, $classificationNotation, $type, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getElementPropertySet
     *
     * Retrieve a PropertySet of an element
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getElementPropertySetAction(Request $request, $cloudPk, $elementUuid, $id, $modelPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $elementUuid = $this->deserialize($elementUuid, 'string', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($elementUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getElementPropertySet($cloudPk, $elementUuid, $id, $modelPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getElementPropertySetProperties
     *
     * Retrieve all Properties of a PropertySet
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getElementPropertySetPropertiesAction(Request $request, $cloudPk, $elementUuid, $modelPk, $projectPk, $propertysetPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $elementUuid = $this->deserialize($elementUuid, 'string', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $propertysetPk = $this->deserialize($propertysetPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($elementUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($propertysetPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getElementPropertySetProperties($cloudPk, $elementUuid, $modelPk, $projectPk, $propertysetPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getElementPropertySetProperty
     *
     * Retrieve a Property of a PropertySet
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getElementPropertySetPropertyAction(Request $request, $cloudPk, $elementUuid, $id, $modelPk, $projectPk, $propertysetPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $elementUuid = $this->deserialize($elementUuid, 'string', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $propertysetPk = $this->deserialize($propertysetPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($elementUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($propertysetPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getElementPropertySetProperty($cloudPk, $elementUuid, $id, $modelPk, $projectPk, $propertysetPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getElementPropertySetPropertyDefinition
     *
     * Retrieve a Definition of a Property
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getElementPropertySetPropertyDefinitionAction(Request $request, $cloudPk, $elementUuid, $id, $modelPk, $projectPk, $propertyPk, $propertysetPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $elementUuid = $this->deserialize($elementUuid, 'string', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $propertyPk = $this->deserialize($propertyPk, 'int', 'string');
            $propertysetPk = $this->deserialize($propertysetPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($elementUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($propertyPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($propertysetPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getElementPropertySetPropertyDefinition($cloudPk, $elementUuid, $id, $modelPk, $projectPk, $propertyPk, $propertysetPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getElementPropertySetPropertyDefinitionUnit
     *
     * Retrieve a Unit of a Definition
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getElementPropertySetPropertyDefinitionUnitAction(Request $request, $cloudPk, $elementUuid, $id, $modelPk, $projectPk, $propertyPk, $propertydefinitionPk, $propertysetPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $elementUuid = $this->deserialize($elementUuid, 'string', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $propertyPk = $this->deserialize($propertyPk, 'int', 'string');
            $propertydefinitionPk = $this->deserialize($propertydefinitionPk, 'int', 'string');
            $propertysetPk = $this->deserialize($propertysetPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($elementUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($propertyPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($propertydefinitionPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($propertysetPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getElementPropertySetPropertyDefinitionUnit($cloudPk, $elementUuid, $id, $modelPk, $projectPk, $propertyPk, $propertydefinitionPk, $propertysetPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getElementPropertySetPropertyDefinitionUnits
     *
     * Retrieve all Units of a Definition
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getElementPropertySetPropertyDefinitionUnitsAction(Request $request, $cloudPk, $elementUuid, $modelPk, $projectPk, $propertyPk, $propertydefinitionPk, $propertysetPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $elementUuid = $this->deserialize($elementUuid, 'string', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $propertyPk = $this->deserialize($propertyPk, 'int', 'string');
            $propertydefinitionPk = $this->deserialize($propertydefinitionPk, 'int', 'string');
            $propertysetPk = $this->deserialize($propertysetPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($elementUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($propertyPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($propertydefinitionPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($propertysetPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getElementPropertySetPropertyDefinitionUnits($cloudPk, $elementUuid, $modelPk, $projectPk, $propertyPk, $propertydefinitionPk, $propertysetPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getElementPropertySetPropertyDefinitions
     *
     * Retrieve all Definitions of a PropertySet
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getElementPropertySetPropertyDefinitionsAction(Request $request, $cloudPk, $elementUuid, $modelPk, $projectPk, $propertyPk, $propertysetPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $elementUuid = $this->deserialize($elementUuid, 'string', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $propertyPk = $this->deserialize($propertyPk, 'int', 'string');
            $propertysetPk = $this->deserialize($propertysetPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($elementUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($propertyPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($propertysetPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getElementPropertySetPropertyDefinitions($cloudPk, $elementUuid, $modelPk, $projectPk, $propertyPk, $propertysetPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getElementPropertySets
     *
     * Retrieve all PropertySets of an element
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getElementPropertySetsAction(Request $request, $cloudPk, $elementUuid, $modelPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $elementUuid = $this->deserialize($elementUuid, 'string', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($elementUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getElementPropertySets($cloudPk, $elementUuid, $modelPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getElements
     *
     * Retrieve all elements of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getElementsAction(Request $request, $cloudPk, $modelPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $classification = $request->query->get('classification');
        $classificationNotation = $request->query->get('classificationNotation');
        $type = $request->query->get('type');

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $classification = $this->deserialize($classification, 'string', 'string');
            $classificationNotation = $this->deserialize($classificationNotation, 'string', 'string');
            $type = $this->deserialize($type, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($classification, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($classificationNotation, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($type, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getElements($cloudPk, $modelPk, $projectPk, $classification, $classificationNotation, $type, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getElementsFromClassification
     *
     * Retrieve all elements with the classification
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getElementsFromClassificationAction(Request $request, $cloudPk, $modelClassificationPk, $modelPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelClassificationPk = $this->deserialize($modelClassificationPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelClassificationPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getElementsFromClassification($cloudPk, $modelClassificationPk, $modelPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getLayer
     *
     * Retrieve a layer of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getLayerAction(Request $request, $cloudPk, $id, $modelPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getLayer($cloudPk, $id, $modelPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getLayers
     *
     * Retrieve all layers of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getLayersAction(Request $request, $cloudPk, $modelPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getLayers($cloudPk, $modelPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getMaterial
     *
     * Retrieve a material of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getMaterialAction(Request $request, $cloudPk, $elementUuid, $id, $modelPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $elementUuid = $this->deserialize($elementUuid, 'string', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($elementUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getMaterial($cloudPk, $elementUuid, $id, $modelPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getMaterials
     *
     * Retrieve all materials of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getMaterialsAction(Request $request, $cloudPk, $elementUuid, $modelPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $elementUuid = $this->deserialize($elementUuid, 'string', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($elementUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getMaterials($cloudPk, $elementUuid, $modelPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getModel
     *
     * Retrieve one model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getModelAction(Request $request, $cloudPk, $id, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getModel($cloudPk, $id, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getModelClassifications
     *
     * Retrieve all classifications in a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getModelClassificationsAction(Request $request, $cloudPk, $modelPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getModelClassifications($cloudPk, $modelPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getModelMaterial
     *
     * Retrieve a material of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getModelMaterialAction(Request $request, $cloudPk, $id, $modelPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getModelMaterial($cloudPk, $id, $modelPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getModelMaterials
     *
     * Retrieve all materials of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getModelMaterialsAction(Request $request, $cloudPk, $modelPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getModelMaterials($cloudPk, $modelPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getModelProperties
     *
     * Retrieve all Properties of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getModelPropertiesAction(Request $request, $cloudPk, $modelPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getModelProperties($cloudPk, $modelPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getModelProperty
     *
     * Retrieve a Property of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getModelPropertyAction(Request $request, $cloudPk, $id, $modelPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getModelProperty($cloudPk, $id, $modelPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getModelPropertyDefinition
     *
     * Retrieve a PropertyDefinition of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getModelPropertyDefinitionAction(Request $request, $cloudPk, $id, $modelPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getModelPropertyDefinition($cloudPk, $id, $modelPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getModelPropertyDefinitions
     *
     * Retrieve all PropertyDefinitions of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getModelPropertyDefinitionsAction(Request $request, $cloudPk, $modelPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getModelPropertyDefinitions($cloudPk, $modelPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getModelUnit
     *
     * Retrieve a Unit of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getModelUnitAction(Request $request, $cloudPk, $id, $modelPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getModelUnit($cloudPk, $id, $modelPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getModelUnits
     *
     * Retrieve all Units of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getModelUnitsAction(Request $request, $cloudPk, $modelPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getModelUnits($cloudPk, $modelPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getModels
     *
     * Retrieve all models
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getModelsAction(Request $request, $cloudPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $source = $request->query->get('source');
        $status = $request->query->get('status');
        $type = $request->query->get('type');

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $source = $this->deserialize($source, 'string', 'string');
            $status = $this->deserialize($status, 'array<multi,string>', 'string');
            $type = $this->deserialize($type, 'array<multi,string>', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Choice([ "EXPORT", "MERGE", "OPTIMIZED", "SPLIT", "UPLOAD" ]);
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($source, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\All([
            new Assert\Choice([ "C", "D", "E", "I", "P", "W", "X" ])
        ]);
        $asserts[] = new Assert\All([
            new Assert\Type("string"),
        ]);
        $asserts[] = new Assert\Valid();
        $response = $this->validate($status, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\All([
            new Assert\Choice([ "BFX", "DAE", "DWG", "DXF", "GLTF", "IFC", "JPEG", "METABUILDING", "OBJ", "PDF", "PNG", "POINT_CLOUD" ])
        ]);
        $asserts[] = new Assert\All([
            new Assert\Type("string"),
        ]);
        $asserts[] = new Assert\Valid();
        $response = $this->validate($type, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getModels($cloudPk, $projectPk, $source, $status, $type, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getProcessorHandler
     *
     * Retrieve a processor handler
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getProcessorHandlerAction(Request $request, $cloudPk, $id, $modelPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getProcessorHandler($cloudPk, $id, $modelPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getProcessorHandlers
     *
     * Get all processor handlers
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getProcessorHandlersAction(Request $request, $cloudPk, $modelPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getProcessorHandlers($cloudPk, $modelPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getPropertySet
     *
     * Retrieve a PropertySet of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getPropertySetAction(Request $request, $cloudPk, $id, $modelPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getPropertySet($cloudPk, $id, $modelPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getPropertySets
     *
     * Retrieve all PropertySets of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getPropertySetsAction(Request $request, $cloudPk, $modelPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getPropertySets($cloudPk, $modelPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getRawElements
     *
     * Retrieve all elements in a optimized format
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getRawElementsAction(Request $request, $cloudPk, $modelPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getRawElements($cloudPk, $modelPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getSimpleElement
     *
     * Retrieve an element of a model with a simple value representation
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getSimpleElementAction(Request $request, $cloudPk, $modelPk, $projectPk, $uuid)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $uuid = $this->deserialize($uuid, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($uuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getSimpleElement($cloudPk, $modelPk, $projectPk, $uuid, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getSimpleElements
     *
     * Retrieve all elements of a model with a simple value representation
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getSimpleElementsAction(Request $request, $cloudPk, $modelPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getSimpleElements($cloudPk, $modelPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getSpace
     *
     * Retrieve one space of the model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getSpaceAction(Request $request, $cloudPk, $id, $modelPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getSpace($cloudPk, $id, $modelPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getSpaces
     *
     * Retrieve all spaces of the model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getSpacesAction(Request $request, $cloudPk, $modelPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getSpaces($cloudPk, $modelPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getStorey
     *
     * Retrieve a storey of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getStoreyAction(Request $request, $cloudPk, $modelPk, $projectPk, $uuid)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $uuid = $this->deserialize($uuid, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($uuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getStorey($cloudPk, $modelPk, $projectPk, $uuid, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getStoreyPlanPositioning
     *
     * Retrieve the postioning of the plan in the storey
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getStoreyPlanPositioningAction(Request $request, $cloudPk, $id, $modelPk, $projectPk, $storeyUuid)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $storeyUuid = $this->deserialize($storeyUuid, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($storeyUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getStoreyPlanPositioning($cloudPk, $id, $modelPk, $projectPk, $storeyUuid, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getStoreys
     *
     * Retrieve all storeys of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getStoreysAction(Request $request, $cloudPk, $modelPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getStoreys($cloudPk, $modelPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getSystem
     *
     * Retrieve a system of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getSystemAction(Request $request, $cloudPk, $modelPk, $projectPk, $uuid)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $uuid = $this->deserialize($uuid, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($uuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getSystem($cloudPk, $modelPk, $projectPk, $uuid, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getSystems
     *
     * Retrieve all systems of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getSystemsAction(Request $request, $cloudPk, $modelPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getSystems($cloudPk, $modelPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getTileset
     *
     * Retrieve the tileset of the model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getTilesetAction(Request $request, $cloudPk, $id, $projectPk)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $tileFormat = $request->query->get('tileFormat', 'pnts');

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $tileFormat = $this->deserialize($tileFormat, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Choice([ "pnts", "xkt" ]);
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($tileFormat, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->getTileset($cloudPk, $id, $projectPk, $tileFormat, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = 'No response body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getZone
     *
     * Retrieve one zone of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getZoneAction(Request $request, $cloudPk, $id, $modelPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getZone($cloudPk, $id, $modelPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getZoneSpace
     *
     * Retrieve one space of a zone
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getZoneSpaceAction(Request $request, $cloudPk, $id, $modelPk, $projectPk, $zonePk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $zonePk = $this->deserialize($zonePk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($zonePk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getZoneSpace($cloudPk, $id, $modelPk, $projectPk, $zonePk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getZoneSpaces
     *
     * Retrieve all spaces of a zone
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getZoneSpacesAction(Request $request, $cloudPk, $modelPk, $projectPk, $zonePk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $zonePk = $this->deserialize($zonePk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($zonePk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getZoneSpaces($cloudPk, $modelPk, $projectPk, $zonePk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getZones
     *
     * Retrieve zones of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getZonesAction(Request $request, $cloudPk, $modelPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $color = $request->query->get('color');

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $color = $this->deserialize($color, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($color, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getZones($cloudPk, $modelPk, $projectPk, $color, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation linkDocumentsOfElement
     *
     * Link one or many documents to an element
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function linkDocumentsOfElementAction(Request $request, $cloudPk, $elementUuid, $modelPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $requestBody = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $elementUuid = $this->deserialize($elementUuid, 'string', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $requestBody = $this->deserialize($requestBody, 'array<int>', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($elementUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\All([
            new Assert\Type("int"),
        ]);
        $asserts[] = new Assert\Valid();
        $response = $this->validate($requestBody, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->linkDocumentsOfElement($cloudPk, $elementUuid, $modelPk, $projectPk, $requestBody, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'All creates failed: list of errors';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation listClassificationElementRelations
     *
     * List all associations between classifications and elements
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function listClassificationElementRelationsAction(Request $request, $cloudPk, $modelPk, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->listClassificationElementRelations($cloudPk, $modelPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation mergeIfcs
     *
     * Merge IFC files
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function mergeIfcsAction(Request $request, $cloudPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $ifcMergeRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $ifcMergeRequest = $this->deserialize($ifcMergeRequest, 'OpenAPI\Server\Model\IfcMergeRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\IfcMergeRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($ifcMergeRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->mergeIfcs($cloudPk, $projectPk, $ifcMergeRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation optimizeIfc
     *
     * Optimize the IFC
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function optimizeIfcAction(Request $request, $cloudPk, $id, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $ifcOptimizeRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $ifcOptimizeRequest = $this->deserialize($ifcOptimizeRequest, 'OpenAPI\Server\Model\IfcOptimizeRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\IfcOptimizeRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($ifcOptimizeRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->optimizeIfc($cloudPk, $id, $projectPk, $ifcOptimizeRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation removeAllElementPropertySet
     *
     * Remove all property sets from element
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function removeAllElementPropertySetAction(Request $request, $cloudPk, $elementUuid, $modelPk, $projectPk)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $elementUuid = $this->deserialize($elementUuid, 'string', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($elementUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->removeAllElementPropertySet($cloudPk, $elementUuid, $modelPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation removeClassificationOfElement
     *
     * Remove a classification from an element
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function removeClassificationOfElementAction(Request $request, $cloudPk, $elementUuid, $id, $modelPk, $projectPk)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $elementUuid = $this->deserialize($elementUuid, 'string', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($elementUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->removeClassificationOfElement($cloudPk, $elementUuid, $id, $modelPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation removeDocumentOfElement
     *
     * Remove a documents from an element
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function removeDocumentOfElementAction(Request $request, $cloudPk, $elementUuid, $id, $modelPk, $projectPk)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $elementUuid = $this->deserialize($elementUuid, 'string', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($elementUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->removeDocumentOfElement($cloudPk, $elementUuid, $id, $modelPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation removeElementPropertySet
     *
     * Remove a PropertySet from an element
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function removeElementPropertySetAction(Request $request, $cloudPk, $elementUuid, $id, $modelPk, $projectPk)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $elementUuid = $this->deserialize($elementUuid, 'string', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($elementUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->removeElementPropertySet($cloudPk, $elementUuid, $id, $modelPk, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation removeElementPropertySetProperty
     *
     * Remove a property from a PropertySet
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function removeElementPropertySetPropertyAction(Request $request, $cloudPk, $elementUuid, $id, $modelPk, $projectPk, $propertysetPk)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $elementUuid = $this->deserialize($elementUuid, 'string', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $propertysetPk = $this->deserialize($propertysetPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($elementUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($propertysetPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->removeElementPropertySetProperty($cloudPk, $elementUuid, $id, $modelPk, $projectPk, $propertysetPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation removeElementPropertySetPropertyDefinition
     *
     * Delete a Definition to a Property
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function removeElementPropertySetPropertyDefinitionAction(Request $request, $cloudPk, $elementUuid, $id, $modelPk, $projectPk, $propertyPk, $propertysetPk)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $elementUuid = $this->deserialize($elementUuid, 'string', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $propertyPk = $this->deserialize($propertyPk, 'int', 'string');
            $propertysetPk = $this->deserialize($propertysetPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($elementUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($propertyPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($propertysetPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->removeElementPropertySetPropertyDefinition($cloudPk, $elementUuid, $id, $modelPk, $projectPk, $propertyPk, $propertysetPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation removeElementPropertySetPropertyDefinitionUnit
     *
     * Remove a Unit from a Definition
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function removeElementPropertySetPropertyDefinitionUnitAction(Request $request, $cloudPk, $elementUuid, $id, $modelPk, $projectPk, $propertyPk, $propertydefinitionPk, $propertysetPk)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $elementUuid = $this->deserialize($elementUuid, 'string', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $propertyPk = $this->deserialize($propertyPk, 'int', 'string');
            $propertydefinitionPk = $this->deserialize($propertydefinitionPk, 'int', 'string');
            $propertysetPk = $this->deserialize($propertysetPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($elementUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($propertyPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($propertydefinitionPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($propertysetPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->removeElementPropertySetPropertyDefinitionUnit($cloudPk, $elementUuid, $id, $modelPk, $projectPk, $propertyPk, $propertydefinitionPk, $propertysetPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation removeElementsFromClassification
     *
     * Remove the classification from all elements
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function removeElementsFromClassificationAction(Request $request, $cloudPk, $modelClassificationPk, $modelPk, $projectPk, $uuid)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelClassificationPk = $this->deserialize($modelClassificationPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $uuid = $this->deserialize($uuid, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelClassificationPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($uuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->removeElementsFromClassification($cloudPk, $modelClassificationPk, $modelPk, $projectPk, $uuid, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation reprocessModel
     *
     * Reprocess Model file
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function reprocessModelAction(Request $request, $cloudPk, $id, $projectPk)
    {
        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->reprocessModel($cloudPk, $id, $projectPk, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No response body';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation updateAccessToken
     *
     * Update some fields of a token
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function updateAccessTokenAction(Request $request, $cloudPk, $modelPk, $projectPk, $token)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $patchedIfcAccessTokenRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $token = $this->deserialize($token, 'string', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $patchedIfcAccessTokenRequest = $this->deserialize($patchedIfcAccessTokenRequest, 'OpenAPI\Server\Model\PatchedIfcAccessTokenRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($token, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\PatchedIfcAccessTokenRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($patchedIfcAccessTokenRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->updateAccessToken($cloudPk, $modelPk, $projectPk, $token, $patchedIfcAccessTokenRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation updateBuilding
     *
     * Update some fields of a building
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function updateBuildingAction(Request $request, $cloudPk, $modelPk, $projectPk, $uuid)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $patchedStoreyBuildingRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $uuid = $this->deserialize($uuid, 'string', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $patchedStoreyBuildingRequest = $this->deserialize($patchedStoreyBuildingRequest, 'OpenAPI\Server\Model\PatchedStoreyBuildingRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($uuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\PatchedStoreyBuildingRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($patchedStoreyBuildingRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->updateBuilding($cloudPk, $modelPk, $projectPk, $uuid, $patchedStoreyBuildingRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation updateBuildingPlanPositioning
     *
     * Update the postioning of the plan in the building
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function updateBuildingPlanPositioningAction(Request $request, $buildingUuid, $cloudPk, $id, $modelPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $patchedPositioningPlanRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $buildingUuid = $this->deserialize($buildingUuid, 'string', 'string');
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $patchedPositioningPlanRequest = $this->deserialize($patchedPositioningPlanRequest, 'OpenAPI\Server\Model\PatchedPositioningPlanRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($buildingUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\PatchedPositioningPlanRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($patchedPositioningPlanRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->updateBuildingPlanPositioning($buildingUuid, $cloudPk, $id, $modelPk, $projectPk, $patchedPositioningPlanRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation updateElement
     *
     * Update some fields of an element
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function updateElementAction(Request $request, $cloudPk, $modelPk, $projectPk, $uuid)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $patchedElementRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $uuid = $this->deserialize($uuid, 'string', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $patchedElementRequest = $this->deserialize($patchedElementRequest, 'OpenAPI\Server\Model\PatchedElementRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($uuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\PatchedElementRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($patchedElementRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->updateElement($cloudPk, $modelPk, $projectPk, $uuid, $patchedElementRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation updateElementPropertySetProperty
     *
     * Update a property from an element
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function updateElementPropertySetPropertyAction(Request $request, $cloudPk, $elementUuid, $id, $modelPk, $projectPk, $propertysetPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $patchedPropertyRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $elementUuid = $this->deserialize($elementUuid, 'string', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $propertysetPk = $this->deserialize($propertysetPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $patchedPropertyRequest = $this->deserialize($patchedPropertyRequest, 'OpenAPI\Server\Model\PatchedPropertyRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($elementUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($propertysetPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\PatchedPropertyRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($patchedPropertyRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->updateElementPropertySetProperty($cloudPk, $elementUuid, $id, $modelPk, $projectPk, $propertysetPk, $patchedPropertyRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation updateLayer
     *
     * Update some fields of a layer
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function updateLayerAction(Request $request, $cloudPk, $id, $modelPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $patchedLayerRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $patchedLayerRequest = $this->deserialize($patchedLayerRequest, 'OpenAPI\Server\Model\PatchedLayerRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\PatchedLayerRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($patchedLayerRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->updateLayer($cloudPk, $id, $modelPk, $projectPk, $patchedLayerRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation updateModel
     *
     * Update some fields of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function updateModelAction(Request $request, $cloudPk, $id, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $patchedModelRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $patchedModelRequest = $this->deserialize($patchedModelRequest, 'OpenAPI\Server\Model\PatchedModelRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\PatchedModelRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($patchedModelRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->updateModel($cloudPk, $id, $projectPk, $patchedModelRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation updateModelFiles
     *
     * Update models file (gltf, svg, structure, etc)
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function updateModelFilesAction(Request $request, $cloudPk, $id, $projectPk)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $structureFile = $request->files->get('structureFile');
        $systemsFile = $request->files->get('systemsFile');
        $mapFile = $request->files->get('mapFile');
        $gltfFile = $request->files->get('gltfFile');
        $gltfWithOpeningsFile = $request->files->get('gltfWithOpeningsFile');
        $bvhTreeFile = $request->files->get('bvhTreeFile');
        $previewFile = $request->files->get('previewFile');
        $xktFile = $request->files->get('xktFile');

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\File();
        $response = $this->validate($structureFile, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\File();
        $response = $this->validate($systemsFile, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\File();
        $response = $this->validate($mapFile, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\File();
        $response = $this->validate($gltfFile, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\File();
        $response = $this->validate($gltfWithOpeningsFile, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\File();
        $response = $this->validate($bvhTreeFile, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\File();
        $response = $this->validate($previewFile, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\File();
        $response = $this->validate($xktFile, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->updateModelFiles($cloudPk, $id, $projectPk, $structureFile, $systemsFile, $mapFile, $gltfFile, $gltfWithOpeningsFile, $bvhTreeFile, $previewFile, $xktFile, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation updateModelProperty
     *
     * Update some fields of a Property
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function updateModelPropertyAction(Request $request, $cloudPk, $id, $modelPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $patchedPropertyRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $patchedPropertyRequest = $this->deserialize($patchedPropertyRequest, 'OpenAPI\Server\Model\PatchedPropertyRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\PatchedPropertyRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($patchedPropertyRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->updateModelProperty($cloudPk, $id, $modelPk, $projectPk, $patchedPropertyRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation updateModelPropertyDefinition
     *
     * Update some fields of many PropertyDefinitions of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function updateModelPropertyDefinitionAction(Request $request, $cloudPk, $id, $modelPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $patchedPropertyDefinitionRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $patchedPropertyDefinitionRequest = $this->deserialize($patchedPropertyDefinitionRequest, 'OpenAPI\Server\Model\PatchedPropertyDefinitionRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\PatchedPropertyDefinitionRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($patchedPropertyDefinitionRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->updateModelPropertyDefinition($cloudPk, $id, $modelPk, $projectPk, $patchedPropertyDefinitionRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation updateModelUnit
     *
     * Update some fields of a Unit of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function updateModelUnitAction(Request $request, $cloudPk, $id, $modelPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $patchedUnitRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $patchedUnitRequest = $this->deserialize($patchedUnitRequest, 'OpenAPI\Server\Model\PatchedUnitRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\PatchedUnitRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($patchedUnitRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->updateModelUnit($cloudPk, $id, $modelPk, $projectPk, $patchedUnitRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation updateOrderBuildingPlan
     *
     * Update order of all plan of a building
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function updateOrderBuildingPlanAction(Request $request, $buildingUuid, $cloudPk, $modelPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $requestBody = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $buildingUuid = $this->deserialize($buildingUuid, 'string', 'string');
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $requestBody = $this->deserialize($requestBody, 'array<int>', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($buildingUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\All([
            new Assert\Type("int"),
        ]);
        $asserts[] = new Assert\Valid();
        $response = $this->validate($requestBody, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->updateOrderBuildingPlan($buildingUuid, $cloudPk, $modelPk, $projectPk, $requestBody, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation updateOrderStoreyPlan
     *
     * Update order of all plan of a storey
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function updateOrderStoreyPlanAction(Request $request, $cloudPk, $modelPk, $projectPk, $storeyUuid)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $requestBody = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $storeyUuid = $this->deserialize($storeyUuid, 'string', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $requestBody = $this->deserialize($requestBody, 'array<int>', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($storeyUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\All([
            new Assert\Type("int"),
        ]);
        $asserts[] = new Assert\Valid();
        $response = $this->validate($requestBody, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->updateOrderStoreyPlan($cloudPk, $modelPk, $projectPk, $storeyUuid, $requestBody, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation updateOrderStoreys
     *
     * Update order of all storey of a model
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function updateOrderStoreysAction(Request $request, $cloudPk, $modelPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $requestBody = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $requestBody = $this->deserialize($requestBody, 'array<string>', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\All([
            new Assert\Type("string"),
        ]);
        $asserts[] = new Assert\Valid();
        $response = $this->validate($requestBody, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->updateOrderStoreys($cloudPk, $modelPk, $projectPk, $requestBody, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation updateProcessorHandler
     *
     * Update the status of a processor handler
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function updateProcessorHandlerAction(Request $request, $cloudPk, $id, $modelPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $patchedProcessorHandlerRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $patchedProcessorHandlerRequest = $this->deserialize($patchedProcessorHandlerRequest, 'OpenAPI\Server\Model\PatchedProcessorHandlerRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\PatchedProcessorHandlerRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($patchedProcessorHandlerRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->updateProcessorHandler($cloudPk, $id, $modelPk, $projectPk, $patchedProcessorHandlerRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation updatePropertySet
     *
     * Update some fields of a PropertySet
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function updatePropertySetAction(Request $request, $cloudPk, $id, $modelPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $patchedPropertySetRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $patchedPropertySetRequest = $this->deserialize($patchedPropertySetRequest, 'OpenAPI\Server\Model\PatchedPropertySetRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\PatchedPropertySetRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($patchedPropertySetRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->updatePropertySet($cloudPk, $id, $modelPk, $projectPk, $patchedPropertySetRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation updateSpace
     *
     * Update some fields of a space
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function updateSpaceAction(Request $request, $cloudPk, $id, $modelPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $patchedSpaceRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $patchedSpaceRequest = $this->deserialize($patchedSpaceRequest, 'OpenAPI\Server\Model\PatchedSpaceRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\PatchedSpaceRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($patchedSpaceRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->updateSpace($cloudPk, $id, $modelPk, $projectPk, $patchedSpaceRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation updateStorey
     *
     * Update some fields of a storey
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function updateStoreyAction(Request $request, $cloudPk, $modelPk, $projectPk, $uuid)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $patchedStoreyBuildingRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $uuid = $this->deserialize($uuid, 'string', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $patchedStoreyBuildingRequest = $this->deserialize($patchedStoreyBuildingRequest, 'OpenAPI\Server\Model\PatchedStoreyBuildingRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($uuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\PatchedStoreyBuildingRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($patchedStoreyBuildingRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->updateStorey($cloudPk, $modelPk, $projectPk, $uuid, $patchedStoreyBuildingRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation updateStoreyPlanPositioning
     *
     * Update the postioning of the plan in the storey
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function updateStoreyPlanPositioningAction(Request $request, $cloudPk, $id, $modelPk, $projectPk, $storeyUuid)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $patchedPositioningPlanRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $storeyUuid = $this->deserialize($storeyUuid, 'string', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $patchedPositioningPlanRequest = $this->deserialize($patchedPositioningPlanRequest, 'OpenAPI\Server\Model\PatchedPositioningPlanRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($storeyUuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\PatchedPositioningPlanRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($patchedPositioningPlanRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->updateStoreyPlanPositioning($cloudPk, $id, $modelPk, $projectPk, $storeyUuid, $patchedPositioningPlanRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation updateSystem
     *
     * Update some fields of a system
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function updateSystemAction(Request $request, $cloudPk, $modelPk, $projectPk, $uuid)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $patchedSystemRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $uuid = $this->deserialize($uuid, 'string', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $patchedSystemRequest = $this->deserialize($patchedSystemRequest, 'OpenAPI\Server\Model\PatchedSystemRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($uuid, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\PatchedSystemRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($patchedSystemRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->updateSystem($cloudPk, $modelPk, $projectPk, $uuid, $patchedSystemRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation updateZone
     *
     * Update some fields of a zone
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function updateZoneAction(Request $request, $cloudPk, $id, $modelPk, $projectPk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $patchedZoneRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $patchedZoneRequest = $this->deserialize($patchedZoneRequest, 'OpenAPI\Server\Model\PatchedZoneRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\PatchedZoneRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($patchedZoneRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->updateZone($cloudPk, $id, $modelPk, $projectPk, $patchedZoneRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation updateZoneSpace
     *
     * Update some fields of a space
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function updateZoneSpaceAction(Request $request, $cloudPk, $id, $modelPk, $projectPk, $zonePk)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'ApiKey' required
        // Set key with prefix in header
        $securityApiKey = $request->headers->get('Authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'BIMData_Connect' required
        // Oauth required
        $securityBIMData_Connect = $request->headers->get('authorization');
        // Authentication 'Bearer' required
        // Set key with prefix in header
        $securityBearer = $request->headers->get('Authorization');

        // Read out all input parameter values into variables
        $patchedZoneSpaceRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $cloudPk = $this->deserialize($cloudPk, 'int', 'string');
            $id = $this->deserialize($id, 'int', 'string');
            $modelPk = $this->deserialize($modelPk, 'int', 'string');
            $projectPk = $this->deserialize($projectPk, 'int', 'string');
            $zonePk = $this->deserialize($zonePk, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $patchedZoneSpaceRequest = $this->deserialize($patchedZoneSpaceRequest, 'OpenAPI\Server\Model\PatchedZoneSpaceRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($cloudPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($modelPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($projectPk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($zonePk, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\PatchedZoneSpaceRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($patchedZoneSpaceRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'ApiKey'
            $handler->setApiKey($securityApiKey);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'BIMData_Connect'
            $handler->setBIMData_Connect($securityBIMData_Connect);
            // Set authentication method 'Bearer'
            $handler->setBearer($securityBearer);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->updateZoneSpace($cloudPk, $id, $modelPk, $projectPk, $zonePk, $patchedZoneSpaceRequest, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = '';
                    break;
                case 400:
                    $message = 'A required field is missing in the body';
                    break;
                case 401:
                    $message = 'The authentication failed. Your token may be expired, missing or malformed';
                    break;
                case 403:
                    $message = 'You don&#39;t have the authorization to access this resource. Check if the resource is exclusive to users or app (eg: /user is exclusive to users) or if your user has the right to access this resource.';
                    break;
                case 404:
                    $message = 'The resource does not exist or you don&#39;t have the right to see if the resource exists';
                    break;
                case 500:
                    $message = 'Something really bad happened. Check if your route is correct. By example: /cloud/[object Object]/project may raise a 500. An alert is automatically sent to us, we&#39;ll look at it shortly.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Returns the handler for this API controller.
     * @return ModelApiInterface
     */
    public function getApiHandler()
    {
        return $this->apiServer->getApiHandler('model');
    }
}
