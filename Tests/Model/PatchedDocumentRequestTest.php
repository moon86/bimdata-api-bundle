<?php
/**
 * PatchedDocumentRequestTest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Model
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * BIMData API
 *
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1 (v1)
 * Contact: support@bimdata.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Server\Model;

use PHPUnit\Framework\MockObject\MockObject;
use PHPUnit\Framework\TestCase;

/**
 * PatchedDocumentRequestTest Class Doc Comment
 *
 * @category    Class
 * @description PatchedDocumentRequest
 * @package     OpenAPI\Server\Tests\Model
 * @author      openapi-generator contributors
 * @link        https://github.com/openapitools/openapi-generator
 * @coversDefaultClass \OpenAPI\Server\Model\PatchedDocumentRequest
 */
class PatchedDocumentRequestTest extends TestCase
{
    protected PatchedDocumentRequest|MockObject $object;

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
         $this->object = $this->getMockBuilder(PatchedDocumentRequest::class)->getMockForAbstractClass();
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * @group integration
     * @small
     */
    public function testTestClassExists(): void
    {
        $this->assertTrue(class_exists(PatchedDocumentRequest::class));
        $this->assertInstanceOf(PatchedDocumentRequest::class, $this->object);
    }

    /**
     * Test attribute "parentId"
     *
     * @group unit
     * @small
     */
    public function testPropertyParentId(): void
    {
        $this->markTestSkipped('Test for property parentId not implemented');
    }

    /**
     * Test attribute "name"
     *
     * @group unit
     * @small
     */
    public function testPropertyName(): void
    {
        $this->markTestSkipped('Test for property name not implemented');
    }

    /**
     * Test attribute "fileName"
     *
     * @group unit
     * @small
     */
    public function testPropertyFileName(): void
    {
        $this->markTestSkipped('Test for property fileName not implemented');
    }

    /**
     * Test attribute "description"
     *
     * @group unit
     * @small
     */
    public function testPropertyDescription(): void
    {
        $this->markTestSkipped('Test for property description not implemented');
    }

    /**
     * Test attribute "file"
     *
     * @group unit
     * @small
     */
    public function testPropertyFile(): void
    {
        $this->markTestSkipped('Test for property file not implemented');
    }

    /**
     * Test attribute "size"
     *
     * @group unit
     * @small
     */
    public function testPropertySize(): void
    {
        $this->markTestSkipped('Test for property size not implemented');
    }

    /**
     * Test attribute "modelSource"
     *
     * @group unit
     * @small
     */
    public function testPropertyModelSource(): void
    {
        $this->markTestSkipped('Test for property modelSource not implemented');
    }

    /**
     * Test attribute "ifcSource"
     *
     * @group unit
     * @small
     */
    public function testPropertyIfcSource(): void
    {
        $this->markTestSkipped('Test for property ifcSource not implemented');
    }

    /**
     * Test attribute "successorOf"
     *
     * @group unit
     * @small
     */
    public function testPropertySuccessorOf(): void
    {
        $this->markTestSkipped('Test for property successorOf not implemented');
    }
}
