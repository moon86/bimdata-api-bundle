<?php
/**
 * TopicRequestTest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Model
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * BIMData API
 *
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1 (v1)
 * Contact: support@bimdata.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Server\Model;

use PHPUnit\Framework\MockObject\MockObject;
use PHPUnit\Framework\TestCase;

/**
 * TopicRequestTest Class Doc Comment
 *
 * @category    Class
 * @description TopicRequest
 * @package     OpenAPI\Server\Tests\Model
 * @author      openapi-generator contributors
 * @link        https://github.com/openapitools/openapi-generator
 * @coversDefaultClass \OpenAPI\Server\Model\TopicRequest
 */
class TopicRequestTest extends TestCase
{
    protected TopicRequest|MockObject $object;

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
         $this->object = $this->getMockBuilder(TopicRequest::class)->getMockForAbstractClass();
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * @group integration
     * @small
     */
    public function testTestClassExists(): void
    {
        $this->assertTrue(class_exists(TopicRequest::class));
        $this->assertInstanceOf(TopicRequest::class, $this->object);
    }

    /**
     * Test attribute "guid"
     *
     * @group unit
     * @small
     */
    public function testPropertyGuid(): void
    {
        $this->markTestSkipped('Test for property guid not implemented');
    }

    /**
     * Test attribute "topicType"
     *
     * @group unit
     * @small
     */
    public function testPropertyTopicType(): void
    {
        $this->markTestSkipped('Test for property topicType not implemented');
    }

    /**
     * Test attribute "topicStatus"
     *
     * @group unit
     * @small
     */
    public function testPropertyTopicStatus(): void
    {
        $this->markTestSkipped('Test for property topicStatus not implemented');
    }

    /**
     * Test attribute "title"
     *
     * @group unit
     * @small
     */
    public function testPropertyTitle(): void
    {
        $this->markTestSkipped('Test for property title not implemented');
    }

    /**
     * Test attribute "priority"
     *
     * @group unit
     * @small
     */
    public function testPropertyPriority(): void
    {
        $this->markTestSkipped('Test for property priority not implemented');
    }

    /**
     * Test attribute "labels"
     *
     * @group unit
     * @small
     */
    public function testPropertyLabels(): void
    {
        $this->markTestSkipped('Test for property labels not implemented');
    }

    /**
     * Test attribute "creationDate"
     *
     * @group unit
     * @small
     */
    public function testPropertyCreationDate(): void
    {
        $this->markTestSkipped('Test for property creationDate not implemented');
    }

    /**
     * Test attribute "creationAuthor"
     *
     * @group unit
     * @small
     */
    public function testPropertyCreationAuthor(): void
    {
        $this->markTestSkipped('Test for property creationAuthor not implemented');
    }

    /**
     * Test attribute "modifiedAuthor"
     *
     * @group unit
     * @small
     */
    public function testPropertyModifiedAuthor(): void
    {
        $this->markTestSkipped('Test for property modifiedAuthor not implemented');
    }

    /**
     * Test attribute "assignedTo"
     *
     * @group unit
     * @small
     */
    public function testPropertyAssignedTo(): void
    {
        $this->markTestSkipped('Test for property assignedTo not implemented');
    }

    /**
     * Test attribute "referenceLinks"
     *
     * @group unit
     * @small
     */
    public function testPropertyReferenceLinks(): void
    {
        $this->markTestSkipped('Test for property referenceLinks not implemented');
    }

    /**
     * Test attribute "stage"
     *
     * @group unit
     * @small
     */
    public function testPropertyStage(): void
    {
        $this->markTestSkipped('Test for property stage not implemented');
    }

    /**
     * Test attribute "description"
     *
     * @group unit
     * @small
     */
    public function testPropertyDescription(): void
    {
        $this->markTestSkipped('Test for property description not implemented');
    }

    /**
     * Test attribute "dueDate"
     *
     * @group unit
     * @small
     */
    public function testPropertyDueDate(): void
    {
        $this->markTestSkipped('Test for property dueDate not implemented');
    }

    /**
     * Test attribute "ifcs"
     *
     * @group unit
     * @small
     */
    public function testPropertyIfcs(): void
    {
        $this->markTestSkipped('Test for property ifcs not implemented');
    }

    /**
     * Test attribute "models"
     *
     * @group unit
     * @small
     */
    public function testPropertyModels(): void
    {
        $this->markTestSkipped('Test for property models not implemented');
    }

    /**
     * Test attribute "format"
     *
     * @group unit
     * @small
     */
    public function testPropertyFormat(): void
    {
        $this->markTestSkipped('Test for property format not implemented');
    }

    /**
     * Test attribute "index"
     *
     * @group unit
     * @small
     */
    public function testPropertyIndex(): void
    {
        $this->markTestSkipped('Test for property index not implemented');
    }

    /**
     * Test attribute "project"
     *
     * @group unit
     * @small
     */
    public function testPropertyProject(): void
    {
        $this->markTestSkipped('Test for property project not implemented');
    }
}
