<?php
/**
 * IfcApiInterfaceTest
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Api
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * BIMData API
 *
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1 (v1)
 * Contact: support@bimdata.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Server\Tests\Api;

use Symfony\Bundle\FrameworkBundle\KernelBrowser;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;

/**
 * IfcApiInterfaceTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Api
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 * @coversDefaultClass \OpenAPI\Server\Api\IfcApiInterface
 */
class IfcApiInterfaceTest extends WebTestCase
{
    private static ?KernelBrowser $client = null;

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
        if (null === self::$client) {
            self::$client = static::createClient();
        }
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
        static::ensureKernelShutdown();
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for addIfcErrorsDeprecated
     *
     * Add errors to model.
     *
     */
    public function testAddIfcErrorsDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/errors';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for addIfcErrorsDeprecated not implemented');
    }

    /**
     * Test case for bulkDeleteIfcClassificationsDeprecated
     *
     * Remove all classifications from model's elements.
     *
     */
    public function testBulkDeleteIfcClassificationsDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification/list_destroy';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for bulkDeleteIfcClassificationsDeprecated not implemented');
    }

    /**
     * Test case for bulkDeleteIfcPropertiesDeprecated
     *
     * Delete many Property of a model.
     *
     */
    public function testBulkDeleteIfcPropertiesDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/bulk_destroy';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for bulkDeleteIfcPropertiesDeprecated not implemented');
    }

    /**
     * Test case for bulkDeleteIfcPropertyDefinitionsDeprecated
     *
     * Delete many PropertyDefinitions of a model.
     *
     */
    public function testBulkDeleteIfcPropertyDefinitionsDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition/bulk_destroy';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for bulkDeleteIfcPropertyDefinitionsDeprecated not implemented');
    }

    /**
     * Test case for bulkDeleteIfcUnitsDeprecated
     *
     * Delete many Units of a model.
     *
     */
    public function testBulkDeleteIfcUnitsDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit/bulk_destroy';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for bulkDeleteIfcUnitsDeprecated not implemented');
    }

    /**
     * Test case for bulkDeletePropertySetDeprecated
     *
     * Delete many PropertySet of a model.
     *
     */
    public function testBulkDeletePropertySetDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset/bulk_destroy';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for bulkDeletePropertySetDeprecated not implemented');
    }

    /**
     * Test case for bulkFullUpdateElementsDeprecated
     *
     * Update many elements at once (only changing fields may be defined).
     *
     */
    public function testBulkFullUpdateElementsDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/bulk_update';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for bulkFullUpdateElementsDeprecated not implemented');
    }

    /**
     * Test case for bulkFullUpdateIfcPropertyDeprecated
     *
     * Update some fields of many properties of a model.
     *
     */
    public function testBulkFullUpdateIfcPropertyDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/bulk_update';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for bulkFullUpdateIfcPropertyDeprecated not implemented');
    }

    /**
     * Test case for bulkRemoveClassificationsOfElementDeprecated
     *
     * Remove many classifications from an element.
     *
     */
    public function testBulkRemoveClassificationsOfElementDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/classification/bulk_destroy';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{elementUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for bulkRemoveClassificationsOfElementDeprecated not implemented');
    }

    /**
     * Test case for bulkRemoveDocumentsOfElementDeprecated
     *
     * Remove many documents from an element.
     *
     */
    public function testBulkRemoveDocumentsOfElementDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/documents/bulk_destroy';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{elementUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for bulkRemoveDocumentsOfElementDeprecated not implemented');
    }

    /**
     * Test case for bulkRemoveElementsFromClassificationDeprecated
     *
     * Remove the classifications from all elements.
     *
     */
    public function testBulkRemoveElementsFromClassificationDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification/{model_classification_pk}/element/bulk_destroy';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelClassificationPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for bulkRemoveElementsFromClassificationDeprecated not implemented');
    }

    /**
     * Test case for bulkUpdateElementsDeprecated
     *
     * Update many elements at once (all field must be defined).
     *
     */
    public function testBulkUpdateElementsDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/bulk_update';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PUT', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for bulkUpdateElementsDeprecated not implemented');
    }

    /**
     * Test case for bulkUpdateIfcPropertyDeprecated
     *
     * Update all fields of many properties of a model.
     *
     */
    public function testBulkUpdateIfcPropertyDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/bulk_update';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PUT', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for bulkUpdateIfcPropertyDeprecated not implemented');
    }

    /**
     * Test case for createAccessTokenDeprecated
     *
     * Create a token for this model.
     *
     */
    public function testCreateAccessTokenDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/access_token';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createAccessTokenDeprecated not implemented');
    }

    /**
     * Test case for createBuildingDeprecated
     *
     * Create a building of a model.
     *
     */
    public function testCreateBuildingDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/building';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createBuildingDeprecated not implemented');
    }

    /**
     * Test case for createBuildingPlanDeprecated
     *
     * Create a relation between a 2d model and a building.
     *
     */
    public function testCreateBuildingPlanDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/building/{building_uuid}/plan/add';
        $pattern = '{buildingUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createBuildingPlanDeprecated not implemented');
    }

    /**
     * Test case for createCheckerDeprecated
     *
     * Create a checker to a model.
     *
     */
    public function testCreateCheckerDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createCheckerDeprecated not implemented');
    }

    /**
     * Test case for createCheckerResultDeprecated
     *
     * Create a CheckerResult.
     *
     */
    public function testCreateCheckerResultDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{checker_pk}/result';
        $pattern = '{checkerPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createCheckerResultDeprecated not implemented');
    }

    /**
     * Test case for createClassificationElementRelationsDeprecated
     *
     * Create association between existing classification and existing element.
     *
     */
    public function testCreateClassificationElementRelationsDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification-element';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createClassificationElementRelationsDeprecated not implemented');
    }

    /**
     * Test case for createClassificationsOfElementDeprecated
     *
     * Create one or many classifications to an element.
     *
     */
    public function testCreateClassificationsOfElementDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/classification';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{elementUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createClassificationsOfElementDeprecated not implemented');
    }

    /**
     * Test case for createElementDeprecated
     *
     * Create an element in the model.
     *
     */
    public function testCreateElementDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createElementDeprecated not implemented');
    }

    /**
     * Test case for createElementPropertySetDeprecated
     *
     * Create a PropertySets to an element.
     *
     */
    public function testCreateElementPropertySetDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{elementUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createElementPropertySetDeprecated not implemented');
    }

    /**
     * Test case for createElementPropertySetPropertyDefinitionDeprecated
     *
     * Create a Definition to a Property.
     *
     */
    public function testCreateElementPropertySetPropertyDefinitionDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{elementUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{propertyPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{propertysetPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createElementPropertySetPropertyDefinitionDeprecated not implemented');
    }

    /**
     * Test case for createElementPropertySetPropertyDefinitionUnitDeprecated
     *
     * Create a Unit to a Definition.
     *
     */
    public function testCreateElementPropertySetPropertyDefinitionUnitDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{propertydefinition_pk}/unit';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{elementUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{propertyPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{propertydefinitionPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{propertysetPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createElementPropertySetPropertyDefinitionUnitDeprecated not implemented');
    }

    /**
     * Test case for createElementPropertySetPropertyDeprecated
     *
     * Create a property to a PropertySet.
     *
     */
    public function testCreateElementPropertySetPropertyDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{elementUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{propertysetPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createElementPropertySetPropertyDeprecated not implemented');
    }

    /**
     * Test case for createIfcDeprecated
     *
     * Make a PDF or Image file a Model.
     *
     */
    public function testCreateIfcDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/create-model';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createIfcDeprecated not implemented');
    }

    /**
     * Test case for createIfcPropertyDefinitionDeprecated
     *
     * Create a PropertyDefinition on the model.
     *
     */
    public function testCreateIfcPropertyDefinitionDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createIfcPropertyDefinitionDeprecated not implemented');
    }

    /**
     * Test case for createIfcUnitDeprecated
     *
     * Create a Unit on a model.
     *
     */
    public function testCreateIfcUnitDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createIfcUnitDeprecated not implemented');
    }

    /**
     * Test case for createLayerDeprecated
     *
     * Create a layer in the model.
     *
     */
    public function testCreateLayerDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/layer';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createLayerDeprecated not implemented');
    }

    /**
     * Test case for createMetaBuildingDeprecated
     *
     * Create an empty 3D Model.
     *
     */
    public function testCreateMetaBuildingDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/create-metabuilding';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createMetaBuildingDeprecated not implemented');
    }

    /**
     * Test case for createPropertySetDeprecated
     *
     * Create one or many PropertySet.
     *
     */
    public function testCreatePropertySetDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createPropertySetDeprecated not implemented');
    }

    /**
     * Test case for createPropertySetElementRelationsDeprecated
     *
     * Create association between PropertySet and element.
     *
     */
    public function testCreatePropertySetElementRelationsDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset-element';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createPropertySetElementRelationsDeprecated not implemented');
    }

    /**
     * Test case for createRawElementsDeprecated
     *
     * Create elements in an optimized format.
     *
     */
    public function testCreateRawElementsDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/raw';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createRawElementsDeprecated not implemented');
    }

    /**
     * Test case for createSpaceDeprecated
     *
     * Create a space in the model.
     *
     */
    public function testCreateSpaceDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/space';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createSpaceDeprecated not implemented');
    }

    /**
     * Test case for createStoreyDeprecated
     *
     * Create a storey of a model.
     *
     */
    public function testCreateStoreyDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/storey';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createStoreyDeprecated not implemented');
    }

    /**
     * Test case for createStoreyPlanDeprecated
     *
     * Create a relation between a 2d model and a storey.
     *
     */
    public function testCreateStoreyPlanDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/storey/{storey_uuid}/plan/add';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{storeyUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createStoreyPlanDeprecated not implemented');
    }

    /**
     * Test case for createSystemDeprecated
     *
     * Create a system in the model.
     *
     */
    public function testCreateSystemDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/system';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createSystemDeprecated not implemented');
    }

    /**
     * Test case for createTilesetDeprecated
     *
     * Create the tileset of the model and upload all files.
     *
     */
    public function testCreateTilesetDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/tileset';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path);
        $this->markTestSkipped('Test for createTilesetDeprecated not implemented');
    }

    /**
     * Test case for createZoneDeprecated
     *
     * Create a zone in the model.
     *
     */
    public function testCreateZoneDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createZoneDeprecated not implemented');
    }

    /**
     * Test case for createZoneSpaceDeprecated
     *
     * Create a space in a zone.
     *
     */
    public function testCreateZoneSpaceDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{zone_pk}/space';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{zonePk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createZoneSpaceDeprecated not implemented');
    }

    /**
     * Test case for deleteAccessTokenDeprecated
     *
     * Delete a token.
     *
     */
    public function testDeleteAccessTokenDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/access_token/{token}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{token}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for deleteAccessTokenDeprecated not implemented');
    }

    /**
     * Test case for deleteBuildingDeprecated
     *
     * Delete a building of a model.
     *
     */
    public function testDeleteBuildingDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/building/{uuid}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{uuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for deleteBuildingDeprecated not implemented');
    }

    /**
     * Test case for deleteBuildingPlanDeprecated
     *
     * Delete the relation between a 2d model and a building.
     *
     */
    public function testDeleteBuildingPlanDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/building/{building_uuid}/plan/{id}';
        $pattern = '{buildingUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for deleteBuildingPlanDeprecated not implemented');
    }

    /**
     * Test case for deleteCheckerDeprecated
     *
     * Delete a checker of a model.
     *
     */
    public function testDeleteCheckerDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for deleteCheckerDeprecated not implemented');
    }

    /**
     * Test case for deleteCheckerResultDeprecated
     *
     * Delete a CheckerResult.
     *
     */
    public function testDeleteCheckerResultDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{checker_pk}/result/{id}';
        $pattern = '{checkerPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for deleteCheckerResultDeprecated not implemented');
    }

    /**
     * Test case for deleteElementDeprecated
     *
     * Delete an element of a model.
     *
     */
    public function testDeleteElementDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{uuid}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{uuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for deleteElementDeprecated not implemented');
    }

    /**
     * Test case for deleteIfcDeprecated
     *
     * Delete a model.
     *
     */
    public function testDeleteIfcDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for deleteIfcDeprecated not implemented');
    }

    /**
     * Test case for deleteIfcPropertyDefinitionDeprecated
     *
     * Delete a PropertyDefinitions of a model.
     *
     */
    public function testDeleteIfcPropertyDefinitionDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for deleteIfcPropertyDefinitionDeprecated not implemented');
    }

    /**
     * Test case for deleteIfcPropertyDeprecated
     *
     * Delete a Property of a model.
     *
     */
    public function testDeleteIfcPropertyDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for deleteIfcPropertyDeprecated not implemented');
    }

    /**
     * Test case for deleteIfcUnitDeprecated
     *
     * Delete a Unit of a model.
     *
     */
    public function testDeleteIfcUnitDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for deleteIfcUnitDeprecated not implemented');
    }

    /**
     * Test case for deleteIfcWithoutDocDeprecated
     *
     * Delete the Model without deleting the related document.
     *
     */
    public function testDeleteIfcWithoutDocDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/delete-model';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for deleteIfcWithoutDocDeprecated not implemented');
    }

    /**
     * Test case for deleteLayerDeprecated
     *
     * Delete a layer of a model.
     *
     */
    public function testDeleteLayerDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/layer/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for deleteLayerDeprecated not implemented');
    }

    /**
     * Test case for deletePropertySetDeprecated
     *
     * Delete a PropertySet of a model.
     *
     */
    public function testDeletePropertySetDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for deletePropertySetDeprecated not implemented');
    }

    /**
     * Test case for deleteSpaceDeprecated
     *
     * Delete a space.
     *
     */
    public function testDeleteSpaceDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/space/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for deleteSpaceDeprecated not implemented');
    }

    /**
     * Test case for deleteStoreyDeprecated
     *
     * Delete a storey of a model.
     *
     */
    public function testDeleteStoreyDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/storey/{uuid}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{uuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for deleteStoreyDeprecated not implemented');
    }

    /**
     * Test case for deleteStoreyPlanDeprecated
     *
     * Delete the relation between a 2d model and a storey.
     *
     */
    public function testDeleteStoreyPlanDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/storey/{storey_uuid}/plan/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{storeyUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for deleteStoreyPlanDeprecated not implemented');
    }

    /**
     * Test case for deleteSystemDeprecated
     *
     * Delete a system of a model.
     *
     */
    public function testDeleteSystemDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/system/{uuid}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{uuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for deleteSystemDeprecated not implemented');
    }

    /**
     * Test case for deleteZoneDeprecated
     *
     * Delete a zone of a model.
     *
     */
    public function testDeleteZoneDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for deleteZoneDeprecated not implemented');
    }

    /**
     * Test case for deleteZoneSpaceDeprecated
     *
     * Delete a space of a zone.
     *
     */
    public function testDeleteZoneSpaceDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{zone_pk}/space/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{zonePk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for deleteZoneSpaceDeprecated not implemented');
    }

    /**
     * Test case for exportIfcDeprecated
     *
     * Export IFC.
     *
     */
    public function testExportIfcDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/export';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for exportIfcDeprecated not implemented');
    }

    /**
     * Test case for fullUpdateElementDeprecated
     *
     * Update all fields of an element.
     *
     */
    public function testFullUpdateElementDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{uuid}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{uuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PUT', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for fullUpdateElementDeprecated not implemented');
    }

    /**
     * Test case for getAccessTokenDeprecated
     *
     * Retrieve one token created for this model.
     *
     */
    public function testGetAccessTokenDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/access_token/{token}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{token}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getAccessTokenDeprecated not implemented');
    }

    /**
     * Test case for getAccessTokensDeprecated
     *
     * Retrieve all tokens created for this model.
     *
     */
    public function testGetAccessTokensDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/access_token';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getAccessTokensDeprecated not implemented');
    }

    /**
     * Test case for getBuildingDeprecated
     *
     * Retrieve a building of a model.
     *
     */
    public function testGetBuildingDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/building/{uuid}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{uuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getBuildingDeprecated not implemented');
    }

    /**
     * Test case for getBuildingPlanPositioningDeprecated
     *
     * Retrieve the postioning of the plan in the building.
     *
     */
    public function testGetBuildingPlanPositioningDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/building/{building_uuid}/plan/{id}/positioning';
        $pattern = '{buildingUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getBuildingPlanPositioningDeprecated not implemented');
    }

    /**
     * Test case for getBuildingsDeprecated
     *
     * Retrieve all buildings of a model.
     *
     */
    public function testGetBuildingsDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/building';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getBuildingsDeprecated not implemented');
    }

    /**
     * Test case for getCheckerDeprecated
     *
     * Retrieve a checker of a model.
     *
     */
    public function testGetCheckerDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getCheckerDeprecated not implemented');
    }

    /**
     * Test case for getCheckerResultDeprecated
     *
     * Retrieve one CheckerResult.
     *
     */
    public function testGetCheckerResultDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{checker_pk}/result/{id}';
        $pattern = '{checkerPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getCheckerResultDeprecated not implemented');
    }

    /**
     * Test case for getCheckerResultsDeprecated
     *
     * Retrieve all CheckerResults.
     *
     */
    public function testGetCheckerResultsDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{checker_pk}/result';
        $pattern = '{checkerPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getCheckerResultsDeprecated not implemented');
    }

    /**
     * Test case for getCheckersDeprecated
     *
     * Retrieve all checkers of a model.
     *
     */
    public function testGetCheckersDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getCheckersDeprecated not implemented');
    }

    /**
     * Test case for getClassificationsOfElementDeprecated
     *
     * Retrieve all classifications of an element.
     *
     */
    public function testGetClassificationsOfElementDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/classification';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{elementUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getClassificationsOfElementDeprecated not implemented');
    }

    /**
     * Test case for getDocumentsOfElementDeprecated
     *
     * Retrieve all documents of an element.
     *
     */
    public function testGetDocumentsOfElementDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/documents';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{elementUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getDocumentsOfElementDeprecated not implemented');
    }

    /**
     * Test case for getElementDeprecated
     *
     * Retrieve an element of a model.
     *
     */
    public function testGetElementDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{uuid}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{uuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getElementDeprecated not implemented');
    }

    /**
     * Test case for getElementLinkedDocumentsDeprecated
     *
     * Retrieve all documents linked to any element.
     *
     */
    public function testGetElementLinkedDocumentsDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/documents';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getElementLinkedDocumentsDeprecated not implemented');
    }

    /**
     * Test case for getElementPropertySetDeprecated
     *
     * Retrieve a PropertySet of an element.
     *
     */
    public function testGetElementPropertySetDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{elementUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getElementPropertySetDeprecated not implemented');
    }

    /**
     * Test case for getElementPropertySetPropertiesDeprecated
     *
     * Retrieve all Properties of a PropertySet.
     *
     */
    public function testGetElementPropertySetPropertiesDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{elementUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{propertysetPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getElementPropertySetPropertiesDeprecated not implemented');
    }

    /**
     * Test case for getElementPropertySetPropertyDefinitionDeprecated
     *
     * Retrieve a Definition of a Property.
     *
     */
    public function testGetElementPropertySetPropertyDefinitionDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{elementUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{propertyPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{propertysetPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getElementPropertySetPropertyDefinitionDeprecated not implemented');
    }

    /**
     * Test case for getElementPropertySetPropertyDefinitionUnitDeprecated
     *
     * Retrieve a Unit of a Definition.
     *
     */
    public function testGetElementPropertySetPropertyDefinitionUnitDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{propertydefinition_pk}/unit/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{elementUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{propertyPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{propertydefinitionPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{propertysetPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getElementPropertySetPropertyDefinitionUnitDeprecated not implemented');
    }

    /**
     * Test case for getElementPropertySetPropertyDefinitionUnitsDeprecated
     *
     * Retrieve all Units of a Definition.
     *
     */
    public function testGetElementPropertySetPropertyDefinitionUnitsDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{propertydefinition_pk}/unit';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{elementUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{propertyPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{propertydefinitionPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{propertysetPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getElementPropertySetPropertyDefinitionUnitsDeprecated not implemented');
    }

    /**
     * Test case for getElementPropertySetPropertyDefinitionsDeprecated
     *
     * Retrieve all Definitions of a PropertySet.
     *
     */
    public function testGetElementPropertySetPropertyDefinitionsDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{elementUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{propertyPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{propertysetPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getElementPropertySetPropertyDefinitionsDeprecated not implemented');
    }

    /**
     * Test case for getElementPropertySetPropertyDeprecated
     *
     * Retrieve a Property of a PropertySet.
     *
     */
    public function testGetElementPropertySetPropertyDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{elementUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{propertysetPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getElementPropertySetPropertyDeprecated not implemented');
    }

    /**
     * Test case for getElementPropertySetsDeprecated
     *
     * Retrieve all PropertySets of an element.
     *
     */
    public function testGetElementPropertySetsDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{elementUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getElementPropertySetsDeprecated not implemented');
    }

    /**
     * Test case for getElementsDeprecated
     *
     * Retrieve all elements of a model.
     *
     */
    public function testGetElementsDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getElementsDeprecated not implemented');
    }

    /**
     * Test case for getElementsFromClassificationDeprecated
     *
     * Retrieve all elements with the classification.
     *
     */
    public function testGetElementsFromClassificationDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification/{model_classification_pk}/element';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelClassificationPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getElementsFromClassificationDeprecated not implemented');
    }

    /**
     * Test case for getIfcClassificationsDeprecated
     *
     * Retrieve all classifications in a model.
     *
     */
    public function testGetIfcClassificationsDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getIfcClassificationsDeprecated not implemented');
    }

    /**
     * Test case for getIfcDeprecated
     *
     * Retrieve one model.
     *
     */
    public function testGetIfcDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getIfcDeprecated not implemented');
    }

    /**
     * Test case for getIfcMaterialDeprecated
     *
     * Retrieve a material of a model.
     *
     */
    public function testGetIfcMaterialDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/material/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getIfcMaterialDeprecated not implemented');
    }

    /**
     * Test case for getIfcMaterialsDeprecated
     *
     * Retrieve all materials of a model.
     *
     */
    public function testGetIfcMaterialsDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/material';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getIfcMaterialsDeprecated not implemented');
    }

    /**
     * Test case for getIfcPropertiesDeprecated
     *
     * Retrieve all Properties of a model.
     *
     */
    public function testGetIfcPropertiesDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getIfcPropertiesDeprecated not implemented');
    }

    /**
     * Test case for getIfcPropertyDefinitionDeprecated
     *
     * Retrieve a PropertyDefinition of a model.
     *
     */
    public function testGetIfcPropertyDefinitionDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getIfcPropertyDefinitionDeprecated not implemented');
    }

    /**
     * Test case for getIfcPropertyDefinitionsDeprecated
     *
     * Retrieve all PropertyDefinitions of a model.
     *
     */
    public function testGetIfcPropertyDefinitionsDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getIfcPropertyDefinitionsDeprecated not implemented');
    }

    /**
     * Test case for getIfcPropertyDeprecated
     *
     * Retrieve a Property of a model.
     *
     */
    public function testGetIfcPropertyDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getIfcPropertyDeprecated not implemented');
    }

    /**
     * Test case for getIfcUnitDeprecated
     *
     * Retrieve a Unit of a model.
     *
     */
    public function testGetIfcUnitDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getIfcUnitDeprecated not implemented');
    }

    /**
     * Test case for getIfcUnitsDeprecated
     *
     * Retrieve all Units of a model.
     *
     */
    public function testGetIfcUnitsDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getIfcUnitsDeprecated not implemented');
    }

    /**
     * Test case for getIfcsDeprecated
     *
     * Retrieve all models.
     *
     */
    public function testGetIfcsDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getIfcsDeprecated not implemented');
    }

    /**
     * Test case for getLayerDeprecated
     *
     * Retrieve a layer of a model.
     *
     */
    public function testGetLayerDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/layer/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getLayerDeprecated not implemented');
    }

    /**
     * Test case for getLayersDeprecated
     *
     * Retrieve all layers of a model.
     *
     */
    public function testGetLayersDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/layer';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getLayersDeprecated not implemented');
    }

    /**
     * Test case for getMaterialDeprecated
     *
     * Retrieve a material of a model.
     *
     */
    public function testGetMaterialDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/material/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{elementUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getMaterialDeprecated not implemented');
    }

    /**
     * Test case for getMaterialsDeprecated
     *
     * Retrieve all materials of a model.
     *
     */
    public function testGetMaterialsDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/material';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{elementUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getMaterialsDeprecated not implemented');
    }

    /**
     * Test case for getProcessorHandlerDeprecated
     *
     * Retrieve a processor handler.
     *
     */
    public function testGetProcessorHandlerDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/processorhandler/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getProcessorHandlerDeprecated not implemented');
    }

    /**
     * Test case for getProcessorHandlersDeprecated
     *
     * Get all processor handlers.
     *
     */
    public function testGetProcessorHandlersDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/processorhandler';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getProcessorHandlersDeprecated not implemented');
    }

    /**
     * Test case for getPropertySetDeprecated
     *
     * Retrieve a PropertySet of a model.
     *
     */
    public function testGetPropertySetDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getPropertySetDeprecated not implemented');
    }

    /**
     * Test case for getPropertySetsDeprecated
     *
     * Retrieve all PropertySets of a model.
     *
     */
    public function testGetPropertySetsDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getPropertySetsDeprecated not implemented');
    }

    /**
     * Test case for getRawElementsDeprecated
     *
     * Retrieve all elements in a optimized format.
     *
     */
    public function testGetRawElementsDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/raw';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getRawElementsDeprecated not implemented');
    }

    /**
     * Test case for getSimpleElementDeprecated
     *
     * Retrieve an element of a model with a simple value representation.
     *
     */
    public function testGetSimpleElementDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{uuid}/simple';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{uuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getSimpleElementDeprecated not implemented');
    }

    /**
     * Test case for getSimpleElementsDeprecated
     *
     * Retrieve all elements of a model with a simple value representation.
     *
     */
    public function testGetSimpleElementsDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/simple';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getSimpleElementsDeprecated not implemented');
    }

    /**
     * Test case for getSpaceDeprecated
     *
     * Retrieve one space of the model.
     *
     */
    public function testGetSpaceDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/space/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getSpaceDeprecated not implemented');
    }

    /**
     * Test case for getSpacesDeprecated
     *
     * Retrieve all spaces of the model.
     *
     */
    public function testGetSpacesDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/space';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getSpacesDeprecated not implemented');
    }

    /**
     * Test case for getStoreyDeprecated
     *
     * Retrieve a storey of a model.
     *
     */
    public function testGetStoreyDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/storey/{uuid}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{uuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getStoreyDeprecated not implemented');
    }

    /**
     * Test case for getStoreyPlanPositioningDeprecated
     *
     * Retrieve the postioning of the plan in the storey.
     *
     */
    public function testGetStoreyPlanPositioningDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/storey/{storey_uuid}/plan/{id}/positioning';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{storeyUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getStoreyPlanPositioningDeprecated not implemented');
    }

    /**
     * Test case for getStoreysDeprecated
     *
     * Retrieve all storeys of a model.
     *
     */
    public function testGetStoreysDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/storey';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getStoreysDeprecated not implemented');
    }

    /**
     * Test case for getSystemDeprecated
     *
     * Retrieve a system of a model.
     *
     */
    public function testGetSystemDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/system/{uuid}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{uuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getSystemDeprecated not implemented');
    }

    /**
     * Test case for getSystemsDeprecated
     *
     * Retrieve all systems of a model.
     *
     */
    public function testGetSystemsDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/system';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getSystemsDeprecated not implemented');
    }

    /**
     * Test case for getTilesetDeprecated
     *
     * Retrieve the tileset of the model.
     *
     */
    public function testGetTilesetDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/tileset';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getTilesetDeprecated not implemented');
    }

    /**
     * Test case for getZoneDeprecated
     *
     * Retrieve one zone of a model.
     *
     */
    public function testGetZoneDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getZoneDeprecated not implemented');
    }

    /**
     * Test case for getZoneSpaceDeprecated
     *
     * Retrieve one space of a zone.
     *
     */
    public function testGetZoneSpaceDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{zone_pk}/space/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{zonePk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getZoneSpaceDeprecated not implemented');
    }

    /**
     * Test case for getZoneSpacesDeprecated
     *
     * Retrieve all spaces of a zone.
     *
     */
    public function testGetZoneSpacesDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{zone_pk}/space';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{zonePk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getZoneSpacesDeprecated not implemented');
    }

    /**
     * Test case for getZonesDeprecated
     *
     * Retrieve zones of a model.
     *
     */
    public function testGetZonesDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getZonesDeprecated not implemented');
    }

    /**
     * Test case for launchNewCheckDeprecated
     *
     * Launch a new check on the model.
     *
     */
    public function testLaunchNewCheckDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{id}/launch-check';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for launchNewCheckDeprecated not implemented');
    }

    /**
     * Test case for linkDocumentsOfElementDeprecated
     *
     * Link one or many documents to an element.
     *
     */
    public function testLinkDocumentsOfElementDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/documents';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{elementUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for linkDocumentsOfElementDeprecated not implemented');
    }

    /**
     * Test case for listClassificationElementRelationsDeprecated
     *
     * List all associations between classifications and elements.
     *
     */
    public function testListClassificationElementRelationsDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification-element';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for listClassificationElementRelationsDeprecated not implemented');
    }

    /**
     * Test case for mergeIfcsDeprecated
     *
     * Merge IFC files.
     *
     */
    public function testMergeIfcsDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/merge';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for mergeIfcsDeprecated not implemented');
    }

    /**
     * Test case for optimizeIfcDeprecated
     *
     * Optimize the IFC.
     *
     */
    public function testOptimizeIfcDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/optimize';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for optimizeIfcDeprecated not implemented');
    }

    /**
     * Test case for removeAllElementPropertySetDeprecated
     *
     * Remove all property sets from element.
     *
     */
    public function testRemoveAllElementPropertySetDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/all';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{elementUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for removeAllElementPropertySetDeprecated not implemented');
    }

    /**
     * Test case for removeClassificationOfElementDeprecated
     *
     * Remove a classification from an element.
     *
     */
    public function testRemoveClassificationOfElementDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/classification/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{elementUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for removeClassificationOfElementDeprecated not implemented');
    }

    /**
     * Test case for removeDocumentOfElementDeprecated
     *
     * Remove a documents from an element.
     *
     */
    public function testRemoveDocumentOfElementDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/documents/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{elementUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for removeDocumentOfElementDeprecated not implemented');
    }

    /**
     * Test case for removeElementPropertySetDeprecated
     *
     * Remove a PropertySet from an element.
     *
     */
    public function testRemoveElementPropertySetDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{elementUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for removeElementPropertySetDeprecated not implemented');
    }

    /**
     * Test case for removeElementPropertySetPropertyDefinitionDeprecated
     *
     * Delete a Definition to a Property.
     *
     */
    public function testRemoveElementPropertySetPropertyDefinitionDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{elementUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{propertyPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{propertysetPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for removeElementPropertySetPropertyDefinitionDeprecated not implemented');
    }

    /**
     * Test case for removeElementPropertySetPropertyDefinitionUnitDeprecated
     *
     * Remove a Unit from a Definition.
     *
     */
    public function testRemoveElementPropertySetPropertyDefinitionUnitDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{propertydefinition_pk}/unit/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{elementUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{propertyPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{propertydefinitionPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{propertysetPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for removeElementPropertySetPropertyDefinitionUnitDeprecated not implemented');
    }

    /**
     * Test case for removeElementPropertySetPropertyDeprecated
     *
     * Remove a property from a PropertySet.
     *
     */
    public function testRemoveElementPropertySetPropertyDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{elementUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{propertysetPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for removeElementPropertySetPropertyDeprecated not implemented');
    }

    /**
     * Test case for removeElementsFromClassificationDeprecated
     *
     * Remove the classification from all elements.
     *
     */
    public function testRemoveElementsFromClassificationDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification/{model_classification_pk}/element/{uuid}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelClassificationPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{uuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for removeElementsFromClassificationDeprecated not implemented');
    }

    /**
     * Test case for reprocessIfcDeprecated
     *
     * Reprocess Model file.
     *
     */
    public function testReprocessIfcDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/reprocess';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path);
        $this->markTestSkipped('Test for reprocessIfcDeprecated not implemented');
    }

    /**
     * Test case for updateAccessTokenDeprecated
     *
     * Update some fields of a token.
     *
     */
    public function testUpdateAccessTokenDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/access_token/{token}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{token}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateAccessTokenDeprecated not implemented');
    }

    /**
     * Test case for updateBuildingDeprecated
     *
     * Update some fields of a building.
     *
     */
    public function testUpdateBuildingDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/building/{uuid}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{uuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateBuildingDeprecated not implemented');
    }

    /**
     * Test case for updateBuildingPlanPositioningDeprecated
     *
     * Update the postioning of the plan in the building.
     *
     */
    public function testUpdateBuildingPlanPositioningDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/building/{building_uuid}/plan/{id}/positioning';
        $pattern = '{buildingUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateBuildingPlanPositioningDeprecated not implemented');
    }

    /**
     * Test case for updateCheckerDeprecated
     *
     * Update some fields of a checker of a model.
     *
     */
    public function testUpdateCheckerDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateCheckerDeprecated not implemented');
    }

    /**
     * Test case for updateCheckerResultDeprecated
     *
     * Update some fields of a CheckerResult.
     *
     */
    public function testUpdateCheckerResultDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{checker_pk}/result/{id}';
        $pattern = '{checkerPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateCheckerResultDeprecated not implemented');
    }

    /**
     * Test case for updateElementDeprecated
     *
     * Update some fields of an element.
     *
     */
    public function testUpdateElementDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{uuid}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{uuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateElementDeprecated not implemented');
    }

    /**
     * Test case for updateElementPropertySetPropertyDeprecated
     *
     * Update a property from an element.
     *
     */
    public function testUpdateElementPropertySetPropertyDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{elementUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{propertysetPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateElementPropertySetPropertyDeprecated not implemented');
    }

    /**
     * Test case for updateIfcDeprecated
     *
     * Update some fields of a model.
     *
     */
    public function testUpdateIfcDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateIfcDeprecated not implemented');
    }

    /**
     * Test case for updateIfcFilesDeprecated
     *
     * Update models file (gltf, svg, structure, etc).
     *
     */
    public function testUpdateIfcFilesDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/files';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path);
        $this->markTestSkipped('Test for updateIfcFilesDeprecated not implemented');
    }

    /**
     * Test case for updateIfcPropertyDefinitionDeprecated
     *
     * Update some fields of many PropertyDefinitions of a model.
     *
     */
    public function testUpdateIfcPropertyDefinitionDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateIfcPropertyDefinitionDeprecated not implemented');
    }

    /**
     * Test case for updateIfcPropertyDeprecated
     *
     * Update some fields of a Property.
     *
     */
    public function testUpdateIfcPropertyDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateIfcPropertyDeprecated not implemented');
    }

    /**
     * Test case for updateIfcUnitDeprecated
     *
     * Update some fields of a Unit of a model.
     *
     */
    public function testUpdateIfcUnitDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateIfcUnitDeprecated not implemented');
    }

    /**
     * Test case for updateLayerDeprecated
     *
     * Update some fields of a layer.
     *
     */
    public function testUpdateLayerDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/layer/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateLayerDeprecated not implemented');
    }

    /**
     * Test case for updateOrderBuildingPlanDeprecated
     *
     * Update order of all plan of a building.
     *
     */
    public function testUpdateOrderBuildingPlanDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/building/{building_uuid}/plan/order';
        $pattern = '{buildingUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateOrderBuildingPlanDeprecated not implemented');
    }

    /**
     * Test case for updateOrderStoreyPlanDeprecated
     *
     * Update order of all plan of a storey.
     *
     */
    public function testUpdateOrderStoreyPlanDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/storey/{storey_uuid}/plan/order';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{storeyUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateOrderStoreyPlanDeprecated not implemented');
    }

    /**
     * Test case for updateOrderStoreysDeprecated
     *
     * Update order of all storey of a model.
     *
     */
    public function testUpdateOrderStoreysDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/storey/order';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateOrderStoreysDeprecated not implemented');
    }

    /**
     * Test case for updateProcessorHandlerDeprecated
     *
     * Update the status of a processor handler.
     *
     */
    public function testUpdateProcessorHandlerDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/processorhandler/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateProcessorHandlerDeprecated not implemented');
    }

    /**
     * Test case for updatePropertySetDeprecated
     *
     * Update some fields of a PropertySet.
     *
     */
    public function testUpdatePropertySetDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updatePropertySetDeprecated not implemented');
    }

    /**
     * Test case for updateSpaceDeprecated
     *
     * Update some fields of a space.
     *
     */
    public function testUpdateSpaceDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/space/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateSpaceDeprecated not implemented');
    }

    /**
     * Test case for updateStoreyDeprecated
     *
     * Update some fields of a storey.
     *
     */
    public function testUpdateStoreyDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/storey/{uuid}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{uuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateStoreyDeprecated not implemented');
    }

    /**
     * Test case for updateStoreyPlanPositioningDeprecated
     *
     * Update the postioning of the plan in the storey.
     *
     */
    public function testUpdateStoreyPlanPositioningDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/storey/{storey_uuid}/plan/{id}/positioning';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{storeyUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateStoreyPlanPositioningDeprecated not implemented');
    }

    /**
     * Test case for updateSystemDeprecated
     *
     * Update some fields of a system.
     *
     */
    public function testUpdateSystemDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/system/{uuid}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{uuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateSystemDeprecated not implemented');
    }

    /**
     * Test case for updateZoneDeprecated
     *
     * Update some fields of a zone.
     *
     */
    public function testUpdateZoneDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateZoneDeprecated not implemented');
    }

    /**
     * Test case for updateZoneSpaceDeprecated
     *
     * Update some fields of a space.
     *
     */
    public function testUpdateZoneSpaceDeprecated(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{zone_pk}/space/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{ifcPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{zonePk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateZoneSpaceDeprecated not implemented');
    }

    /**
     * @param string $regexp
     * @return mixed
     */
    protected function genTestData(string $regexp)
    {
        $grammar  = new \Hoa\File\Read('hoa://Library/Regex/Grammar.pp');
        $compiler = \Hoa\Compiler\Llk\Llk::load($grammar);
        $ast      = $compiler->parse($regexp);
        $generator = new \Hoa\Regex\Visitor\Isotropic(new \Hoa\Math\Sampler\Random());

        return $generator->visit($ast);
    }
}
