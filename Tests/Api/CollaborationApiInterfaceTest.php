<?php
/**
 * CollaborationApiInterfaceTest
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Api
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * BIMData API
 *
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1 (v1)
 * Contact: support@bimdata.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Server\Tests\Api;

use Symfony\Bundle\FrameworkBundle\KernelBrowser;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;

/**
 * CollaborationApiInterfaceTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Api
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 * @coversDefaultClass \OpenAPI\Server\Api\CollaborationApiInterface
 */
class CollaborationApiInterfaceTest extends WebTestCase
{
    private static ?KernelBrowser $client = null;

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
        if (null === self::$client) {
            self::$client = static::createClient();
        }
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
        static::ensureKernelShutdown();
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for acceptUserInvitation
     *
     * Accept an invitation.
     *
     */
    public function testAcceptUserInvitation(): void
    {
        $client = self::$client;

        $path = '/user/invitations/{id}/accept';
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path);
        $this->markTestSkipped('Test for acceptUserInvitation not implemented');
    }

    /**
     * Test case for acceptValidation
     *
     * Accept a validation.
     *
     */
    public function testAcceptValidation(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{visa_pk}/validation/{id}/accept';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{documentPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{visaPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path);
        $this->markTestSkipped('Test for acceptValidation not implemented');
    }

    /**
     * Test case for addDocumentTag
     *
     * Add a tag to a document.
     *
     */
    public function testAddDocumentTag(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/tag';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{documentPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for addDocumentTag not implemented');
    }

    /**
     * Test case for addGroupMember
     *
     * Add a user to a group.
     *
     */
    public function testAddGroupMember(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/group/{group_pk}/member';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{groupPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for addGroupMember not implemented');
    }

    /**
     * Test case for cancelCloudUserInvitation
     *
     * Cancel a pending invitation.
     *
     */
    public function testCancelCloudUserInvitation(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/invitation/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for cancelCloudUserInvitation not implemented');
    }

    /**
     * Test case for cancelProjectUserInvitation
     *
     * Cancel a pending invitation.
     *
     */
    public function testCancelProjectUserInvitation(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/invitation/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for cancelProjectUserInvitation not implemented');
    }

    /**
     * Test case for checkAccess
     *
     * Check app access from cloud.
     *
     */
    public function testCheckAccess(): void
    {
        $client = self::$client;

        $path = '/cloud/{id}/check-access';
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for checkAccess not implemented');
    }

    /**
     * Test case for closeVisa
     *
     * Close a visa of a document.
     *
     */
    public function testCloseVisa(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{id}/close';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{documentPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path);
        $this->markTestSkipped('Test for closeVisa not implemented');
    }

    /**
     * Test case for createClassification
     *
     * Create a classification.
     *
     */
    public function testCreateClassification(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/classification';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createClassification not implemented');
    }

    /**
     * Test case for createCloud
     *
     * Create a cloud.
     *
     */
    public function testCreateCloud(): void
    {
        $client = self::$client;

        $path = '/cloud';

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createCloud not implemented');
    }

    /**
     * Test case for createDMSTree
     *
     * Create a complete DMS tree.
     *
     */
    public function testCreateDMSTree(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{id}/dms-tree';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createDMSTree not implemented');
    }

    /**
     * Test case for createDemo
     *
     * Create a Demo project in a cloud.
     *
     */
    public function testCreateDemo(): void
    {
        $client = self::$client;

        $path = '/cloud/{id}/create-demo';
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path);
        $this->markTestSkipped('Test for createDemo not implemented');
    }

    /**
     * Test case for createDocument
     *
     * Create a document.
     *
     */
    public function testCreateDocument(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/document';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path);
        $this->markTestSkipped('Test for createDocument not implemented');
    }

    /**
     * Test case for createFolder
     *
     * Create a folder.
     *
     */
    public function testCreateFolder(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/folder';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createFolder not implemented');
    }

    /**
     * Test case for createManageGroup
     *
     * Create a group.
     *
     */
    public function testCreateManageGroup(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/group';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createManageGroup not implemented');
    }

    /**
     * Test case for createProject
     *
     * Create a project.
     *
     */
    public function testCreateProject(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createProject not implemented');
    }

    /**
     * Test case for createProjectAccessToken
     *
     * Create a token for this project.
     *
     */
    public function testCreateProjectAccessToken(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/access-token';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createProjectAccessToken not implemented');
    }

    /**
     * Test case for createTag
     *
     * Create a tag.
     *
     */
    public function testCreateTag(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/tag';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createTag not implemented');
    }

    /**
     * Test case for createValidation
     *
     * Add a validation to a visa.
     *
     */
    public function testCreateValidation(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{visa_pk}/validation';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{documentPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{visaPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createValidation not implemented');
    }

    /**
     * Test case for createVisa
     *
     * Create a visa.
     *
     */
    public function testCreateVisa(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{documentPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createVisa not implemented');
    }

    /**
     * Test case for createVisaComment
     *
     * Add a comment.
     *
     */
    public function testCreateVisaComment(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{visa_pk}/comment';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{documentPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{visaPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createVisaComment not implemented');
    }

    /**
     * Test case for deleteAllDocumentHistory
     *
     * Delete all document history.
     *
     */
    public function testDeleteAllDocumentHistory(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/history/delete';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{documentPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for deleteAllDocumentHistory not implemented');
    }

    /**
     * Test case for deleteClassification
     *
     * Delete a classification.
     *
     */
    public function testDeleteClassification(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/classification/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for deleteClassification not implemented');
    }

    /**
     * Test case for deleteCloud
     *
     * Delete a cloud.
     *
     */
    public function testDeleteCloud(): void
    {
        $client = self::$client;

        $path = '/cloud/{id}';
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for deleteCloud not implemented');
    }

    /**
     * Test case for deleteCloudUser
     *
     * Remove a user from a cloud.
     *
     */
    public function testDeleteCloudUser(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/user/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for deleteCloudUser not implemented');
    }

    /**
     * Test case for deleteDocument
     *
     * Delete the document.
     *
     */
    public function testDeleteDocument(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/document/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for deleteDocument not implemented');
    }

    /**
     * Test case for deleteDocumentTag
     *
     * Delete a tag from a document.
     *
     */
    public function testDeleteDocumentTag(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/tag/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{documentPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for deleteDocumentTag not implemented');
    }

    /**
     * Test case for deleteFolder
     *
     * Delete a folder.
     *
     */
    public function testDeleteFolder(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/folder/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for deleteFolder not implemented');
    }

    /**
     * Test case for deleteGroupMember
     *
     * Delete a user from a group.
     *
     */
    public function testDeleteGroupMember(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/group/{group_pk}/member/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{groupPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for deleteGroupMember not implemented');
    }

    /**
     * Test case for deleteManageGroup
     *
     * Delete a group.
     *
     */
    public function testDeleteManageGroup(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/group/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for deleteManageGroup not implemented');
    }

    /**
     * Test case for deleteProject
     *
     * Delete a project.
     *
     */
    public function testDeleteProject(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for deleteProject not implemented');
    }

    /**
     * Test case for deleteProjectAccessToken
     *
     * Delete a token.
     *
     */
    public function testDeleteProjectAccessToken(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/access-token/{token}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{token}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for deleteProjectAccessToken not implemented');
    }

    /**
     * Test case for deleteProjectUser
     *
     * Remove a user from a project.
     *
     */
    public function testDeleteProjectUser(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/user/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for deleteProjectUser not implemented');
    }

    /**
     * Test case for deleteTag
     *
     * Delete the tag.
     *
     */
    public function testDeleteTag(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/tag/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for deleteTag not implemented');
    }

    /**
     * Test case for deleteValidation
     *
     * Remove a validation.
     *
     */
    public function testDeleteValidation(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{visa_pk}/validation/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{documentPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{visaPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for deleteValidation not implemented');
    }

    /**
     * Test case for deleteVisa
     *
     * Remove a visa.
     *
     */
    public function testDeleteVisa(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{documentPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for deleteVisa not implemented');
    }

    /**
     * Test case for deleteVisaComment
     *
     * Remove a comment.
     *
     */
    public function testDeleteVisaComment(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{visa_pk}/comment/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{documentPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{visaPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for deleteVisaComment not implemented');
    }

    /**
     * Test case for denyUserInvitation
     *
     * Deny an invitation.
     *
     */
    public function testDenyUserInvitation(): void
    {
        $client = self::$client;

        $path = '/user/invitations/{id}/deny';
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path);
        $this->markTestSkipped('Test for denyUserInvitation not implemented');
    }

    /**
     * Test case for denyValidation
     *
     * Deny a validation.
     *
     */
    public function testDenyValidation(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{visa_pk}/validation/{id}/deny';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{documentPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{visaPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path);
        $this->markTestSkipped('Test for denyValidation not implemented');
    }

    /**
     * Test case for getClassification
     *
     * Retrieve a classification.
     *
     */
    public function testGetClassification(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/classification/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getClassification not implemented');
    }

    /**
     * Test case for getClassifications
     *
     * Retrieve all classifications.
     *
     */
    public function testGetClassifications(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/classification';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getClassifications not implemented');
    }

    /**
     * Test case for getCloud
     *
     * Retrieve one cloud.
     *
     */
    public function testGetCloud(): void
    {
        $client = self::$client;

        $path = '/cloud/{id}';
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getCloud not implemented');
    }

    /**
     * Test case for getCloudInvitations
     *
     * Retrieve all pending invitations in the cloud.
     *
     */
    public function testGetCloudInvitations(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/invitation';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getCloudInvitations not implemented');
    }

    /**
     * Test case for getCloudSize
     *
     * Get size of the cloud.
     *
     */
    public function testGetCloudSize(): void
    {
        $client = self::$client;

        $path = '/cloud/{id}/size';
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getCloudSize not implemented');
    }

    /**
     * Test case for getCloudUser
     *
     * Retrieve a user in a cloud.
     *
     */
    public function testGetCloudUser(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/user/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getCloudUser not implemented');
    }

    /**
     * Test case for getCloudUsers
     *
     * Retrieve all users in a cloud, or a list with a filter by email.
     *
     */
    public function testGetCloudUsers(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/user';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getCloudUsers not implemented');
    }

    /**
     * Test case for getClouds
     *
     * Retrieve all clouds.
     *
     */
    public function testGetClouds(): void
    {
        $client = self::$client;

        $path = '/cloud';

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getClouds not implemented');
    }

    /**
     * Test case for getDocument
     *
     * Retrieve a document.
     *
     */
    public function testGetDocument(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/document/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getDocument not implemented');
    }

    /**
     * Test case for getDocumentHistories
     *
     * Retrieve all document histories.
     *
     */
    public function testGetDocumentHistories(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/history';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{documentPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getDocumentHistories not implemented');
    }

    /**
     * Test case for getDocuments
     *
     * Retrieve all documents.
     *
     */
    public function testGetDocuments(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/document';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getDocuments not implemented');
    }

    /**
     * Test case for getFolder
     *
     * Retrieve a folder.
     *
     */
    public function testGetFolder(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/folder/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getFolder not implemented');
    }

    /**
     * Test case for getFolderProjectUsers
     *
     * Retrieve all users in a project with the permission on the folder.
     *
     */
    public function testGetFolderProjectUsers(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/folder/{folder_pk}/user';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{folderPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getFolderProjectUsers not implemented');
    }

    /**
     * Test case for getFolders
     *
     * Retrieve all folders.
     *
     */
    public function testGetFolders(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/folder';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getFolders not implemented');
    }

    /**
     * Test case for getGroup
     *
     * Retrieve a group.
     *
     */
    public function testGetGroup(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/me/group/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getGroup not implemented');
    }

    /**
     * Test case for getGroups
     *
     * Retrieve all groups.
     *
     */
    public function testGetGroups(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/me/group';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getGroups not implemented');
    }

    /**
     * Test case for getManageGroup
     *
     * Retrieve a group.
     *
     */
    public function testGetManageGroup(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/group/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getManageGroup not implemented');
    }

    /**
     * Test case for getManageGroups
     *
     * Retrieve all groups.
     *
     */
    public function testGetManageGroups(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/group';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getManageGroups not implemented');
    }

    /**
     * Test case for getProject
     *
     * Retrieve a project.
     *
     */
    public function testGetProject(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getProject not implemented');
    }

    /**
     * Test case for getProjectAccessToken
     *
     * Retrieve one token created for this project.
     *
     */
    public function testGetProjectAccessToken(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/access-token/{token}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{token}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getProjectAccessToken not implemented');
    }

    /**
     * Test case for getProjectAccessTokens
     *
     * Retrieve all tokens created for this project.
     *
     */
    public function testGetProjectAccessTokens(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/access-token';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getProjectAccessTokens not implemented');
    }

    /**
     * Test case for getProjectCreatorVisas
     *
     * List visas created by user.
     *
     */
    public function testGetProjectCreatorVisas(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/me/visa/creator';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getProjectCreatorVisas not implemented');
    }

    /**
     * Test case for getProjectDMSTree
     *
     * Retrieve the complete DMS tree.
     *
     */
    public function testGetProjectDMSTree(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{id}/dms-tree';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getProjectDMSTree not implemented');
    }

    /**
     * Test case for getProjectFolderTreeSerializers
     *
     * Retrieve folder tree for all projects.
     *
     */
    public function testGetProjectFolderTreeSerializers(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/folder-trees';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getProjectFolderTreeSerializers not implemented');
    }

    /**
     * Test case for getProjectInvitations
     *
     * Retrieve all pending invitations in the project.
     *
     */
    public function testGetProjectInvitations(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/invitation';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getProjectInvitations not implemented');
    }

    /**
     * Test case for getProjectSize
     *
     * Get size of all model files in the project.
     *
     */
    public function testGetProjectSize(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{id}/size';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getProjectSize not implemented');
    }

    /**
     * Test case for getProjectSubTree
     *
     * Retrieve the complete projects tree of the cloud.
     *
     */
    public function testGetProjectSubTree(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/subtree';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getProjectSubTree not implemented');
    }

    /**
     * Test case for getProjectTree
     *
     * Retrieve the complete DMS tree.
     *
     */
    public function testGetProjectTree(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{id}/tree';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getProjectTree not implemented');
    }

    /**
     * Test case for getProjectUsers
     *
     * Retrieve all users in a project, or a list with a filter by email.
     *
     */
    public function testGetProjectUsers(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/user';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getProjectUsers not implemented');
    }

    /**
     * Test case for getProjectValidatorVisas
     *
     * List visas where user is a validator.
     *
     */
    public function testGetProjectValidatorVisas(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/me/visa/validator';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getProjectValidatorVisas not implemented');
    }

    /**
     * Test case for getProjects
     *
     * Retrieve all projects.
     *
     */
    public function testGetProjects(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getProjects not implemented');
    }

    /**
     * Test case for getSelfProjects
     *
     * List current user's projects.
     *
     */
    public function testGetSelfProjects(): void
    {
        $client = self::$client;

        $path = '/user/projects';

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getSelfProjects not implemented');
    }

    /**
     * Test case for getSelfUser
     *
     * Get info about the current user.
     *
     */
    public function testGetSelfUser(): void
    {
        $client = self::$client;

        $path = '/user';

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getSelfUser not implemented');
    }

    /**
     * Test case for getTag
     *
     * Retrieve a tag.
     *
     */
    public function testGetTag(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/tag/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getTag not implemented');
    }

    /**
     * Test case for getTags
     *
     * Retrieve all tags.
     *
     */
    public function testGetTags(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/tag';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getTags not implemented');
    }

    /**
     * Test case for getUserInvitation
     *
     * Retrieve an invitation.
     *
     */
    public function testGetUserInvitation(): void
    {
        $client = self::$client;

        $path = '/user/invitations/{id}';
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getUserInvitation not implemented');
    }

    /**
     * Test case for getUserInvitations
     *
     * List user's invitations.
     *
     */
    public function testGetUserInvitations(): void
    {
        $client = self::$client;

        $path = '/user/invitations';

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getUserInvitations not implemented');
    }

    /**
     * Test case for getValidation
     *
     * Retrieve a validation to a visa.
     *
     */
    public function testGetValidation(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{visa_pk}/validation/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{documentPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{visaPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getValidation not implemented');
    }

    /**
     * Test case for getValidations
     *
     * List all validations to a visa.
     *
     */
    public function testGetValidations(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{visa_pk}/validation';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{documentPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{visaPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getValidations not implemented');
    }

    /**
     * Test case for getVisa
     *
     * Retrieve a visa of a document.
     *
     */
    public function testGetVisa(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{documentPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getVisa not implemented');
    }

    /**
     * Test case for getVisaComment
     *
     * Retrieve a comment.
     *
     */
    public function testGetVisaComment(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{visa_pk}/comment/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{documentPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{visaPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getVisaComment not implemented');
    }

    /**
     * Test case for getVisaComments
     *
     * List all comment of a visa.
     *
     */
    public function testGetVisaComments(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{visa_pk}/comment';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{documentPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{visaPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getVisaComments not implemented');
    }

    /**
     * Test case for getVisas
     *
     * List all visas of a document.
     *
     */
    public function testGetVisas(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{documentPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getVisas not implemented');
    }

    /**
     * Test case for inviteCloudUser
     *
     * Invite a cloud administrator.
     *
     */
    public function testInviteCloudUser(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/invitation';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for inviteCloudUser not implemented');
    }

    /**
     * Test case for inviteProjectUser
     *
     * Invite a project member.
     *
     */
    public function testInviteProjectUser(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/invitation';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for inviteProjectUser not implemented');
    }

    /**
     * Test case for leaveProject
     *
     * Leave the project.
     *
     */
    public function testLeaveProject(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{id}/leave';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path);
        $this->markTestSkipped('Test for leaveProject not implemented');
    }

    /**
     * Test case for leaveVersionDocumentHistory
     *
     * Leave the history version.
     *
     */
    public function testLeaveVersionDocumentHistory(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/history/{id}/leave';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{documentPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path);
        $this->markTestSkipped('Test for leaveVersionDocumentHistory not implemented');
    }

    /**
     * Test case for makeHeadVersionDocumentHistory
     *
     * Make the head of the version.
     *
     */
    public function testMakeHeadVersionDocumentHistory(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/history/{id}/head-version';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{documentPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path);
        $this->markTestSkipped('Test for makeHeadVersionDocumentHistory not implemented');
    }

    /**
     * Test case for pauseVisa
     *
     * Pause a visa of a document.
     *
     */
    public function testPauseVisa(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{id}/pause';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{documentPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path);
        $this->markTestSkipped('Test for pauseVisa not implemented');
    }

    /**
     * Test case for resetValidation
     *
     * Reset a validation.
     *
     */
    public function testResetValidation(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{visa_pk}/validation/{id}/reset';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{documentPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{visaPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path);
        $this->markTestSkipped('Test for resetValidation not implemented');
    }

    /**
     * Test case for resumeVisa
     *
     * Resume a visa of a document.
     *
     */
    public function testResumeVisa(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{id}/resume';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{documentPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path);
        $this->markTestSkipped('Test for resumeVisa not implemented');
    }

    /**
     * Test case for updateClassification
     *
     * Update some fields of a classification.
     *
     */
    public function testUpdateClassification(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/classification/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateClassification not implemented');
    }

    /**
     * Test case for updateCloud
     *
     * Update some fields of a cloud.
     *
     */
    public function testUpdateCloud(): void
    {
        $client = self::$client;

        $path = '/cloud/{id}';
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateCloud not implemented');
    }

    /**
     * Test case for updateCloudUser
     *
     * Change the user role in the cloud.
     *
     */
    public function testUpdateCloudUser(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/user/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateCloudUser not implemented');
    }

    /**
     * Test case for updateDocument
     *
     * Update some fields of the document.
     *
     */
    public function testUpdateDocument(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/document/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateDocument not implemented');
    }

    /**
     * Test case for updateFolder
     *
     * Update some fields of a folder.
     *
     */
    public function testUpdateFolder(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/folder/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateFolder not implemented');
    }

    /**
     * Test case for updateGroupFolder
     *
     * Update the permission of a group on a folder.
     *
     */
    public function testUpdateGroupFolder(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/folder/{folder_pk}/group/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{folderPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateGroupFolder not implemented');
    }

    /**
     * Test case for updateManageGroup
     *
     * Update some fields of a group.
     *
     */
    public function testUpdateManageGroup(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/group/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateManageGroup not implemented');
    }

    /**
     * Test case for updateProject
     *
     * Update some fields of a project.
     *
     */
    public function testUpdateProject(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateProject not implemented');
    }

    /**
     * Test case for updateProjectAccessToken
     *
     * Update some fields of a token.
     *
     */
    public function testUpdateProjectAccessToken(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/access-token/{token}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{token}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateProjectAccessToken not implemented');
    }

    /**
     * Test case for updateProjectUser
     *
     * Change the user role in the cloud.
     *
     */
    public function testUpdateProjectUser(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/user/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateProjectUser not implemented');
    }

    /**
     * Test case for updateTag
     *
     * Update some fields of the tag.
     *
     */
    public function testUpdateTag(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/tag/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateTag not implemented');
    }

    /**
     * Test case for updateValidation
     *
     * Update the validator of validation.
     *
     */
    public function testUpdateValidation(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{visa_pk}/validation/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{documentPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{visaPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateValidation not implemented');
    }

    /**
     * Test case for updateVisa
     *
     * Update some fields of a visa.
     *
     */
    public function testUpdateVisa(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{documentPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateVisa not implemented');
    }

    /**
     * Test case for updateVisaComment
     *
     * Update some fields of a comment.
     *
     */
    public function testUpdateVisaComment(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{visa_pk}/comment/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{documentPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{visaPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateVisaComment not implemented');
    }

    /**
     * @param string $regexp
     * @return mixed
     */
    protected function genTestData(string $regexp)
    {
        $grammar  = new \Hoa\File\Read('hoa://Library/Regex/Grammar.pp');
        $compiler = \Hoa\Compiler\Llk\Llk::load($grammar);
        $ast      = $compiler->parse($regexp);
        $generator = new \Hoa\Regex\Visitor\Isotropic(new \Hoa\Math\Sampler\Random());

        return $generator->visit($ast);
    }
}
