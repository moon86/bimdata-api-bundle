<?php
/**
 * ModelApiInterfaceTest
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Api
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * BIMData API
 *
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1 (v1)
 * Contact: support@bimdata.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Server\Tests\Api;

use Symfony\Bundle\FrameworkBundle\KernelBrowser;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;

/**
 * ModelApiInterfaceTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Api
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 * @coversDefaultClass \OpenAPI\Server\Api\ModelApiInterface
 */
class ModelApiInterfaceTest extends WebTestCase
{
    private static ?KernelBrowser $client = null;

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
        if (null === self::$client) {
            self::$client = static::createClient();
        }
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
        static::ensureKernelShutdown();
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for addModelErrors
     *
     * Add errors to model.
     *
     */
    public function testAddModelErrors(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{id}/errors';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for addModelErrors not implemented');
    }

    /**
     * Test case for bulkDeleteModelClassifications
     *
     * Remove all classifications from model's elements.
     *
     */
    public function testBulkDeleteModelClassifications(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/classification/list_destroy';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for bulkDeleteModelClassifications not implemented');
    }

    /**
     * Test case for bulkDeleteModelProperties
     *
     * Delete many Property of a model.
     *
     */
    public function testBulkDeleteModelProperties(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/property/bulk_destroy';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for bulkDeleteModelProperties not implemented');
    }

    /**
     * Test case for bulkDeleteModelPropertyDefinitions
     *
     * Delete many PropertyDefinitions of a model.
     *
     */
    public function testBulkDeleteModelPropertyDefinitions(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/propertydefinition/bulk_destroy';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for bulkDeleteModelPropertyDefinitions not implemented');
    }

    /**
     * Test case for bulkDeleteModelUnits
     *
     * Delete many Units of a model.
     *
     */
    public function testBulkDeleteModelUnits(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/unit/bulk_destroy';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for bulkDeleteModelUnits not implemented');
    }

    /**
     * Test case for bulkDeletePropertySet
     *
     * Delete many PropertySet of a model.
     *
     */
    public function testBulkDeletePropertySet(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/propertyset/bulk_destroy';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for bulkDeletePropertySet not implemented');
    }

    /**
     * Test case for bulkFullUpdateElements
     *
     * Update many elements at once (only changing fields may be defined).
     *
     */
    public function testBulkFullUpdateElements(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/bulk_update';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for bulkFullUpdateElements not implemented');
    }

    /**
     * Test case for bulkFullUpdateModelProperty
     *
     * Update some fields of many properties of a model.
     *
     */
    public function testBulkFullUpdateModelProperty(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/property/bulk_update';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for bulkFullUpdateModelProperty not implemented');
    }

    /**
     * Test case for bulkRemoveClassificationsOfElement
     *
     * Remove many classifications from an element.
     *
     */
    public function testBulkRemoveClassificationsOfElement(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/classification/bulk_destroy';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{elementUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for bulkRemoveClassificationsOfElement not implemented');
    }

    /**
     * Test case for bulkRemoveDocumentsOfElement
     *
     * Remove many documents from an element.
     *
     */
    public function testBulkRemoveDocumentsOfElement(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/documents/bulk_destroy';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{elementUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for bulkRemoveDocumentsOfElement not implemented');
    }

    /**
     * Test case for bulkRemoveElementsFromClassification
     *
     * Remove the classifications from all elements.
     *
     */
    public function testBulkRemoveElementsFromClassification(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/classification/{model_classification_pk}/element/bulk_destroy';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelClassificationPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for bulkRemoveElementsFromClassification not implemented');
    }

    /**
     * Test case for bulkUpdateElements
     *
     * Update many elements at once (all field must be defined).
     *
     */
    public function testBulkUpdateElements(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/bulk_update';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PUT', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for bulkUpdateElements not implemented');
    }

    /**
     * Test case for bulkUpdateModelProperty
     *
     * Update all fields of many properties of a model.
     *
     */
    public function testBulkUpdateModelProperty(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/property/bulk_update';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PUT', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for bulkUpdateModelProperty not implemented');
    }

    /**
     * Test case for createAccessToken
     *
     * Create a token for this model.
     *
     */
    public function testCreateAccessToken(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/access_token';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createAccessToken not implemented');
    }

    /**
     * Test case for createBuilding
     *
     * Create a building of a model.
     *
     */
    public function testCreateBuilding(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/building';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createBuilding not implemented');
    }

    /**
     * Test case for createBuildingPlan
     *
     * Create a relation between a 2d model and a building.
     *
     */
    public function testCreateBuildingPlan(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/building/{building_uuid}/plan/add';
        $pattern = '{buildingUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createBuildingPlan not implemented');
    }

    /**
     * Test case for createClassificationElementRelations
     *
     * Create association between existing classification and existing element.
     *
     */
    public function testCreateClassificationElementRelations(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/classification-element';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createClassificationElementRelations not implemented');
    }

    /**
     * Test case for createClassificationsOfElement
     *
     * Create one or many classifications to an element.
     *
     */
    public function testCreateClassificationsOfElement(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/classification';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{elementUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createClassificationsOfElement not implemented');
    }

    /**
     * Test case for createElement
     *
     * Create an element in the model.
     *
     */
    public function testCreateElement(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createElement not implemented');
    }

    /**
     * Test case for createElementPropertySet
     *
     * Create a PropertySets to an element.
     *
     */
    public function testCreateElementPropertySet(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/propertyset';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{elementUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createElementPropertySet not implemented');
    }

    /**
     * Test case for createElementPropertySetProperty
     *
     * Create a property to a PropertySet.
     *
     */
    public function testCreateElementPropertySetProperty(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{elementUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{propertysetPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createElementPropertySetProperty not implemented');
    }

    /**
     * Test case for createElementPropertySetPropertyDefinition
     *
     * Create a Definition to a Property.
     *
     */
    public function testCreateElementPropertySetPropertyDefinition(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{elementUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{propertyPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{propertysetPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createElementPropertySetPropertyDefinition not implemented');
    }

    /**
     * Test case for createElementPropertySetPropertyDefinitionUnit
     *
     * Create a Unit to a Definition.
     *
     */
    public function testCreateElementPropertySetPropertyDefinitionUnit(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{propertydefinition_pk}/unit';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{elementUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{propertyPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{propertydefinitionPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{propertysetPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createElementPropertySetPropertyDefinitionUnit not implemented');
    }

    /**
     * Test case for createLayer
     *
     * Create a layer in the model.
     *
     */
    public function testCreateLayer(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/layer';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createLayer not implemented');
    }

    /**
     * Test case for createMetaBuilding
     *
     * Create an empty 3D Model.
     *
     */
    public function testCreateMetaBuilding(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/create-metabuilding';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createMetaBuilding not implemented');
    }

    /**
     * Test case for createModel
     *
     * Make a PDF or Image file a Model.
     *
     */
    public function testCreateModel(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/create-model';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createModel not implemented');
    }

    /**
     * Test case for createModelPropertyDefinition
     *
     * Create a PropertyDefinition on the model.
     *
     */
    public function testCreateModelPropertyDefinition(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/propertydefinition';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createModelPropertyDefinition not implemented');
    }

    /**
     * Test case for createModelUnit
     *
     * Create a Unit on a model.
     *
     */
    public function testCreateModelUnit(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/unit';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createModelUnit not implemented');
    }

    /**
     * Test case for createPropertySet
     *
     * Create one or many PropertySet.
     *
     */
    public function testCreatePropertySet(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/propertyset';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createPropertySet not implemented');
    }

    /**
     * Test case for createPropertySetElementRelations
     *
     * Create association between PropertySet and element.
     *
     */
    public function testCreatePropertySetElementRelations(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/propertyset-element';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createPropertySetElementRelations not implemented');
    }

    /**
     * Test case for createRawElements
     *
     * Create elements in an optimized format.
     *
     */
    public function testCreateRawElements(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/raw';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createRawElements not implemented');
    }

    /**
     * Test case for createSpace
     *
     * Create a space in the model.
     *
     */
    public function testCreateSpace(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/space';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createSpace not implemented');
    }

    /**
     * Test case for createStorey
     *
     * Create a storey of a model.
     *
     */
    public function testCreateStorey(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/storey';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createStorey not implemented');
    }

    /**
     * Test case for createStoreyPlan
     *
     * Create a relation between a 2d model and a storey.
     *
     */
    public function testCreateStoreyPlan(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/storey/{storey_uuid}/plan/add';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{storeyUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createStoreyPlan not implemented');
    }

    /**
     * Test case for createSystem
     *
     * Create a system in the model.
     *
     */
    public function testCreateSystem(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/system';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createSystem not implemented');
    }

    /**
     * Test case for createTileset
     *
     * Create the tileset of the model and upload all files.
     *
     */
    public function testCreateTileset(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{id}/tileset';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path);
        $this->markTestSkipped('Test for createTileset not implemented');
    }

    /**
     * Test case for createZone
     *
     * Create a zone in the model.
     *
     */
    public function testCreateZone(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/zone';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createZone not implemented');
    }

    /**
     * Test case for createZoneSpace
     *
     * Create a space in a zone.
     *
     */
    public function testCreateZoneSpace(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/zone/{zone_pk}/space';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{zonePk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createZoneSpace not implemented');
    }

    /**
     * Test case for deleteAccessToken
     *
     * Delete a token.
     *
     */
    public function testDeleteAccessToken(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/access_token/{token}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{token}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for deleteAccessToken not implemented');
    }

    /**
     * Test case for deleteBuilding
     *
     * Delete a building of a model.
     *
     */
    public function testDeleteBuilding(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/building/{uuid}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{uuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for deleteBuilding not implemented');
    }

    /**
     * Test case for deleteBuildingPlan
     *
     * Delete the relation between a 2d model and a building.
     *
     */
    public function testDeleteBuildingPlan(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/building/{building_uuid}/plan/{id}';
        $pattern = '{buildingUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for deleteBuildingPlan not implemented');
    }

    /**
     * Test case for deleteElement
     *
     * Delete an element of a model.
     *
     */
    public function testDeleteElement(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{uuid}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{uuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for deleteElement not implemented');
    }

    /**
     * Test case for deleteLayer
     *
     * Delete a layer of a model.
     *
     */
    public function testDeleteLayer(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/layer/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for deleteLayer not implemented');
    }

    /**
     * Test case for deleteModel
     *
     * Delete a model.
     *
     */
    public function testDeleteModel(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for deleteModel not implemented');
    }

    /**
     * Test case for deleteModelProperty
     *
     * Delete a Property of a model.
     *
     */
    public function testDeleteModelProperty(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/property/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for deleteModelProperty not implemented');
    }

    /**
     * Test case for deleteModelPropertyDefinition
     *
     * Delete a PropertyDefinitions of a model.
     *
     */
    public function testDeleteModelPropertyDefinition(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/propertydefinition/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for deleteModelPropertyDefinition not implemented');
    }

    /**
     * Test case for deleteModelUnit
     *
     * Delete a Unit of a model.
     *
     */
    public function testDeleteModelUnit(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/unit/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for deleteModelUnit not implemented');
    }

    /**
     * Test case for deleteModelWithoutDoc
     *
     * Delete the Model without deleting the related document.
     *
     */
    public function testDeleteModelWithoutDoc(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{id}/delete-model';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for deleteModelWithoutDoc not implemented');
    }

    /**
     * Test case for deletePropertySet
     *
     * Delete a PropertySet of a model.
     *
     */
    public function testDeletePropertySet(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/propertyset/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for deletePropertySet not implemented');
    }

    /**
     * Test case for deleteSpace
     *
     * Delete a space.
     *
     */
    public function testDeleteSpace(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/space/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for deleteSpace not implemented');
    }

    /**
     * Test case for deleteStorey
     *
     * Delete a storey of a model.
     *
     */
    public function testDeleteStorey(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/storey/{uuid}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{uuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for deleteStorey not implemented');
    }

    /**
     * Test case for deleteStoreyPlan
     *
     * Delete the relation between a 2d model and a storey.
     *
     */
    public function testDeleteStoreyPlan(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/storey/{storey_uuid}/plan/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{storeyUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for deleteStoreyPlan not implemented');
    }

    /**
     * Test case for deleteSystem
     *
     * Delete a system of a model.
     *
     */
    public function testDeleteSystem(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/system/{uuid}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{uuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for deleteSystem not implemented');
    }

    /**
     * Test case for deleteZone
     *
     * Delete a zone of a model.
     *
     */
    public function testDeleteZone(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/zone/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for deleteZone not implemented');
    }

    /**
     * Test case for deleteZoneSpace
     *
     * Delete a space of a zone.
     *
     */
    public function testDeleteZoneSpace(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/zone/{zone_pk}/space/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{zonePk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for deleteZoneSpace not implemented');
    }

    /**
     * Test case for exportIfc
     *
     * Export IFC.
     *
     */
    public function testExportIfc(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{id}/export';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for exportIfc not implemented');
    }

    /**
     * Test case for fullUpdateElement
     *
     * Update all fields of an element.
     *
     */
    public function testFullUpdateElement(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{uuid}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{uuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PUT', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for fullUpdateElement not implemented');
    }

    /**
     * Test case for getAccessToken
     *
     * Retrieve one token created for this model.
     *
     */
    public function testGetAccessToken(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/access_token/{token}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{token}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getAccessToken not implemented');
    }

    /**
     * Test case for getAccessTokens
     *
     * Retrieve all tokens created for this model.
     *
     */
    public function testGetAccessTokens(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/access_token';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getAccessTokens not implemented');
    }

    /**
     * Test case for getBuilding
     *
     * Retrieve a building of a model.
     *
     */
    public function testGetBuilding(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/building/{uuid}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{uuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getBuilding not implemented');
    }

    /**
     * Test case for getBuildingPlanPositioning
     *
     * Retrieve the postioning of the plan in the building.
     *
     */
    public function testGetBuildingPlanPositioning(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/building/{building_uuid}/plan/{id}/positioning';
        $pattern = '{buildingUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getBuildingPlanPositioning not implemented');
    }

    /**
     * Test case for getBuildings
     *
     * Retrieve all buildings of a model.
     *
     */
    public function testGetBuildings(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/building';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getBuildings not implemented');
    }

    /**
     * Test case for getClassificationsOfElement
     *
     * Retrieve all classifications of an element.
     *
     */
    public function testGetClassificationsOfElement(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/classification';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{elementUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getClassificationsOfElement not implemented');
    }

    /**
     * Test case for getDocumentsOfElement
     *
     * Retrieve all documents of an element.
     *
     */
    public function testGetDocumentsOfElement(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/documents';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{elementUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getDocumentsOfElement not implemented');
    }

    /**
     * Test case for getElement
     *
     * Retrieve an element of a model.
     *
     */
    public function testGetElement(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{uuid}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{uuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getElement not implemented');
    }

    /**
     * Test case for getElementLinkedDocuments
     *
     * Retrieve all documents linked to any element.
     *
     */
    public function testGetElementLinkedDocuments(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/documents';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getElementLinkedDocuments not implemented');
    }

    /**
     * Test case for getElementPropertySet
     *
     * Retrieve a PropertySet of an element.
     *
     */
    public function testGetElementPropertySet(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/propertyset/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{elementUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getElementPropertySet not implemented');
    }

    /**
     * Test case for getElementPropertySetProperties
     *
     * Retrieve all Properties of a PropertySet.
     *
     */
    public function testGetElementPropertySetProperties(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{elementUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{propertysetPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getElementPropertySetProperties not implemented');
    }

    /**
     * Test case for getElementPropertySetProperty
     *
     * Retrieve a Property of a PropertySet.
     *
     */
    public function testGetElementPropertySetProperty(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{elementUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{propertysetPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getElementPropertySetProperty not implemented');
    }

    /**
     * Test case for getElementPropertySetPropertyDefinition
     *
     * Retrieve a Definition of a Property.
     *
     */
    public function testGetElementPropertySetPropertyDefinition(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{elementUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{propertyPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{propertysetPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getElementPropertySetPropertyDefinition not implemented');
    }

    /**
     * Test case for getElementPropertySetPropertyDefinitionUnit
     *
     * Retrieve a Unit of a Definition.
     *
     */
    public function testGetElementPropertySetPropertyDefinitionUnit(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{propertydefinition_pk}/unit/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{elementUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{propertyPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{propertydefinitionPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{propertysetPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getElementPropertySetPropertyDefinitionUnit not implemented');
    }

    /**
     * Test case for getElementPropertySetPropertyDefinitionUnits
     *
     * Retrieve all Units of a Definition.
     *
     */
    public function testGetElementPropertySetPropertyDefinitionUnits(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{propertydefinition_pk}/unit';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{elementUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{propertyPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{propertydefinitionPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{propertysetPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getElementPropertySetPropertyDefinitionUnits not implemented');
    }

    /**
     * Test case for getElementPropertySetPropertyDefinitions
     *
     * Retrieve all Definitions of a PropertySet.
     *
     */
    public function testGetElementPropertySetPropertyDefinitions(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{elementUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{propertyPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{propertysetPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getElementPropertySetPropertyDefinitions not implemented');
    }

    /**
     * Test case for getElementPropertySets
     *
     * Retrieve all PropertySets of an element.
     *
     */
    public function testGetElementPropertySets(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/propertyset';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{elementUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getElementPropertySets not implemented');
    }

    /**
     * Test case for getElements
     *
     * Retrieve all elements of a model.
     *
     */
    public function testGetElements(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getElements not implemented');
    }

    /**
     * Test case for getElementsFromClassification
     *
     * Retrieve all elements with the classification.
     *
     */
    public function testGetElementsFromClassification(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/classification/{model_classification_pk}/element';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelClassificationPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getElementsFromClassification not implemented');
    }

    /**
     * Test case for getLayer
     *
     * Retrieve a layer of a model.
     *
     */
    public function testGetLayer(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/layer/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getLayer not implemented');
    }

    /**
     * Test case for getLayers
     *
     * Retrieve all layers of a model.
     *
     */
    public function testGetLayers(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/layer';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getLayers not implemented');
    }

    /**
     * Test case for getMaterial
     *
     * Retrieve a material of a model.
     *
     */
    public function testGetMaterial(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/material/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{elementUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getMaterial not implemented');
    }

    /**
     * Test case for getMaterials
     *
     * Retrieve all materials of a model.
     *
     */
    public function testGetMaterials(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/material';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{elementUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getMaterials not implemented');
    }

    /**
     * Test case for getModel
     *
     * Retrieve one model.
     *
     */
    public function testGetModel(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getModel not implemented');
    }

    /**
     * Test case for getModelClassifications
     *
     * Retrieve all classifications in a model.
     *
     */
    public function testGetModelClassifications(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/classification';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getModelClassifications not implemented');
    }

    /**
     * Test case for getModelMaterial
     *
     * Retrieve a material of a model.
     *
     */
    public function testGetModelMaterial(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/material/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getModelMaterial not implemented');
    }

    /**
     * Test case for getModelMaterials
     *
     * Retrieve all materials of a model.
     *
     */
    public function testGetModelMaterials(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/material';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getModelMaterials not implemented');
    }

    /**
     * Test case for getModelProperties
     *
     * Retrieve all Properties of a model.
     *
     */
    public function testGetModelProperties(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/property';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getModelProperties not implemented');
    }

    /**
     * Test case for getModelProperty
     *
     * Retrieve a Property of a model.
     *
     */
    public function testGetModelProperty(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/property/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getModelProperty not implemented');
    }

    /**
     * Test case for getModelPropertyDefinition
     *
     * Retrieve a PropertyDefinition of a model.
     *
     */
    public function testGetModelPropertyDefinition(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/propertydefinition/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getModelPropertyDefinition not implemented');
    }

    /**
     * Test case for getModelPropertyDefinitions
     *
     * Retrieve all PropertyDefinitions of a model.
     *
     */
    public function testGetModelPropertyDefinitions(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/propertydefinition';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getModelPropertyDefinitions not implemented');
    }

    /**
     * Test case for getModelUnit
     *
     * Retrieve a Unit of a model.
     *
     */
    public function testGetModelUnit(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/unit/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getModelUnit not implemented');
    }

    /**
     * Test case for getModelUnits
     *
     * Retrieve all Units of a model.
     *
     */
    public function testGetModelUnits(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/unit';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getModelUnits not implemented');
    }

    /**
     * Test case for getModels
     *
     * Retrieve all models.
     *
     */
    public function testGetModels(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getModels not implemented');
    }

    /**
     * Test case for getProcessorHandler
     *
     * Retrieve a processor handler.
     *
     */
    public function testGetProcessorHandler(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/processorhandler/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getProcessorHandler not implemented');
    }

    /**
     * Test case for getProcessorHandlers
     *
     * Get all processor handlers.
     *
     */
    public function testGetProcessorHandlers(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/processorhandler';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getProcessorHandlers not implemented');
    }

    /**
     * Test case for getPropertySet
     *
     * Retrieve a PropertySet of a model.
     *
     */
    public function testGetPropertySet(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/propertyset/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getPropertySet not implemented');
    }

    /**
     * Test case for getPropertySets
     *
     * Retrieve all PropertySets of a model.
     *
     */
    public function testGetPropertySets(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/propertyset';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getPropertySets not implemented');
    }

    /**
     * Test case for getRawElements
     *
     * Retrieve all elements in a optimized format.
     *
     */
    public function testGetRawElements(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/raw';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getRawElements not implemented');
    }

    /**
     * Test case for getSimpleElement
     *
     * Retrieve an element of a model with a simple value representation.
     *
     */
    public function testGetSimpleElement(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{uuid}/simple';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{uuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getSimpleElement not implemented');
    }

    /**
     * Test case for getSimpleElements
     *
     * Retrieve all elements of a model with a simple value representation.
     *
     */
    public function testGetSimpleElements(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/simple';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getSimpleElements not implemented');
    }

    /**
     * Test case for getSpace
     *
     * Retrieve one space of the model.
     *
     */
    public function testGetSpace(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/space/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getSpace not implemented');
    }

    /**
     * Test case for getSpaces
     *
     * Retrieve all spaces of the model.
     *
     */
    public function testGetSpaces(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/space';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getSpaces not implemented');
    }

    /**
     * Test case for getStorey
     *
     * Retrieve a storey of a model.
     *
     */
    public function testGetStorey(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/storey/{uuid}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{uuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getStorey not implemented');
    }

    /**
     * Test case for getStoreyPlanPositioning
     *
     * Retrieve the postioning of the plan in the storey.
     *
     */
    public function testGetStoreyPlanPositioning(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/storey/{storey_uuid}/plan/{id}/positioning';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{storeyUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getStoreyPlanPositioning not implemented');
    }

    /**
     * Test case for getStoreys
     *
     * Retrieve all storeys of a model.
     *
     */
    public function testGetStoreys(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/storey';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getStoreys not implemented');
    }

    /**
     * Test case for getSystem
     *
     * Retrieve a system of a model.
     *
     */
    public function testGetSystem(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/system/{uuid}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{uuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getSystem not implemented');
    }

    /**
     * Test case for getSystems
     *
     * Retrieve all systems of a model.
     *
     */
    public function testGetSystems(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/system';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getSystems not implemented');
    }

    /**
     * Test case for getTileset
     *
     * Retrieve the tileset of the model.
     *
     */
    public function testGetTileset(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{id}/tileset';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getTileset not implemented');
    }

    /**
     * Test case for getZone
     *
     * Retrieve one zone of a model.
     *
     */
    public function testGetZone(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/zone/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getZone not implemented');
    }

    /**
     * Test case for getZoneSpace
     *
     * Retrieve one space of a zone.
     *
     */
    public function testGetZoneSpace(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/zone/{zone_pk}/space/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{zonePk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getZoneSpace not implemented');
    }

    /**
     * Test case for getZoneSpaces
     *
     * Retrieve all spaces of a zone.
     *
     */
    public function testGetZoneSpaces(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/zone/{zone_pk}/space';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{zonePk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getZoneSpaces not implemented');
    }

    /**
     * Test case for getZones
     *
     * Retrieve zones of a model.
     *
     */
    public function testGetZones(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/zone';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getZones not implemented');
    }

    /**
     * Test case for linkDocumentsOfElement
     *
     * Link one or many documents to an element.
     *
     */
    public function testLinkDocumentsOfElement(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/documents';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{elementUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for linkDocumentsOfElement not implemented');
    }

    /**
     * Test case for listClassificationElementRelations
     *
     * List all associations between classifications and elements.
     *
     */
    public function testListClassificationElementRelations(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/classification-element';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for listClassificationElementRelations not implemented');
    }

    /**
     * Test case for mergeIfcs
     *
     * Merge IFC files.
     *
     */
    public function testMergeIfcs(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/merge';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for mergeIfcs not implemented');
    }

    /**
     * Test case for optimizeIfc
     *
     * Optimize the IFC.
     *
     */
    public function testOptimizeIfc(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{id}/optimize';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for optimizeIfc not implemented');
    }

    /**
     * Test case for removeAllElementPropertySet
     *
     * Remove all property sets from element.
     *
     */
    public function testRemoveAllElementPropertySet(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/propertyset/all';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{elementUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for removeAllElementPropertySet not implemented');
    }

    /**
     * Test case for removeClassificationOfElement
     *
     * Remove a classification from an element.
     *
     */
    public function testRemoveClassificationOfElement(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/classification/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{elementUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for removeClassificationOfElement not implemented');
    }

    /**
     * Test case for removeDocumentOfElement
     *
     * Remove a documents from an element.
     *
     */
    public function testRemoveDocumentOfElement(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/documents/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{elementUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for removeDocumentOfElement not implemented');
    }

    /**
     * Test case for removeElementPropertySet
     *
     * Remove a PropertySet from an element.
     *
     */
    public function testRemoveElementPropertySet(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/propertyset/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{elementUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for removeElementPropertySet not implemented');
    }

    /**
     * Test case for removeElementPropertySetProperty
     *
     * Remove a property from a PropertySet.
     *
     */
    public function testRemoveElementPropertySetProperty(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{elementUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{propertysetPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for removeElementPropertySetProperty not implemented');
    }

    /**
     * Test case for removeElementPropertySetPropertyDefinition
     *
     * Delete a Definition to a Property.
     *
     */
    public function testRemoveElementPropertySetPropertyDefinition(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{elementUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{propertyPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{propertysetPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for removeElementPropertySetPropertyDefinition not implemented');
    }

    /**
     * Test case for removeElementPropertySetPropertyDefinitionUnit
     *
     * Remove a Unit from a Definition.
     *
     */
    public function testRemoveElementPropertySetPropertyDefinitionUnit(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{propertydefinition_pk}/unit/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{elementUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{propertyPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{propertydefinitionPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{propertysetPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for removeElementPropertySetPropertyDefinitionUnit not implemented');
    }

    /**
     * Test case for removeElementsFromClassification
     *
     * Remove the classification from all elements.
     *
     */
    public function testRemoveElementsFromClassification(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/classification/{model_classification_pk}/element/{uuid}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelClassificationPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{uuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for removeElementsFromClassification not implemented');
    }

    /**
     * Test case for reprocessModel
     *
     * Reprocess Model file.
     *
     */
    public function testReprocessModel(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{id}/reprocess';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path);
        $this->markTestSkipped('Test for reprocessModel not implemented');
    }

    /**
     * Test case for updateAccessToken
     *
     * Update some fields of a token.
     *
     */
    public function testUpdateAccessToken(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/access_token/{token}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{token}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateAccessToken not implemented');
    }

    /**
     * Test case for updateBuilding
     *
     * Update some fields of a building.
     *
     */
    public function testUpdateBuilding(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/building/{uuid}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{uuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateBuilding not implemented');
    }

    /**
     * Test case for updateBuildingPlanPositioning
     *
     * Update the postioning of the plan in the building.
     *
     */
    public function testUpdateBuildingPlanPositioning(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/building/{building_uuid}/plan/{id}/positioning';
        $pattern = '{buildingUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateBuildingPlanPositioning not implemented');
    }

    /**
     * Test case for updateElement
     *
     * Update some fields of an element.
     *
     */
    public function testUpdateElement(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{uuid}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{uuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateElement not implemented');
    }

    /**
     * Test case for updateElementPropertySetProperty
     *
     * Update a property from an element.
     *
     */
    public function testUpdateElementPropertySetProperty(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{elementUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{propertysetPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateElementPropertySetProperty not implemented');
    }

    /**
     * Test case for updateLayer
     *
     * Update some fields of a layer.
     *
     */
    public function testUpdateLayer(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/layer/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateLayer not implemented');
    }

    /**
     * Test case for updateModel
     *
     * Update some fields of a model.
     *
     */
    public function testUpdateModel(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateModel not implemented');
    }

    /**
     * Test case for updateModelFiles
     *
     * Update models file (gltf, svg, structure, etc).
     *
     */
    public function testUpdateModelFiles(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{id}/files';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path);
        $this->markTestSkipped('Test for updateModelFiles not implemented');
    }

    /**
     * Test case for updateModelProperty
     *
     * Update some fields of a Property.
     *
     */
    public function testUpdateModelProperty(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/property/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateModelProperty not implemented');
    }

    /**
     * Test case for updateModelPropertyDefinition
     *
     * Update some fields of many PropertyDefinitions of a model.
     *
     */
    public function testUpdateModelPropertyDefinition(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/propertydefinition/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateModelPropertyDefinition not implemented');
    }

    /**
     * Test case for updateModelUnit
     *
     * Update some fields of a Unit of a model.
     *
     */
    public function testUpdateModelUnit(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/unit/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateModelUnit not implemented');
    }

    /**
     * Test case for updateOrderBuildingPlan
     *
     * Update order of all plan of a building.
     *
     */
    public function testUpdateOrderBuildingPlan(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/building/{building_uuid}/plan/order';
        $pattern = '{buildingUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateOrderBuildingPlan not implemented');
    }

    /**
     * Test case for updateOrderStoreyPlan
     *
     * Update order of all plan of a storey.
     *
     */
    public function testUpdateOrderStoreyPlan(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/storey/{storey_uuid}/plan/order';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{storeyUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateOrderStoreyPlan not implemented');
    }

    /**
     * Test case for updateOrderStoreys
     *
     * Update order of all storey of a model.
     *
     */
    public function testUpdateOrderStoreys(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/storey/order';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateOrderStoreys not implemented');
    }

    /**
     * Test case for updateProcessorHandler
     *
     * Update the status of a processor handler.
     *
     */
    public function testUpdateProcessorHandler(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/processorhandler/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateProcessorHandler not implemented');
    }

    /**
     * Test case for updatePropertySet
     *
     * Update some fields of a PropertySet.
     *
     */
    public function testUpdatePropertySet(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/propertyset/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updatePropertySet not implemented');
    }

    /**
     * Test case for updateSpace
     *
     * Update some fields of a space.
     *
     */
    public function testUpdateSpace(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/space/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateSpace not implemented');
    }

    /**
     * Test case for updateStorey
     *
     * Update some fields of a storey.
     *
     */
    public function testUpdateStorey(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/storey/{uuid}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{uuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateStorey not implemented');
    }

    /**
     * Test case for updateStoreyPlanPositioning
     *
     * Update the postioning of the plan in the storey.
     *
     */
    public function testUpdateStoreyPlanPositioning(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/storey/{storey_uuid}/plan/{id}/positioning';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{storeyUuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateStoreyPlanPositioning not implemented');
    }

    /**
     * Test case for updateSystem
     *
     * Update some fields of a system.
     *
     */
    public function testUpdateSystem(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/system/{uuid}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{uuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateSystem not implemented');
    }

    /**
     * Test case for updateZone
     *
     * Update some fields of a zone.
     *
     */
    public function testUpdateZone(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/zone/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateZone not implemented');
    }

    /**
     * Test case for updateZoneSpace
     *
     * Update some fields of a space.
     *
     */
    public function testUpdateZoneSpace(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/zone/{zone_pk}/space/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{modelPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{zonePk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateZoneSpace not implemented');
    }

    /**
     * @param string $regexp
     * @return mixed
     */
    protected function genTestData(string $regexp)
    {
        $grammar  = new \Hoa\File\Read('hoa://Library/Regex/Grammar.pp');
        $compiler = \Hoa\Compiler\Llk\Llk::load($grammar);
        $ast      = $compiler->parse($regexp);
        $generator = new \Hoa\Regex\Visitor\Isotropic(new \Hoa\Math\Sampler\Random());

        return $generator->visit($ast);
    }
}
