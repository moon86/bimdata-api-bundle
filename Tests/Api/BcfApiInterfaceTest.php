<?php
/**
 * BcfApiInterfaceTest
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Api
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * BIMData API
 *
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1 (v1)
 * Contact: support@bimdata.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Server\Tests\Api;

use Symfony\Bundle\FrameworkBundle\KernelBrowser;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;

/**
 * BcfApiInterfaceTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Api
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 * @coversDefaultClass \OpenAPI\Server\Api\BcfApiInterface
 */
class BcfApiInterfaceTest extends WebTestCase
{
    private static ?KernelBrowser $client = null;

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
        if (null === self::$client) {
            self::$client = static::createClient();
        }
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
        static::ensureKernelShutdown();
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for createComment
     *
     * Create a comment.
     *
     */
    public function testCreateComment(): void
    {
        $client = self::$client;

        $path = '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/comments';
        $pattern = '{projectsPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{topicsGuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createComment not implemented');
    }

    /**
     * Test case for createExtensionLabel
     *
     * Create a Label.
     *
     */
    public function testCreateExtensionLabel(): void
    {
        $client = self::$client;

        $path = '/bcf/2.1/projects/{projects_pk}/extension/label';
        $pattern = '{projectsPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createExtensionLabel not implemented');
    }

    /**
     * Test case for createExtensionPriority
     *
     * Create a Priority.
     *
     */
    public function testCreateExtensionPriority(): void
    {
        $client = self::$client;

        $path = '/bcf/2.1/projects/{projects_pk}/extension/priority';
        $pattern = '{projectsPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createExtensionPriority not implemented');
    }

    /**
     * Test case for createExtensionStage
     *
     * Create a Stage.
     *
     */
    public function testCreateExtensionStage(): void
    {
        $client = self::$client;

        $path = '/bcf/2.1/projects/{projects_pk}/extension/stage';
        $pattern = '{projectsPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createExtensionStage not implemented');
    }

    /**
     * Test case for createExtensionStatus
     *
     * Create a TopicStatus.
     *
     */
    public function testCreateExtensionStatus(): void
    {
        $client = self::$client;

        $path = '/bcf/2.1/projects/{projects_pk}/extension/status';
        $pattern = '{projectsPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createExtensionStatus not implemented');
    }

    /**
     * Test case for createExtensionType
     *
     * Create a TopicType.
     *
     */
    public function testCreateExtensionType(): void
    {
        $client = self::$client;

        $path = '/bcf/2.1/projects/{projects_pk}/extension/type';
        $pattern = '{projectsPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createExtensionType not implemented');
    }

    /**
     * Test case for createFullTopic
     *
     * Create a Topic with viewpoints and comments.
     *
     */
    public function testCreateFullTopic(): void
    {
        $client = self::$client;

        $path = '/bcf/2.1/projects/{projects_pk}/full-topic';
        $pattern = '{projectsPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createFullTopic not implemented');
    }

    /**
     * Test case for createTopic
     *
     * Create a topic.
     *
     */
    public function testCreateTopic(): void
    {
        $client = self::$client;

        $path = '/bcf/2.1/projects/{projects_pk}/topics';
        $pattern = '{projectsPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createTopic not implemented');
    }

    /**
     * Test case for createViewpoint
     *
     * Create a Viewpoint.
     *
     */
    public function testCreateViewpoint(): void
    {
        $client = self::$client;

        $path = '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/viewpoints';
        $pattern = '{projectsPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{topicsGuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createViewpoint not implemented');
    }

    /**
     * Test case for deleteComment
     *
     * Delete a comment.
     *
     */
    public function testDeleteComment(): void
    {
        $client = self::$client;

        $path = '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/comments/{guid}';
        $pattern = '{guid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectsPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{topicsGuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for deleteComment not implemented');
    }

    /**
     * Test case for deleteExtensionLabel
     *
     * Delete a Label.
     *
     */
    public function testDeleteExtensionLabel(): void
    {
        $client = self::$client;

        $path = '/bcf/2.1/projects/{projects_pk}/extension/label/{id}';
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectsPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for deleteExtensionLabel not implemented');
    }

    /**
     * Test case for deleteExtensionPriority
     *
     * Delete a Priority.
     *
     */
    public function testDeleteExtensionPriority(): void
    {
        $client = self::$client;

        $path = '/bcf/2.1/projects/{projects_pk}/extension/priority/{id}';
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectsPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for deleteExtensionPriority not implemented');
    }

    /**
     * Test case for deleteExtensionStage
     *
     * Delete a Stage.
     *
     */
    public function testDeleteExtensionStage(): void
    {
        $client = self::$client;

        $path = '/bcf/2.1/projects/{projects_pk}/extension/stage/{id}';
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectsPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for deleteExtensionStage not implemented');
    }

    /**
     * Test case for deleteExtensionStatus
     *
     * Delete a TopicStatus.
     *
     */
    public function testDeleteExtensionStatus(): void
    {
        $client = self::$client;

        $path = '/bcf/2.1/projects/{projects_pk}/extension/status/{id}';
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectsPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for deleteExtensionStatus not implemented');
    }

    /**
     * Test case for deleteExtensionType
     *
     * Delete a TopicType.
     *
     */
    public function testDeleteExtensionType(): void
    {
        $client = self::$client;

        $path = '/bcf/2.1/projects/{projects_pk}/extension/type/{id}';
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectsPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for deleteExtensionType not implemented');
    }

    /**
     * Test case for deleteTopic
     *
     * Delete a topic.
     *
     */
    public function testDeleteTopic(): void
    {
        $client = self::$client;

        $path = '/bcf/2.1/projects/{projects_pk}/topics/{guid}';
        $pattern = '{guid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectsPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for deleteTopic not implemented');
    }

    /**
     * Test case for deleteViewpoint
     *
     * Delete a Viewpoint.
     *
     */
    public function testDeleteViewpoint(): void
    {
        $client = self::$client;

        $path = '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/viewpoints/{guid}';
        $pattern = '{guid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectsPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{topicsGuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for deleteViewpoint not implemented');
    }

    /**
     * Test case for downloadBcfExport
     *
     * Export project's topics in bcf-xml format.
     *
     */
    public function testDownloadBcfExport(): void
    {
        $client = self::$client;

        $path = '/bcf/2.1/projects/{id}/export';
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for downloadBcfExport not implemented');
    }

    /**
     * Test case for fullUpdateBcfProject
     *
     * Update all fields of a BCF project.
     *
     */
    public function testFullUpdateBcfProject(): void
    {
        $client = self::$client;

        $path = '/bcf/2.1/projects/{id}';
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PUT', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for fullUpdateBcfProject not implemented');
    }

    /**
     * Test case for fullUpdateComment
     *
     * Update all fields of a comment.
     *
     */
    public function testFullUpdateComment(): void
    {
        $client = self::$client;

        $path = '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/comments/{guid}';
        $pattern = '{guid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectsPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{topicsGuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PUT', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for fullUpdateComment not implemented');
    }

    /**
     * Test case for fullUpdateFullTopic
     *
     * Update all fields of a topic.
     *
     */
    public function testFullUpdateFullTopic(): void
    {
        $client = self::$client;

        $path = '/bcf/2.1/projects/{projects_pk}/full-topic/{guid}';
        $pattern = '{guid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectsPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PUT', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for fullUpdateFullTopic not implemented');
    }

    /**
     * Test case for fullUpdateTopic
     *
     * Update all fields of a topic.
     *
     */
    public function testFullUpdateTopic(): void
    {
        $client = self::$client;

        $path = '/bcf/2.1/projects/{projects_pk}/topics/{guid}';
        $pattern = '{guid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectsPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PUT', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for fullUpdateTopic not implemented');
    }

    /**
     * Test case for fullUpdateViewpoint
     *
     * Update all fields of a Viewpoint.
     *
     */
    public function testFullUpdateViewpoint(): void
    {
        $client = self::$client;

        $path = '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/viewpoints/{guid}';
        $pattern = '{guid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectsPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{topicsGuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PUT', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for fullUpdateViewpoint not implemented');
    }

    /**
     * Test case for getBcfProject
     *
     * Retrieve a BCF project.
     *
     */
    public function testGetBcfProject(): void
    {
        $client = self::$client;

        $path = '/bcf/2.1/projects/{id}';
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getBcfProject not implemented');
    }

    /**
     * Test case for getBcfProjects
     *
     * Retrieve all BCF projects.
     *
     */
    public function testGetBcfProjects(): void
    {
        $client = self::$client;

        $path = '/bcf/2.1/projects';

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getBcfProjects not implemented');
    }

    /**
     * Test case for getColorings
     *
     * Retrieve all colorings of a viewpoint.
     *
     */
    public function testGetColorings(): void
    {
        $client = self::$client;

        $path = '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/viewpoints/{guid}/coloring';
        $pattern = '{guid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectsPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{topicsGuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getColorings not implemented');
    }

    /**
     * Test case for getComment
     *
     * Retrieve a comment.
     *
     */
    public function testGetComment(): void
    {
        $client = self::$client;

        $path = '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/comments/{guid}';
        $pattern = '{guid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectsPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{topicsGuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getComment not implemented');
    }

    /**
     * Test case for getComments
     *
     * Retrieve all comments.
     *
     */
    public function testGetComments(): void
    {
        $client = self::$client;

        $path = '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/comments';
        $pattern = '{projectsPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{topicsGuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getComments not implemented');
    }

    /**
     * Test case for getDetailedExtensions
     *
     * Retrieve project detailed extensions.
     *
     */
    public function testGetDetailedExtensions(): void
    {
        $client = self::$client;

        $path = '/bcf/2.1/projects/{id}/detailed-extensions';
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getDetailedExtensions not implemented');
    }

    /**
     * Test case for getExtensions
     *
     * Retrieve project extensions.
     *
     */
    public function testGetExtensions(): void
    {
        $client = self::$client;

        $path = '/bcf/2.1/projects/{id}/extensions';
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getExtensions not implemented');
    }

    /**
     * Test case for getFullTopic
     *
     * Retrieve a full topic.
     *
     */
    public function testGetFullTopic(): void
    {
        $client = self::$client;

        $path = '/bcf/2.1/projects/{projects_pk}/full-topic/{guid}';
        $pattern = '{guid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectsPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getFullTopic not implemented');
    }

    /**
     * Test case for getFullTopics
     *
     * Retrieve all full topics.
     *
     */
    public function testGetFullTopics(): void
    {
        $client = self::$client;

        $path = '/bcf/2.1/projects/{projects_pk}/full-topic';
        $pattern = '{projectsPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getFullTopics not implemented');
    }

    /**
     * Test case for getSelections
     *
     * Retrieve all selections of a viewpoint.
     *
     */
    public function testGetSelections(): void
    {
        $client = self::$client;

        $path = '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/viewpoints/{guid}/selection';
        $pattern = '{guid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectsPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{topicsGuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getSelections not implemented');
    }

    /**
     * Test case for getSnapshot
     *
     * Retrieve the viewpoint' snapshot.
     *
     */
    public function testGetSnapshot(): void
    {
        $client = self::$client;

        $path = '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/viewpoints/{guid}/snapshot';
        $pattern = '{guid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectsPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{topicsGuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getSnapshot not implemented');
    }

    /**
     * Test case for getTopic
     *
     * Retrieve a topic.
     *
     */
    public function testGetTopic(): void
    {
        $client = self::$client;

        $path = '/bcf/2.1/projects/{projects_pk}/topics/{guid}';
        $pattern = '{guid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectsPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getTopic not implemented');
    }

    /**
     * Test case for getTopicViewpoints
     *
     * Retrieve all viewpoints attached to the topic.
     *
     */
    public function testGetTopicViewpoints(): void
    {
        $client = self::$client;

        $path = '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/topic-viewpoints';
        $pattern = '{projectsPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{topicsGuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getTopicViewpoints not implemented');
    }

    /**
     * Test case for getTopics
     *
     * Retrieve all topics.
     *
     */
    public function testGetTopics(): void
    {
        $client = self::$client;

        $path = '/bcf/2.1/projects/{projects_pk}/topics';
        $pattern = '{projectsPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getTopics not implemented');
    }

    /**
     * Test case for getUser
     *
     * Get current user info.
     *
     */
    public function testGetUser(): void
    {
        $client = self::$client;

        $path = '/bcf/2.1/current-user';

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getUser not implemented');
    }

    /**
     * Test case for getViewpoint
     *
     * Retrieve a Viewpoint.
     *
     */
    public function testGetViewpoint(): void
    {
        $client = self::$client;

        $path = '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/viewpoints/{guid}';
        $pattern = '{guid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectsPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{topicsGuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getViewpoint not implemented');
    }

    /**
     * Test case for getViewpoints
     *
     * Retrieve all Viewpoints of a topic.
     *
     */
    public function testGetViewpoints(): void
    {
        $client = self::$client;

        $path = '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/viewpoints';
        $pattern = '{projectsPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{topicsGuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getViewpoints not implemented');
    }

    /**
     * Test case for getVisibilities
     *
     * Retrieve all visibilities of a viewpoint.
     *
     */
    public function testGetVisibilities(): void
    {
        $client = self::$client;

        $path = '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/viewpoints/{guid}/visibility';
        $pattern = '{guid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectsPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{topicsGuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getVisibilities not implemented');
    }

    /**
     * Test case for importBcf
     *
     * Import bcf-xml format into this project.
     *
     */
    public function testImportBcf(): void
    {
        $client = self::$client;

        $path = '/bcf/2.1/projects/{id}/import';
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path);
        $this->markTestSkipped('Test for importBcf not implemented');
    }

    /**
     * Test case for updateBcfProject
     *
     * Update some fields of a BCF project.
     *
     */
    public function testUpdateBcfProject(): void
    {
        $client = self::$client;

        $path = '/bcf/2.1/projects/{id}';
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateBcfProject not implemented');
    }

    /**
     * Test case for updateComment
     *
     * Update some fields of a comment.
     *
     */
    public function testUpdateComment(): void
    {
        $client = self::$client;

        $path = '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/comments/{guid}';
        $pattern = '{guid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectsPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{topicsGuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateComment not implemented');
    }

    /**
     * Test case for updateExtensionLabel
     *
     * Update a Label.
     *
     */
    public function testUpdateExtensionLabel(): void
    {
        $client = self::$client;

        $path = '/bcf/2.1/projects/{projects_pk}/extension/label/{id}';
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectsPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateExtensionLabel not implemented');
    }

    /**
     * Test case for updateExtensionPriority
     *
     * Update a Priority.
     *
     */
    public function testUpdateExtensionPriority(): void
    {
        $client = self::$client;

        $path = '/bcf/2.1/projects/{projects_pk}/extension/priority/{id}';
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectsPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateExtensionPriority not implemented');
    }

    /**
     * Test case for updateExtensionStage
     *
     * Update a Stage.
     *
     */
    public function testUpdateExtensionStage(): void
    {
        $client = self::$client;

        $path = '/bcf/2.1/projects/{projects_pk}/extension/stage/{id}';
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectsPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateExtensionStage not implemented');
    }

    /**
     * Test case for updateExtensionStatus
     *
     * Update a TopicStatus.
     *
     */
    public function testUpdateExtensionStatus(): void
    {
        $client = self::$client;

        $path = '/bcf/2.1/projects/{projects_pk}/extension/status/{id}';
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectsPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateExtensionStatus not implemented');
    }

    /**
     * Test case for updateExtensionType
     *
     * Update a TopicType.
     *
     */
    public function testUpdateExtensionType(): void
    {
        $client = self::$client;

        $path = '/bcf/2.1/projects/{projects_pk}/extension/type/{id}';
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectsPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateExtensionType not implemented');
    }

    /**
     * Test case for updateFullTopic
     *
     * Update some fields of a topic.
     *
     */
    public function testUpdateFullTopic(): void
    {
        $client = self::$client;

        $path = '/bcf/2.1/projects/{projects_pk}/full-topic/{guid}';
        $pattern = '{guid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectsPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateFullTopic not implemented');
    }

    /**
     * Test case for updateTopic
     *
     * Update some fields of a topic.
     *
     */
    public function testUpdateTopic(): void
    {
        $client = self::$client;

        $path = '/bcf/2.1/projects/{projects_pk}/topics/{guid}';
        $pattern = '{guid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectsPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateTopic not implemented');
    }

    /**
     * Test case for updateViewpoint
     *
     * Update some fields of a Viewpoint.
     *
     */
    public function testUpdateViewpoint(): void
    {
        $client = self::$client;

        $path = '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/viewpoints/{guid}';
        $pattern = '{guid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{projectsPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{topicsGuid}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateViewpoint not implemented');
    }

    /**
     * @param string $regexp
     * @return mixed
     */
    protected function genTestData(string $regexp)
    {
        $grammar  = new \Hoa\File\Read('hoa://Library/Regex/Grammar.pp');
        $compiler = \Hoa\Compiler\Llk\Llk::load($grammar);
        $ast      = $compiler->parse($regexp);
        $generator = new \Hoa\Regex\Visitor\Isotropic(new \Hoa\Math\Sampler\Random());

        return $generator->visit($ast);
    }
}
