<?php
/**
 * WebhookApiInterfaceTest
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Api
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * BIMData API
 *
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1 (v1)
 * Contact: support@bimdata.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Server\Tests\Api;

use Symfony\Bundle\FrameworkBundle\KernelBrowser;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;

/**
 * WebhookApiInterfaceTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Api
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 * @coversDefaultClass \OpenAPI\Server\Api\WebhookApiInterface
 */
class WebhookApiInterfaceTest extends WebTestCase
{
    private static ?KernelBrowser $client = null;

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
        if (null === self::$client) {
            self::$client = static::createClient();
        }
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
        static::ensureKernelShutdown();
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for createWebHook
     *
     * Create a new Webhook.
     *
     */
    public function testCreateWebHook(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/webhook';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createWebHook not implemented');
    }

    /**
     * Test case for deleteWebHook
     *
     * Delete a webhook.
     *
     */
    public function testDeleteWebHook(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/webhook/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for deleteWebHook not implemented');
    }

    /**
     * Test case for getWebHook
     *
     * Retrieve one configured webhook.
     *
     */
    public function testGetWebHook(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/webhook/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getWebHook not implemented');
    }

    /**
     * Test case for getWebHooks
     *
     * Retrieve all configured webhooks.
     *
     */
    public function testGetWebHooks(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/webhook';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getWebHooks not implemented');
    }

    /**
     * Test case for pingWebHook
     *
     * Test a webhook.
     *
     */
    public function testPingWebHook(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/webhook/{id}/ping';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for pingWebHook not implemented');
    }

    /**
     * Test case for updateWebHook
     *
     * Update some field of a webhook.
     *
     */
    public function testUpdateWebHook(): void
    {
        $client = self::$client;

        $path = '/cloud/{cloud_pk}/webhook/{id}';
        $pattern = '{cloudPk}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{id}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateWebHook not implemented');
    }

    /**
     * @param string $regexp
     * @return mixed
     */
    protected function genTestData(string $regexp)
    {
        $grammar  = new \Hoa\File\Read('hoa://Library/Regex/Grammar.pp');
        $compiler = \Hoa\Compiler\Llk\Llk::load($grammar);
        $ast      = $compiler->parse($regexp);
        $generator = new \Hoa\Regex\Visitor\Isotropic(new \Hoa\Math\Sampler\Random());

        return $generator->visit($ast);
    }
}
