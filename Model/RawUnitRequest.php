<?php
/**
 * RawUnitRequest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * BIMData API
 *
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1 (v1)
 * Contact: support@bimdata.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the RawUnitRequest model.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */
class RawUnitRequest 
{
        /**
     * @var string|null
     * @SerializedName("name")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $name = null;

    /**
     * @var string|null
     * @SerializedName("type")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   min = 1
     * )
     */
    protected ?string $type = null;

    /**
     * @var string|null
     * @SerializedName("unit_type")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $unitType = null;

    /**
     * @var string|null
     * @SerializedName("prefix")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $prefix = null;

    /**
     * @var array|null
     * @SerializedName("elements")
     * @Assert\All({
     *   @Assert\Type("AnyType")
     * })
     * @Type("array<string, AnyType>")
     */
    protected ?array $elements = null;

    /**
     * @var float|null
     * @SerializedName("conversion_factor")
     * @Assert\Type("float")
     * @Type("float")
     */
    protected ?float $conversionFactor = null;

    /**
     * @var array|null
     * @SerializedName("dimensions")
     * @Assert\All({
     *   @Assert\Type("float")
     * })
     * @Type("array<float>")
     */
    protected ?array $dimensions = null;

    /**
     * @var int|null
     * @SerializedName("conversion_baseunit_index")
     * @Assert\Type("int")
     * @Type("int")
     */
    protected ?int $conversionBaseunitIndex = null;

    /**
     * @var bool|null
     * @SerializedName("is_default")
     * @Assert\Type("bool")
     * @Type("bool")
     */
    protected ?bool $isDefault = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->name = $data['name'] ?? null;
        $this->type = $data['type'] ?? null;
        $this->unitType = $data['unitType'] ?? null;
        $this->prefix = $data['prefix'] ?? null;
        $this->elements = $data['elements'] ?? null;
        $this->conversionFactor = $data['conversionFactor'] ?? null;
        $this->dimensions = $data['dimensions'] ?? null;
        $this->conversionBaseunitIndex = $data['conversionBaseunitIndex'] ?? null;
        $this->isDefault = $data['isDefault'] ?? null;
    }

    /**
     * Gets name.
     *
     * @return string|null
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
     * Sets name.
     *
     * @param string|null $name
     *
     * @return $this
     */
    public function setName(?string $name = null): self
    {
        $this->name = $name;

        return $this;
    }

    /**
     * Gets type.
     *
     * @return string|null
     */
    public function getType(): ?string
    {
        return $this->type;
    }

    /**
     * Sets type.
     *
     * @param string|null $type
     *
     * @return $this
     */
    public function setType(?string $type): self
    {
        $this->type = $type;

        return $this;
    }

    /**
     * Gets unitType.
     *
     * @return string|null
     */
    public function getUnitType(): ?string
    {
        return $this->unitType;
    }

    /**
     * Sets unitType.
     *
     * @param string|null $unitType
     *
     * @return $this
     */
    public function setUnitType(?string $unitType = null): self
    {
        $this->unitType = $unitType;

        return $this;
    }

    /**
     * Gets prefix.
     *
     * @return string|null
     */
    public function getPrefix(): ?string
    {
        return $this->prefix;
    }

    /**
     * Sets prefix.
     *
     * @param string|null $prefix
     *
     * @return $this
     */
    public function setPrefix(?string $prefix = null): self
    {
        $this->prefix = $prefix;

        return $this;
    }

    /**
     * Gets elements.
     *
     * @return array|null
     */
    public function getElements(): ?array
    {
        return $this->elements;
    }

    /**
     * Sets elements.
     *
     * @param array|null $elements
     *
     * @return $this
     */
    public function setElements(?array $elements = null): self
    {
        $this->elements = $elements;

        return $this;
    }

    /**
     * Gets conversionFactor.
     *
     * @return float|null
     */
    public function getConversionFactor(): ?float
    {
        return $this->conversionFactor;
    }

    /**
     * Sets conversionFactor.
     *
     * @param float|null $conversionFactor
     *
     * @return $this
     */
    public function setConversionFactor(?float $conversionFactor = null): self
    {
        $this->conversionFactor = $conversionFactor;

        return $this;
    }

    /**
     * Gets dimensions.
     *
     * @return array|null
     */
    public function getDimensions(): ?array
    {
        return $this->dimensions;
    }

    /**
     * Sets dimensions.
     *
     * @param array|null $dimensions
     *
     * @return $this
     */
    public function setDimensions(?array $dimensions = null): self
    {
        $this->dimensions = $dimensions;

        return $this;
    }

    /**
     * Gets conversionBaseunitIndex.
     *
     * @return int|null
     */
    public function getConversionBaseunitIndex(): ?int
    {
        return $this->conversionBaseunitIndex;
    }

    /**
     * Sets conversionBaseunitIndex.
     *
     * @param int|null $conversionBaseunitIndex
     *
     * @return $this
     */
    public function setConversionBaseunitIndex(?int $conversionBaseunitIndex = null): self
    {
        $this->conversionBaseunitIndex = $conversionBaseunitIndex;

        return $this;
    }

    /**
     * Gets isDefault.
     *
     * @return bool|null
     */
    public function isIsDefault(): ?bool
    {
        return $this->isDefault;
    }

    /**
     * Sets isDefault.
     *
     * @param bool|null $isDefault
     *
     * @return $this
     */
    public function setIsDefault(?bool $isDefault = null): self
    {
        $this->isDefault = $isDefault;

        return $this;
    }
}


