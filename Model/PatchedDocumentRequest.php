<?php
/**
 * PatchedDocumentRequest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * BIMData API
 *
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1 (v1)
 * Contact: support@bimdata.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the PatchedDocumentRequest model.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */
class PatchedDocumentRequest 
{
        /**
     * @var int|null
     * @SerializedName("parent_id")
     * @Assert\Type("int")
     * @Type("int")
     */
    protected ?int $parentId = null;

    /**
     * Shown name of the file
     *
     * @var string|null
     * @SerializedName("name")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 512
     * )
     * @Assert\Length(
     *   min = 1
     * )
     */
    protected ?string $name = null;

    /**
     * Full name of the file
     *
     * @var string|null
     * @SerializedName("file_name")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 512
     * )
     * @Assert\Length(
     *   min = 1
     * )
     */
    protected ?string $fileName = null;

    /**
     * Description of the file
     *
     * @var string|null
     * @SerializedName("description")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $description = null;

    /**
     * @var UploadedFile|null
     * @SerializedName("file")
     * @Assert\Type("UploadedFile")
     * @Type("UploadedFile")
     */
    protected ?UploadedFile $file = null;

    /**
     * Size of the file.
     *
     * @var int|null
     * @SerializedName("size")
     * @Assert\Type("int")
     * @Type("int")
     * @Assert\GreaterThanOrEqual(0)
     * @Assert\LessThanOrEqual(9223372036854775807)
     */
    protected ?int $size = null;

    /**
     * Define the model.source field if the upload is a Model (IFC, PDF, DWG...)
     *
     * @var string|null
     * @SerializedName("model_source")
     * @Assert\Choice({ "UPLOAD", "SPLIT", "MERGE", "EXPORT", "OPTIMIZED" })
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $modelSource = null;

    /**
     * DEPRECATED: Use &#39;model_source&#39; instead. Define the model.source field if the upload is a Model (IFC, PDF, DWG...)
     *
     * @var string|null
     * @SerializedName("ifc_source")
     * @Assert\Choice({ "UPLOAD", "SPLIT", "MERGE", "EXPORT", "OPTIMIZED" })
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $ifcSource = null;

    /**
     * Old document version to replace. Only for create
     *
     * @var int|null
     * @SerializedName("successor_of")
     * @Assert\Type("int")
     * @Type("int")
     */
    protected ?int $successorOf = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->parentId = $data['parentId'] ?? null;
        $this->name = $data['name'] ?? null;
        $this->fileName = $data['fileName'] ?? null;
        $this->description = $data['description'] ?? null;
        $this->file = $data['file'] ?? null;
        $this->size = $data['size'] ?? null;
        $this->modelSource = $data['modelSource'] ?? null;
        $this->ifcSource = $data['ifcSource'] ?? null;
        $this->successorOf = $data['successorOf'] ?? null;
    }

    /**
     * Gets parentId.
     *
     * @return int|null
     */
    public function getParentId(): ?int
    {
        return $this->parentId;
    }

    /**
     * Sets parentId.
     *
     * @param int|null $parentId
     *
     * @return $this
     */
    public function setParentId(?int $parentId = null): self
    {
        $this->parentId = $parentId;

        return $this;
    }

    /**
     * Gets name.
     *
     * @return string|null
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
     * Sets name.
     *
     * @param string|null $name  Shown name of the file
     *
     * @return $this
     */
    public function setName(?string $name = null): self
    {
        $this->name = $name;

        return $this;
    }

    /**
     * Gets fileName.
     *
     * @return string|null
     */
    public function getFileName(): ?string
    {
        return $this->fileName;
    }

    /**
     * Sets fileName.
     *
     * @param string|null $fileName  Full name of the file
     *
     * @return $this
     */
    public function setFileName(?string $fileName = null): self
    {
        $this->fileName = $fileName;

        return $this;
    }

    /**
     * Gets description.
     *
     * @return string|null
     */
    public function getDescription(): ?string
    {
        return $this->description;
    }

    /**
     * Sets description.
     *
     * @param string|null $description  Description of the file
     *
     * @return $this
     */
    public function setDescription(?string $description = null): self
    {
        $this->description = $description;

        return $this;
    }

    /**
     * Gets file.
     *
     * @return UploadedFile|null
     */
    public function getFile(): ?UploadedFile
    {
        return $this->file;
    }

    /**
     * Sets file.
     *
     * @param UploadedFile|null $file
     *
     * @return $this
     */
    public function setFile(?UploadedFile $file = null): self
    {
        $this->file = $file;

        return $this;
    }

    /**
     * Gets size.
     *
     * @return int|null
     */
    public function getSize(): ?int
    {
        return $this->size;
    }

    /**
     * Sets size.
     *
     * @param int|null $size  Size of the file.
     *
     * @return $this
     */
    public function setSize(?int $size = null): self
    {
        $this->size = $size;

        return $this;
    }

    /**
     * Gets modelSource.
     *
     * @return string|null
     */
    public function getModelSource(): ?string
    {
        return $this->modelSource;
    }

    /**
     * Sets modelSource.
     *
     * @param string|null $modelSource  Define the model.source field if the upload is a Model (IFC, PDF, DWG...)
     *
     * @return $this
     */
    public function setModelSource(?string $modelSource = null): self
    {
        $this->modelSource = $modelSource;

        return $this;
    }

    /**
     * Gets ifcSource.
     *
     * @return string|null
     */
    public function getIfcSource(): ?string
    {
        return $this->ifcSource;
    }

    /**
     * Sets ifcSource.
     *
     * @param string|null $ifcSource  DEPRECATED: Use 'model_source' instead. Define the model.source field if the upload is a Model (IFC, PDF, DWG...)
     *
     * @return $this
     */
    public function setIfcSource(?string $ifcSource = null): self
    {
        $this->ifcSource = $ifcSource;

        return $this;
    }

    /**
     * Gets successorOf.
     *
     * @return int|null
     */
    public function getSuccessorOf(): ?int
    {
        return $this->successorOf;
    }

    /**
     * Sets successorOf.
     *
     * @param int|null $successorOf  Old document version to replace. Only for create
     *
     * @return $this
     */
    public function setSuccessorOf(?int $successorOf = null): self
    {
        $this->successorOf = $successorOf;

        return $this;
    }
}


