<?php
/**
 * PatchedPropertyDefinitionRequest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * BIMData API
 *
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1 (v1)
 * Contact: support@bimdata.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the PatchedPropertyDefinitionRequest model.
 *
 * Adds nested create feature
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */
class PatchedPropertyDefinitionRequest 
{
        /**
     * @var PatchedPropertyDefinitionRequestUnit|null
     * @SerializedName("unit")
     * @Assert\Type("OpenAPI\Server\Model\PatchedPropertyDefinitionRequestUnit")
     * @Type("OpenAPI\Server\Model\PatchedPropertyDefinitionRequestUnit")
     */
    protected ?PatchedPropertyDefinitionRequestUnit $unit = null;

    /**
     * @var string|null
     * @SerializedName("name")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $name = null;

    /**
     * @var string|null
     * @SerializedName("description")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $description = null;

    /**
     * IfcProperty*, Ifc*Properties, IfcComplexProperty, IfcQuantity*, IfcComplexQuantity, Attribute
     *
     * @var string|null
     * @SerializedName("type")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $type = null;

    /**
     * Type of the corresponding value (Boolean, integer, float, string, IfcRange, ...)
     *
     * @var string|null
     * @SerializedName("value_type")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $valueType = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->unit = $data['unit'] ?? null;
        $this->name = $data['name'] ?? null;
        $this->description = $data['description'] ?? null;
        $this->type = $data['type'] ?? null;
        $this->valueType = $data['valueType'] ?? null;
    }

    /**
     * Gets unit.
     *
     * @return PatchedPropertyDefinitionRequestUnit|null
     */
    public function getUnit(): ?PatchedPropertyDefinitionRequestUnit
    {
        return $this->unit;
    }

    /**
     * Sets unit.
     *
     * @param PatchedPropertyDefinitionRequestUnit|null $unit
     *
     * @return $this
     */
    public function setUnit(?PatchedPropertyDefinitionRequestUnit $unit = null): self
    {
        $this->unit = $unit;

        return $this;
    }

    /**
     * Gets name.
     *
     * @return string|null
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
     * Sets name.
     *
     * @param string|null $name
     *
     * @return $this
     */
    public function setName(?string $name = null): self
    {
        $this->name = $name;

        return $this;
    }

    /**
     * Gets description.
     *
     * @return string|null
     */
    public function getDescription(): ?string
    {
        return $this->description;
    }

    /**
     * Sets description.
     *
     * @param string|null $description
     *
     * @return $this
     */
    public function setDescription(?string $description = null): self
    {
        $this->description = $description;

        return $this;
    }

    /**
     * Gets type.
     *
     * @return string|null
     */
    public function getType(): ?string
    {
        return $this->type;
    }

    /**
     * Sets type.
     *
     * @param string|null $type  IfcProperty*, Ifc*Properties, IfcComplexProperty, IfcQuantity*, IfcComplexQuantity, Attribute
     *
     * @return $this
     */
    public function setType(?string $type = null): self
    {
        $this->type = $type;

        return $this;
    }

    /**
     * Gets valueType.
     *
     * @return string|null
     */
    public function getValueType(): ?string
    {
        return $this->valueType;
    }

    /**
     * Sets valueType.
     *
     * @param string|null $valueType  Type of the corresponding value (Boolean, integer, float, string, IfcRange, ...)
     *
     * @return $this
     */
    public function setValueType(?string $valueType = null): self
    {
        $this->valueType = $valueType;

        return $this;
    }
}


