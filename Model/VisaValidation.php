<?php
/**
 * VisaValidation
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * BIMData API
 *
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1 (v1)
 * Contact: support@bimdata.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the VisaValidation model.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */
class VisaValidation 
{
        /**
     * @var int|null
     * @SerializedName("id")
     * @Assert\NotNull()
     * @Assert\Type("int")
     * @Type("int")
     */
    protected ?int $id = null;

    /**
     * @var int|null
     * @SerializedName("visa_id")
     * @Assert\NotNull()
     * @Assert\Type("int")
     * @Type("int")
     */
    protected ?int $visaId = null;

    /**
     * @var 
     * @SerializedName("validator")
     * @Assert\NotNull()
     * @Assert\Valid()
     * @Assert\Type("UserProject")
     * @Type("UserProject")
     */
    protected  $validator = null;

    /**
     * @var string|null
     * @SerializedName("status")
     * @Assert\NotNull()
     * @Assert\Choice({ "P", "A", "D" })
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $status = null;

    /**
     * Return True if validator has commented the visa
     *
     * @var bool|null
     * @SerializedName("has_commented")
     * @Assert\NotNull()
     * @Assert\Type("bool")
     * @Type("bool")
     */
    protected ?bool $hasCommented = null;

    /**
     * @var \DateTime|null
     * @SerializedName("created_at")
     * @Assert\NotNull()
     * @Assert\DateTime()
     * @Type("DateTime")
     */
    protected ?\DateTime $createdAt = null;

    /**
     * @var \DateTime|null
     * @SerializedName("updated_at")
     * @Assert\NotNull()
     * @Assert\DateTime()
     * @Type("DateTime")
     */
    protected ?\DateTime $updatedAt = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->id = $data['id'] ?? null;
        $this->visaId = $data['visaId'] ?? null;
        $this->validator = $data['validator'] ?? null;
        $this->status = $data['status'] ?? null;
        $this->hasCommented = $data['hasCommented'] ?? null;
        $this->createdAt = $data['createdAt'] ?? null;
        $this->updatedAt = $data['updatedAt'] ?? null;
    }

    /**
     * Gets id.
     *
     * @return int|null
     */
    public function getId(): ?int
    {
        return $this->id;
    }

    /**
     * Sets id.
     *
     * @param int|null $id
     *
     * @return $this
     */
    public function setId(?int $id): self
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Gets visaId.
     *
     * @return int|null
     */
    public function getVisaId(): ?int
    {
        return $this->visaId;
    }

    /**
     * Sets visaId.
     *
     * @param int|null $visaId
     *
     * @return $this
     */
    public function setVisaId(?int $visaId): self
    {
        $this->visaId = $visaId;

        return $this;
    }

    /**
     * Gets validator.
     *
     * @return 
     */
    public function getValidator(): 
    {
        return $this->validator;
    }

    /**
     * Sets validator.
     *
     * @param  $validator
     *
     * @return $this
     */
    public function setValidator( $validator): self
    {
        $this->validator = $validator;

        return $this;
    }

    /**
     * Gets status.
     *
     * @return string|null
     */
    public function getStatus(): ?string
    {
        return $this->status;
    }

    /**
     * Sets status.
     *
     * @param string|null $status
     *
     * @return $this
     */
    public function setStatus(?string $status): self
    {
        $this->status = $status;

        return $this;
    }

    /**
     * Gets hasCommented.
     *
     * @return bool|null
     */
    public function isHasCommented(): ?bool
    {
        return $this->hasCommented;
    }

    /**
     * Sets hasCommented.
     *
     * @param bool|null $hasCommented  Return True if validator has commented the visa
     *
     * @return $this
     */
    public function setHasCommented(?bool $hasCommented): self
    {
        $this->hasCommented = $hasCommented;

        return $this;
    }

    /**
     * Gets createdAt.
     *
     * @return \DateTime|null
     */
    public function getCreatedAt(): ?\DateTime
    {
        return $this->createdAt;
    }

    /**
     * Sets createdAt.
     *
     * @param \DateTime|null $createdAt
     *
     * @return $this
     */
    public function setCreatedAt(?\DateTime $createdAt): self
    {
        $this->createdAt = $createdAt;

        return $this;
    }

    /**
     * Gets updatedAt.
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt(): ?\DateTime
    {
        return $this->updatedAt;
    }

    /**
     * Sets updatedAt.
     *
     * @param \DateTime|null $updatedAt
     *
     * @return $this
     */
    public function setUpdatedAt(?\DateTime $updatedAt): self
    {
        $this->updatedAt = $updatedAt;

        return $this;
    }
}


