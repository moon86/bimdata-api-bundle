<?php
/**
 * Model
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * BIMData API
 *
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1 (v1)
 * Contact: support@bimdata.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the Model model.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */
class Model 
{
        /**
     * @var int|null
     * @SerializedName("id")
     * @Assert\NotNull()
     * @Assert\Type("int")
     * @Type("int")
     */
    protected ?int $id = null;

    /**
     * @var string|null
     * @SerializedName("name")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 512
     * )
     */
    protected ?string $name = null;

    /**
     * @var string|null
     * @SerializedName("type")
     * @Assert\NotNull()
     * @Assert\Choice({ "IFC", "DWG", "DXF", "GLTF", "PDF", "JPEG", "PNG", "OBJ", "DAE", "BFX", "POINT_CLOUD", "METABUILDING" })
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $type = null;

    /**
     * @var 
     * @SerializedName("creator")
     * @Assert\NotNull()
     * @Assert\Valid()
     * @Assert\Type("User")
     * @Type("User")
     */
    protected  $creator = null;

    /**
     * @var string|null
     * @SerializedName("status")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $status = null;

    /**
     * @var string|null
     * @SerializedName("source")
     * @Assert\Choice({ "UPLOAD", "SPLIT", "MERGE", "EXPORT", "OPTIMIZED" })
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $source = null;

    /**
     * @var \DateTime|null
     * @SerializedName("created_at")
     * @Assert\NotNull()
     * @Assert\DateTime()
     * @Type("DateTime")
     */
    protected ?\DateTime $createdAt = null;

    /**
     * @var \DateTime|null
     * @SerializedName("updated_at")
     * @Assert\NotNull()
     * @Assert\DateTime()
     * @Type("DateTime")
     */
    protected ?\DateTime $updatedAt = null;

    /**
     * @var int|null
     * @SerializedName("document_id")
     * @Assert\NotNull()
     * @Assert\Type("int")
     * @Type("int")
     */
    protected ?int $documentId = null;

    /**
     * @var 
     * @SerializedName("document")
     * @Assert\NotNull()
     * @Assert\Valid()
     * @Assert\Type("Document")
     * @Type("Document")
     */
    protected  $document = null;

    /**
     * @var string|null
     * @SerializedName("structure_file")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $structureFile = null;

    /**
     * @var string|null
     * @SerializedName("systems_file")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $systemsFile = null;

    /**
     * @var string|null
     * @SerializedName("map_file")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $mapFile = null;

    /**
     * @var string|null
     * @SerializedName("gltf_file")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $gltfFile = null;

    /**
     * @var string|null
     * @SerializedName("bvh_tree_file")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $bvhTreeFile = null;

    /**
     * @var string|null
     * @SerializedName("preview_file")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $previewFile = null;

    /**
     * DEPRECATED: Use &#39;preview_file&#39; instead.
     *
     * @var string|null
     * @SerializedName("viewer_360_file")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $viewer360File = null;

    /**
     * @var string|null
     * @SerializedName("xkt_file")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $xktFile = null;

    /**
     * @var int|null
     * @SerializedName("project_id")
     * @Assert\NotNull()
     * @Assert\Type("int")
     * @Type("int")
     */
    protected ?int $projectId = null;

    /**
     * [x,y,z] array of the position of the local_placement in world coordinates
     *
     * @var array|null
     * @SerializedName("world_position")
     * @Assert\All({
     *   @Assert\Type("float")
     * })
     * @Type("array<float>")
     * @Assert\Count(
     *   max = 3
     * )
     */
    protected ?array $worldPosition = null;

    /**
     * How many meters a unit represents
     *
     * @var float|null
     * @SerializedName("size_ratio")
     * @Assert\Type("float")
     * @Type("float")
     */
    protected ?float $sizeRatio = null;

    /**
     * List of errors that happened during IFC processing
     *
     * @var array|null
     * @SerializedName("errors")
     * @Assert\NotNull()
     * @Assert\All({
     *   @Assert\Type("string")
     * })
     * @Type("array<string>")
     */
    protected ?array $errors = null;

    /**
     * List of warnings that happened during IFC processing
     *
     * @var array|null
     * @SerializedName("warnings")
     * @Assert\NotNull()
     * @Assert\All({
     *   @Assert\Type("string")
     * })
     * @Type("array<string>")
     */
    protected ?array $warnings = null;

    /**
     * @var bool|null
     * @SerializedName("archived")
     * @Assert\Type("bool")
     * @Type("bool")
     */
    protected ?bool $archived = null;

    /**
     * This field is only for information. Updating it won&#39;t impact the export.
     *
     * @var string|null
     * @SerializedName("version")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 256
     * )
     */
    protected ?string $version = null;

    /**
     * This field is only for information. Updating it won&#39;t impact the export.
     *
     * @var array|null
     * @SerializedName("north_vector")
     * @Assert\All({
     *   @Assert\Type("float")
     * })
     * @Type("array<float>")
     * @Assert\Count(
     *   max = 2
     * )
     */
    protected ?array $northVector = null;

    /**
     * This is the angle in clockwise degree to apply on the 2D to optimise the horizontality of objects. This field is only for information. Updating it won&#39;t impact the export.
     *
     * @var float|null
     * @SerializedName("recommanded_2d_angle")
     * @Assert\Type("float")
     * @Type("float")
     */
    protected ?float $recommanded2dAngle = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->id = $data['id'] ?? null;
        $this->name = $data['name'] ?? null;
        $this->type = $data['type'] ?? null;
        $this->creator = $data['creator'] ?? null;
        $this->status = $data['status'] ?? null;
        $this->source = $data['source'] ?? null;
        $this->createdAt = $data['createdAt'] ?? null;
        $this->updatedAt = $data['updatedAt'] ?? null;
        $this->documentId = $data['documentId'] ?? null;
        $this->document = $data['document'] ?? null;
        $this->structureFile = $data['structureFile'] ?? null;
        $this->systemsFile = $data['systemsFile'] ?? null;
        $this->mapFile = $data['mapFile'] ?? null;
        $this->gltfFile = $data['gltfFile'] ?? null;
        $this->bvhTreeFile = $data['bvhTreeFile'] ?? null;
        $this->previewFile = $data['previewFile'] ?? null;
        $this->viewer360File = $data['viewer360File'] ?? null;
        $this->xktFile = $data['xktFile'] ?? null;
        $this->projectId = $data['projectId'] ?? null;
        $this->worldPosition = $data['worldPosition'] ?? null;
        $this->sizeRatio = $data['sizeRatio'] ?? null;
        $this->errors = $data['errors'] ?? null;
        $this->warnings = $data['warnings'] ?? null;
        $this->archived = $data['archived'] ?? null;
        $this->version = $data['version'] ?? null;
        $this->northVector = $data['northVector'] ?? null;
        $this->recommanded2dAngle = $data['recommanded2dAngle'] ?? null;
    }

    /**
     * Gets id.
     *
     * @return int|null
     */
    public function getId(): ?int
    {
        return $this->id;
    }

    /**
     * Sets id.
     *
     * @param int|null $id
     *
     * @return $this
     */
    public function setId(?int $id): self
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Gets name.
     *
     * @return string|null
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
     * Sets name.
     *
     * @param string|null $name
     *
     * @return $this
     */
    public function setName(?string $name = null): self
    {
        $this->name = $name;

        return $this;
    }

    /**
     * Gets type.
     *
     * @return string|null
     */
    public function getType(): ?string
    {
        return $this->type;
    }

    /**
     * Sets type.
     *
     * @param string|null $type
     *
     * @return $this
     */
    public function setType(?string $type): self
    {
        $this->type = $type;

        return $this;
    }

    /**
     * Gets creator.
     *
     * @return 
     */
    public function getCreator(): 
    {
        return $this->creator;
    }

    /**
     * Sets creator.
     *
     * @param  $creator
     *
     * @return $this
     */
    public function setCreator( $creator): self
    {
        $this->creator = $creator;

        return $this;
    }

    /**
     * Gets status.
     *
     * @return string|null
     */
    public function getStatus(): ?string
    {
        return $this->status;
    }

    /**
     * Sets status.
     *
     * @param string|null $status
     *
     * @return $this
     */
    public function setStatus(?string $status): self
    {
        $this->status = $status;

        return $this;
    }

    /**
     * Gets source.
     *
     * @return string|null
     */
    public function getSource(): ?string
    {
        return $this->source;
    }

    /**
     * Sets source.
     *
     * @param string|null $source
     *
     * @return $this
     */
    public function setSource(?string $source = null): self
    {
        $this->source = $source;

        return $this;
    }

    /**
     * Gets createdAt.
     *
     * @return \DateTime|null
     */
    public function getCreatedAt(): ?\DateTime
    {
        return $this->createdAt;
    }

    /**
     * Sets createdAt.
     *
     * @param \DateTime|null $createdAt
     *
     * @return $this
     */
    public function setCreatedAt(?\DateTime $createdAt): self
    {
        $this->createdAt = $createdAt;

        return $this;
    }

    /**
     * Gets updatedAt.
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt(): ?\DateTime
    {
        return $this->updatedAt;
    }

    /**
     * Sets updatedAt.
     *
     * @param \DateTime|null $updatedAt
     *
     * @return $this
     */
    public function setUpdatedAt(?\DateTime $updatedAt): self
    {
        $this->updatedAt = $updatedAt;

        return $this;
    }

    /**
     * Gets documentId.
     *
     * @return int|null
     */
    public function getDocumentId(): ?int
    {
        return $this->documentId;
    }

    /**
     * Sets documentId.
     *
     * @param int|null $documentId
     *
     * @return $this
     */
    public function setDocumentId(?int $documentId): self
    {
        $this->documentId = $documentId;

        return $this;
    }

    /**
     * Gets document.
     *
     * @return 
     */
    public function getDocument(): 
    {
        return $this->document;
    }

    /**
     * Sets document.
     *
     * @param  $document
     *
     * @return $this
     */
    public function setDocument( $document): self
    {
        $this->document = $document;

        return $this;
    }

    /**
     * Gets structureFile.
     *
     * @return string|null
     */
    public function getStructureFile(): ?string
    {
        return $this->structureFile;
    }

    /**
     * Sets structureFile.
     *
     * @param string|null $structureFile
     *
     * @return $this
     */
    public function setStructureFile(?string $structureFile): self
    {
        $this->structureFile = $structureFile;

        return $this;
    }

    /**
     * Gets systemsFile.
     *
     * @return string|null
     */
    public function getSystemsFile(): ?string
    {
        return $this->systemsFile;
    }

    /**
     * Sets systemsFile.
     *
     * @param string|null $systemsFile
     *
     * @return $this
     */
    public function setSystemsFile(?string $systemsFile): self
    {
        $this->systemsFile = $systemsFile;

        return $this;
    }

    /**
     * Gets mapFile.
     *
     * @return string|null
     */
    public function getMapFile(): ?string
    {
        return $this->mapFile;
    }

    /**
     * Sets mapFile.
     *
     * @param string|null $mapFile
     *
     * @return $this
     */
    public function setMapFile(?string $mapFile): self
    {
        $this->mapFile = $mapFile;

        return $this;
    }

    /**
     * Gets gltfFile.
     *
     * @return string|null
     */
    public function getGltfFile(): ?string
    {
        return $this->gltfFile;
    }

    /**
     * Sets gltfFile.
     *
     * @param string|null $gltfFile
     *
     * @return $this
     */
    public function setGltfFile(?string $gltfFile): self
    {
        $this->gltfFile = $gltfFile;

        return $this;
    }

    /**
     * Gets bvhTreeFile.
     *
     * @return string|null
     */
    public function getBvhTreeFile(): ?string
    {
        return $this->bvhTreeFile;
    }

    /**
     * Sets bvhTreeFile.
     *
     * @param string|null $bvhTreeFile
     *
     * @return $this
     */
    public function setBvhTreeFile(?string $bvhTreeFile): self
    {
        $this->bvhTreeFile = $bvhTreeFile;

        return $this;
    }

    /**
     * Gets previewFile.
     *
     * @return string|null
     */
    public function getPreviewFile(): ?string
    {
        return $this->previewFile;
    }

    /**
     * Sets previewFile.
     *
     * @param string|null $previewFile
     *
     * @return $this
     */
    public function setPreviewFile(?string $previewFile): self
    {
        $this->previewFile = $previewFile;

        return $this;
    }

    /**
     * Gets viewer360File.
     *
     * @return string|null
     */
    public function getViewer360File(): ?string
    {
        return $this->viewer360File;
    }

    /**
     * Sets viewer360File.
     *
     * @param string|null $viewer360File  DEPRECATED: Use 'preview_file' instead.
     *
     * @return $this
     */
    public function setViewer360File(?string $viewer360File): self
    {
        $this->viewer360File = $viewer360File;

        return $this;
    }

    /**
     * Gets xktFile.
     *
     * @return string|null
     */
    public function getXktFile(): ?string
    {
        return $this->xktFile;
    }

    /**
     * Sets xktFile.
     *
     * @param string|null $xktFile
     *
     * @return $this
     */
    public function setXktFile(?string $xktFile): self
    {
        $this->xktFile = $xktFile;

        return $this;
    }

    /**
     * Gets projectId.
     *
     * @return int|null
     */
    public function getProjectId(): ?int
    {
        return $this->projectId;
    }

    /**
     * Sets projectId.
     *
     * @param int|null $projectId
     *
     * @return $this
     */
    public function setProjectId(?int $projectId): self
    {
        $this->projectId = $projectId;

        return $this;
    }

    /**
     * Gets worldPosition.
     *
     * @return array|null
     */
    public function getWorldPosition(): ?array
    {
        return $this->worldPosition;
    }

    /**
     * Sets worldPosition.
     *
     * @param array|null $worldPosition  [x,y,z] array of the position of the local_placement in world coordinates
     *
     * @return $this
     */
    public function setWorldPosition(?array $worldPosition = null): self
    {
        $this->worldPosition = $worldPosition;

        return $this;
    }

    /**
     * Gets sizeRatio.
     *
     * @return float|null
     */
    public function getSizeRatio(): ?float
    {
        return $this->sizeRatio;
    }

    /**
     * Sets sizeRatio.
     *
     * @param float|null $sizeRatio  How many meters a unit represents
     *
     * @return $this
     */
    public function setSizeRatio(?float $sizeRatio = null): self
    {
        $this->sizeRatio = $sizeRatio;

        return $this;
    }

    /**
     * Gets errors.
     *
     * @return array|null
     */
    public function getErrors(): ?array
    {
        return $this->errors;
    }

    /**
     * Sets errors.
     *
     * @param array|null $errors  List of errors that happened during IFC processing
     *
     * @return $this
     */
    public function setErrors(?array $errors): self
    {
        $this->errors = $errors;

        return $this;
    }

    /**
     * Gets warnings.
     *
     * @return array|null
     */
    public function getWarnings(): ?array
    {
        return $this->warnings;
    }

    /**
     * Sets warnings.
     *
     * @param array|null $warnings  List of warnings that happened during IFC processing
     *
     * @return $this
     */
    public function setWarnings(?array $warnings): self
    {
        $this->warnings = $warnings;

        return $this;
    }

    /**
     * Gets archived.
     *
     * @return bool|null
     */
    public function isArchived(): ?bool
    {
        return $this->archived;
    }

    /**
     * Sets archived.
     *
     * @param bool|null $archived
     *
     * @return $this
     */
    public function setArchived(?bool $archived = null): self
    {
        $this->archived = $archived;

        return $this;
    }

    /**
     * Gets version.
     *
     * @return string|null
     */
    public function getVersion(): ?string
    {
        return $this->version;
    }

    /**
     * Sets version.
     *
     * @param string|null $version  This field is only for information. Updating it won't impact the export.
     *
     * @return $this
     */
    public function setVersion(?string $version = null): self
    {
        $this->version = $version;

        return $this;
    }

    /**
     * Gets northVector.
     *
     * @return array|null
     */
    public function getNorthVector(): ?array
    {
        return $this->northVector;
    }

    /**
     * Sets northVector.
     *
     * @param array|null $northVector  This field is only for information. Updating it won't impact the export.
     *
     * @return $this
     */
    public function setNorthVector(?array $northVector = null): self
    {
        $this->northVector = $northVector;

        return $this;
    }

    /**
     * Gets recommanded2dAngle.
     *
     * @return float|null
     */
    public function getRecommanded2dAngle(): ?float
    {
        return $this->recommanded2dAngle;
    }

    /**
     * Sets recommanded2dAngle.
     *
     * @param float|null $recommanded2dAngle  This is the angle in clockwise degree to apply on the 2D to optimise the horizontality of objects. This field is only for information. Updating it won't impact the export.
     *
     * @return $this
     */
    public function setRecommanded2dAngle(?float $recommanded2dAngle = null): self
    {
        $this->recommanded2dAngle = $recommanded2dAngle;

        return $this;
    }
}


