<?php
/**
 * RuleComponent
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * BIMData API
 *
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1 (v1)
 * Contact: support@bimdata.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the RuleComponent model.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */
class RuleComponent 
{
        /**
     * @var int|null
     * @SerializedName("id")
     * @Assert\NotNull()
     * @Assert\Type("int")
     * @Type("int")
     */
    protected ?int $id = null;

    /**
     * @var string|null
     * @SerializedName("type")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $type = null;

    /**
     * @var array|null
     * @SerializedName("value")
     * @Assert\All({
     *   @Assert\Type("AnyType")
     * })
     * @Type("array<string, AnyType>")
     */
    protected ?array $value = null;

    /**
     * @var string|null
     * @SerializedName("operator")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $operator = null;

    /**
     * @var array|null
     * @SerializedName("params")
     * @Assert\All({
     *   @Assert\Type("AnyType")
     * })
     * @Type("array<string, AnyType>")
     */
    protected ?array $params = null;

    /**
     * @var string|null
     * @SerializedName("condition")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $condition = null;

    /**
     * @var array|null
     * @SerializedName("rule_components")
     * @Assert\All({
     *   @Assert\Type("AnyType")
     * })
     * @Type("array<string, AnyType>")
     */
    protected ?array $ruleComponents = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->id = $data['id'] ?? null;
        $this->type = $data['type'] ?? null;
        $this->value = $data['value'] ?? null;
        $this->operator = $data['operator'] ?? null;
        $this->params = $data['params'] ?? null;
        $this->condition = $data['condition'] ?? null;
        $this->ruleComponents = $data['ruleComponents'] ?? null;
    }

    /**
     * Gets id.
     *
     * @return int|null
     */
    public function getId(): ?int
    {
        return $this->id;
    }

    /**
     * Sets id.
     *
     * @param int|null $id
     *
     * @return $this
     */
    public function setId(?int $id): self
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Gets type.
     *
     * @return string|null
     */
    public function getType(): ?string
    {
        return $this->type;
    }

    /**
     * Sets type.
     *
     * @param string|null $type
     *
     * @return $this
     */
    public function setType(?string $type = null): self
    {
        $this->type = $type;

        return $this;
    }

    /**
     * Gets value.
     *
     * @return array|null
     */
    public function getValue(): ?array
    {
        return $this->value;
    }

    /**
     * Sets value.
     *
     * @param array|null $value
     *
     * @return $this
     */
    public function setValue(?array $value = null): self
    {
        $this->value = $value;

        return $this;
    }

    /**
     * Gets operator.
     *
     * @return string|null
     */
    public function getOperator(): ?string
    {
        return $this->operator;
    }

    /**
     * Sets operator.
     *
     * @param string|null $operator
     *
     * @return $this
     */
    public function setOperator(?string $operator = null): self
    {
        $this->operator = $operator;

        return $this;
    }

    /**
     * Gets params.
     *
     * @return array|null
     */
    public function getParams(): ?array
    {
        return $this->params;
    }

    /**
     * Sets params.
     *
     * @param array|null $params
     *
     * @return $this
     */
    public function setParams(?array $params = null): self
    {
        $this->params = $params;

        return $this;
    }

    /**
     * Gets condition.
     *
     * @return string|null
     */
    public function getCondition(): ?string
    {
        return $this->condition;
    }

    /**
     * Sets condition.
     *
     * @param string|null $condition
     *
     * @return $this
     */
    public function setCondition(?string $condition = null): self
    {
        $this->condition = $condition;

        return $this;
    }

    /**
     * Gets ruleComponents.
     *
     * @return array|null
     */
    public function getRuleComponents(): ?array
    {
        return $this->ruleComponents;
    }

    /**
     * Sets ruleComponents.
     *
     * @param array|null $ruleComponents
     *
     * @return $this
     */
    public function setRuleComponents(?array $ruleComponents = null): self
    {
        $this->ruleComponents = $ruleComponents;

        return $this;
    }
}


