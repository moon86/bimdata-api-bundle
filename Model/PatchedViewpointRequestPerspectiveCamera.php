<?php
/**
 * PatchedViewpointRequestPerspectiveCamera
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * BIMData API
 *
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1 (v1)
 * Contact: support@bimdata.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the PatchedViewpointRequestPerspectiveCamera model.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */
class PatchedViewpointRequestPerspectiveCamera 
{
        /**
     * @var float|null
     * @SerializedName("field_of_view")
     * @Assert\NotNull()
     * @Assert\Type("float")
     * @Type("float")
     */
    protected ?float $fieldOfView = null;

    /**
     * @var DirectionRequest|null
     * @SerializedName("camera_direction")
     * @Assert\NotNull()
     * @Assert\Valid()
     * @Assert\Type("OpenAPI\Server\Model\DirectionRequest")
     * @Type("OpenAPI\Server\Model\DirectionRequest")
     */
    protected ?DirectionRequest $cameraDirection = null;

    /**
     * @var DirectionRequest|null
     * @SerializedName("camera_up_vector")
     * @Assert\NotNull()
     * @Assert\Valid()
     * @Assert\Type("OpenAPI\Server\Model\DirectionRequest")
     * @Type("OpenAPI\Server\Model\DirectionRequest")
     */
    protected ?DirectionRequest $cameraUpVector = null;

    /**
     * @var PointRequest|null
     * @SerializedName("camera_view_point")
     * @Assert\NotNull()
     * @Assert\Valid()
     * @Assert\Type("OpenAPI\Server\Model\PointRequest")
     * @Type("OpenAPI\Server\Model\PointRequest")
     */
    protected ?PointRequest $cameraViewPoint = null;

    /**
     * @var DirectionRequest|null
     * @SerializedName("bimdata_camera_direction")
     * @Assert\Type("OpenAPI\Server\Model\DirectionRequest")
     * @Type("OpenAPI\Server\Model\DirectionRequest")
     */
    protected ?DirectionRequest $bimdataCameraDirection = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->fieldOfView = $data['fieldOfView'] ?? null;
        $this->cameraDirection = $data['cameraDirection'] ?? null;
        $this->cameraUpVector = $data['cameraUpVector'] ?? null;
        $this->cameraViewPoint = $data['cameraViewPoint'] ?? null;
        $this->bimdataCameraDirection = $data['bimdataCameraDirection'] ?? null;
    }

    /**
     * Gets fieldOfView.
     *
     * @return float|null
     */
    public function getFieldOfView(): ?float
    {
        return $this->fieldOfView;
    }

    /**
     * Sets fieldOfView.
     *
     * @param float|null $fieldOfView
     *
     * @return $this
     */
    public function setFieldOfView(?float $fieldOfView): self
    {
        $this->fieldOfView = $fieldOfView;

        return $this;
    }

    /**
     * Gets cameraDirection.
     *
     * @return DirectionRequest|null
     */
    public function getCameraDirection(): ?DirectionRequest
    {
        return $this->cameraDirection;
    }

    /**
     * Sets cameraDirection.
     *
     * @param DirectionRequest|null $cameraDirection
     *
     * @return $this
     */
    public function setCameraDirection(?DirectionRequest $cameraDirection): self
    {
        $this->cameraDirection = $cameraDirection;

        return $this;
    }

    /**
     * Gets cameraUpVector.
     *
     * @return DirectionRequest|null
     */
    public function getCameraUpVector(): ?DirectionRequest
    {
        return $this->cameraUpVector;
    }

    /**
     * Sets cameraUpVector.
     *
     * @param DirectionRequest|null $cameraUpVector
     *
     * @return $this
     */
    public function setCameraUpVector(?DirectionRequest $cameraUpVector): self
    {
        $this->cameraUpVector = $cameraUpVector;

        return $this;
    }

    /**
     * Gets cameraViewPoint.
     *
     * @return PointRequest|null
     */
    public function getCameraViewPoint(): ?PointRequest
    {
        return $this->cameraViewPoint;
    }

    /**
     * Sets cameraViewPoint.
     *
     * @param PointRequest|null $cameraViewPoint
     *
     * @return $this
     */
    public function setCameraViewPoint(?PointRequest $cameraViewPoint): self
    {
        $this->cameraViewPoint = $cameraViewPoint;

        return $this;
    }

    /**
     * Gets bimdataCameraDirection.
     *
     * @return DirectionRequest|null
     */
    public function getBimdataCameraDirection(): ?DirectionRequest
    {
        return $this->bimdataCameraDirection;
    }

    /**
     * Sets bimdataCameraDirection.
     *
     * @param DirectionRequest|null $bimdataCameraDirection
     *
     * @return $this
     */
    public function setBimdataCameraDirection(?DirectionRequest $bimdataCameraDirection = null): self
    {
        $this->bimdataCameraDirection = $bimdataCameraDirection;

        return $this;
    }
}


