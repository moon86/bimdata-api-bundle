<?php
/**
 * ViewpointRequest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * BIMData API
 *
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1 (v1)
 * Contact: support@bimdata.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the ViewpointRequest model.
 *
 * Adds nested create feature
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */
class ViewpointRequest 
{
        /**
     * @var int|null
     * @SerializedName("index")
     * @Assert\Type("int")
     * @Type("int")
     * @Assert\GreaterThanOrEqual(0)
     * @Assert\LessThanOrEqual(2147483647)
     */
    protected ?int $index = null;

    /**
     * @var string|null
     * @SerializedName("guid")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $guid = null;

    /**
     * Name of the system in which the viewpoint is originated
     *
     * @var string|null
     * @SerializedName("originating_system")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 256
     * )
     */
    protected ?string $originatingSystem = null;

    /**
     * System specific identifier of the viewpoint in the originating BIM tool
     *
     * @var string|null
     * @SerializedName("authoring_tool_id")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 256
     * )
     */
    protected ?string $authoringToolId = null;

    /**
     * @var PatchedViewpointRequestOrthogonalCamera|null
     * @SerializedName("orthogonal_camera")
     * @Assert\Type("OpenAPI\Server\Model\PatchedViewpointRequestOrthogonalCamera")
     * @Type("OpenAPI\Server\Model\PatchedViewpointRequestOrthogonalCamera")
     */
    protected ?PatchedViewpointRequestOrthogonalCamera $orthogonalCamera = null;

    /**
     * @var PatchedViewpointRequestPerspectiveCamera|null
     * @SerializedName("perspective_camera")
     * @Assert\Type("OpenAPI\Server\Model\PatchedViewpointRequestPerspectiveCamera")
     * @Type("OpenAPI\Server\Model\PatchedViewpointRequestPerspectiveCamera")
     */
    protected ?PatchedViewpointRequestPerspectiveCamera $perspectiveCamera = null;

    /**
     * @var array|null
     * @SerializedName("lines")
     * @Assert\All({
     *   @Assert\Type("OpenAPI\Server\Model\LineRequest")
     * })
     * @Type("array<OpenAPI\Server\Model\LineRequest>")
     */
    protected ?array $lines = null;

    /**
     * @var array|null
     * @SerializedName("clipping_planes")
     * @Assert\All({
     *   @Assert\Type("OpenAPI\Server\Model\ClippingPlaneRequest")
     * })
     * @Type("array<OpenAPI\Server\Model\ClippingPlaneRequest>")
     */
    protected ?array $clippingPlanes = null;

    /**
     * @var PatchedViewpointRequestSnapshot|null
     * @SerializedName("snapshot")
     * @Assert\Type("OpenAPI\Server\Model\PatchedViewpointRequestSnapshot")
     * @Type("OpenAPI\Server\Model\PatchedViewpointRequestSnapshot")
     */
    protected ?PatchedViewpointRequestSnapshot $snapshot = null;

    /**
     * @var PatchedViewpointRequestComponents|null
     * @SerializedName("components")
     * @Assert\Type("OpenAPI\Server\Model\PatchedViewpointRequestComponents")
     * @Type("OpenAPI\Server\Model\PatchedViewpointRequestComponents")
     */
    protected ?PatchedViewpointRequestComponents $components = null;

    /**
     * Non standard field. Pins (or markers/annotations) are points of interest
     *
     * @var array|null
     * @SerializedName("pins")
     * @Assert\All({
     *   @Assert\Type("OpenAPI\Server\Model\PinRequest")
     * })
     * @Type("array<OpenAPI\Server\Model\PinRequest>")
     */
    protected ?array $pins = null;

    /**
     * Only used when using POST on the full-topic route to bind viewpoint with comment
     *
     * @var int|null
     * @SerializedName("temp_id")
     * @Assert\Type("int")
     * @Type("int")
     */
    protected ?int $tempId = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->index = $data['index'] ?? null;
        $this->guid = $data['guid'] ?? null;
        $this->originatingSystem = $data['originatingSystem'] ?? null;
        $this->authoringToolId = $data['authoringToolId'] ?? null;
        $this->orthogonalCamera = $data['orthogonalCamera'] ?? null;
        $this->perspectiveCamera = $data['perspectiveCamera'] ?? null;
        $this->lines = $data['lines'] ?? null;
        $this->clippingPlanes = $data['clippingPlanes'] ?? null;
        $this->snapshot = $data['snapshot'] ?? null;
        $this->components = $data['components'] ?? null;
        $this->pins = $data['pins'] ?? null;
        $this->tempId = $data['tempId'] ?? null;
    }

    /**
     * Gets index.
     *
     * @return int|null
     */
    public function getIndex(): ?int
    {
        return $this->index;
    }

    /**
     * Sets index.
     *
     * @param int|null $index
     *
     * @return $this
     */
    public function setIndex(?int $index = null): self
    {
        $this->index = $index;

        return $this;
    }

    /**
     * Gets guid.
     *
     * @return string|null
     */
    public function getGuid(): ?string
    {
        return $this->guid;
    }

    /**
     * Sets guid.
     *
     * @param string|null $guid
     *
     * @return $this
     */
    public function setGuid(?string $guid = null): self
    {
        $this->guid = $guid;

        return $this;
    }

    /**
     * Gets originatingSystem.
     *
     * @return string|null
     */
    public function getOriginatingSystem(): ?string
    {
        return $this->originatingSystem;
    }

    /**
     * Sets originatingSystem.
     *
     * @param string|null $originatingSystem  Name of the system in which the viewpoint is originated
     *
     * @return $this
     */
    public function setOriginatingSystem(?string $originatingSystem = null): self
    {
        $this->originatingSystem = $originatingSystem;

        return $this;
    }

    /**
     * Gets authoringToolId.
     *
     * @return string|null
     */
    public function getAuthoringToolId(): ?string
    {
        return $this->authoringToolId;
    }

    /**
     * Sets authoringToolId.
     *
     * @param string|null $authoringToolId  System specific identifier of the viewpoint in the originating BIM tool
     *
     * @return $this
     */
    public function setAuthoringToolId(?string $authoringToolId = null): self
    {
        $this->authoringToolId = $authoringToolId;

        return $this;
    }

    /**
     * Gets orthogonalCamera.
     *
     * @return PatchedViewpointRequestOrthogonalCamera|null
     */
    public function getOrthogonalCamera(): ?PatchedViewpointRequestOrthogonalCamera
    {
        return $this->orthogonalCamera;
    }

    /**
     * Sets orthogonalCamera.
     *
     * @param PatchedViewpointRequestOrthogonalCamera|null $orthogonalCamera
     *
     * @return $this
     */
    public function setOrthogonalCamera(?PatchedViewpointRequestOrthogonalCamera $orthogonalCamera = null): self
    {
        $this->orthogonalCamera = $orthogonalCamera;

        return $this;
    }

    /**
     * Gets perspectiveCamera.
     *
     * @return PatchedViewpointRequestPerspectiveCamera|null
     */
    public function getPerspectiveCamera(): ?PatchedViewpointRequestPerspectiveCamera
    {
        return $this->perspectiveCamera;
    }

    /**
     * Sets perspectiveCamera.
     *
     * @param PatchedViewpointRequestPerspectiveCamera|null $perspectiveCamera
     *
     * @return $this
     */
    public function setPerspectiveCamera(?PatchedViewpointRequestPerspectiveCamera $perspectiveCamera = null): self
    {
        $this->perspectiveCamera = $perspectiveCamera;

        return $this;
    }

    /**
     * Gets lines.
     *
     * @return array|null
     */
    public function getLines(): ?array
    {
        return $this->lines;
    }

    /**
     * Sets lines.
     *
     * @param array|null $lines
     *
     * @return $this
     */
    public function setLines(?array $lines = null): self
    {
        $this->lines = $lines;

        return $this;
    }

    /**
     * Gets clippingPlanes.
     *
     * @return array|null
     */
    public function getClippingPlanes(): ?array
    {
        return $this->clippingPlanes;
    }

    /**
     * Sets clippingPlanes.
     *
     * @param array|null $clippingPlanes
     *
     * @return $this
     */
    public function setClippingPlanes(?array $clippingPlanes = null): self
    {
        $this->clippingPlanes = $clippingPlanes;

        return $this;
    }

    /**
     * Gets snapshot.
     *
     * @return PatchedViewpointRequestSnapshot|null
     */
    public function getSnapshot(): ?PatchedViewpointRequestSnapshot
    {
        return $this->snapshot;
    }

    /**
     * Sets snapshot.
     *
     * @param PatchedViewpointRequestSnapshot|null $snapshot
     *
     * @return $this
     */
    public function setSnapshot(?PatchedViewpointRequestSnapshot $snapshot = null): self
    {
        $this->snapshot = $snapshot;

        return $this;
    }

    /**
     * Gets components.
     *
     * @return PatchedViewpointRequestComponents|null
     */
    public function getComponents(): ?PatchedViewpointRequestComponents
    {
        return $this->components;
    }

    /**
     * Sets components.
     *
     * @param PatchedViewpointRequestComponents|null $components
     *
     * @return $this
     */
    public function setComponents(?PatchedViewpointRequestComponents $components = null): self
    {
        $this->components = $components;

        return $this;
    }

    /**
     * Gets pins.
     *
     * @return array|null
     */
    public function getPins(): ?array
    {
        return $this->pins;
    }

    /**
     * Sets pins.
     *
     * @param array|null $pins  Non standard field. Pins (or markers/annotations) are points of interest
     *
     * @return $this
     */
    public function setPins(?array $pins = null): self
    {
        $this->pins = $pins;

        return $this;
    }

    /**
     * Gets tempId.
     *
     * @return int|null
     */
    public function getTempId(): ?int
    {
        return $this->tempId;
    }

    /**
     * Sets tempId.
     *
     * @param int|null $tempId  Only used when using POST on the full-topic route to bind viewpoint with comment
     *
     * @return $this
     */
    public function setTempId(?int $tempId = null): self
    {
        $this->tempId = $tempId;

        return $this;
    }
}


