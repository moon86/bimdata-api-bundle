<?php
/**
 * Size
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * BIMData API
 *
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1 (v1)
 * Contact: support@bimdata.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the Size model.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */
class Size 
{
        /**
     * @var bool|null
     * @SerializedName("is_unsupervised")
     * @Assert\NotNull()
     * @Assert\Type("bool")
     * @Type("bool")
     */
    protected ?bool $isUnsupervised = null;

    /**
     * @var string|null
     * @SerializedName("managed_by")
     * @Assert\NotNull()
     * @Assert\Choice({ "BIMDATA_PLATFORM", "ORGANIZATION" })
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $managedBy = null;

    /**
     * @var int|null
     * @SerializedName("role")
     * @Assert\NotNull()
     * @Assert\Choice({ 100, 50 })
     * @Assert\Type("int")
     * @Type("int")
     */
    protected ?int $role = null;

    /**
     * @var int|null
     * @SerializedName("total_size")
     * @Assert\NotNull()
     * @Assert\Type("int")
     * @Type("int")
     */
    protected ?int $totalSize = null;

    /**
     * @var int|null
     * @SerializedName("smart_data_size")
     * @Assert\NotNull()
     * @Assert\Type("int")
     * @Type("int")
     */
    protected ?int $smartDataSize = null;

    /**
     * @var int|null
     * @SerializedName("total_size_available")
     * @Assert\NotNull()
     * @Assert\Type("int")
     * @Type("int")
     */
    protected ?int $totalSizeAvailable = null;

    /**
     * @var int|null
     * @SerializedName("smart_data_size_available")
     * @Assert\NotNull()
     * @Assert\Type("int")
     * @Type("int")
     */
    protected ?int $smartDataSizeAvailable = null;

    /**
     * @var int|null
     * @SerializedName("remaining_total_size")
     * @Assert\NotNull()
     * @Assert\Type("int")
     * @Type("int")
     */
    protected ?int $remainingTotalSize = null;

    /**
     * @var int|null
     * @SerializedName("remaining_smart_data_size")
     * @Assert\NotNull()
     * @Assert\Type("int")
     * @Type("int")
     */
    protected ?int $remainingSmartDataSize = null;

    /**
     * @var int|null
     * @SerializedName("remaining_total_size_percent")
     * @Assert\NotNull()
     * @Assert\Type("int")
     * @Type("int")
     */
    protected ?int $remainingTotalSizePercent = null;

    /**
     * @var int|null
     * @SerializedName("remaining_smart_data_size_percent")
     * @Assert\NotNull()
     * @Assert\Type("int")
     * @Type("int")
     */
    protected ?int $remainingSmartDataSizePercent = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->isUnsupervised = $data['isUnsupervised'] ?? null;
        $this->managedBy = $data['managedBy'] ?? null;
        $this->role = $data['role'] ?? null;
        $this->totalSize = $data['totalSize'] ?? null;
        $this->smartDataSize = $data['smartDataSize'] ?? null;
        $this->totalSizeAvailable = $data['totalSizeAvailable'] ?? null;
        $this->smartDataSizeAvailable = $data['smartDataSizeAvailable'] ?? null;
        $this->remainingTotalSize = $data['remainingTotalSize'] ?? null;
        $this->remainingSmartDataSize = $data['remainingSmartDataSize'] ?? null;
        $this->remainingTotalSizePercent = $data['remainingTotalSizePercent'] ?? null;
        $this->remainingSmartDataSizePercent = $data['remainingSmartDataSizePercent'] ?? null;
    }

    /**
     * Gets isUnsupervised.
     *
     * @return bool|null
     */
    public function isIsUnsupervised(): ?bool
    {
        return $this->isUnsupervised;
    }

    /**
     * Sets isUnsupervised.
     *
     * @param bool|null $isUnsupervised
     *
     * @return $this
     */
    public function setIsUnsupervised(?bool $isUnsupervised): self
    {
        $this->isUnsupervised = $isUnsupervised;

        return $this;
    }

    /**
     * Gets managedBy.
     *
     * @return string|null
     */
    public function getManagedBy(): ?string
    {
        return $this->managedBy;
    }

    /**
     * Sets managedBy.
     *
     * @param string|null $managedBy
     *
     * @return $this
     */
    public function setManagedBy(?string $managedBy): self
    {
        $this->managedBy = $managedBy;

        return $this;
    }

    /**
     * Gets role.
     *
     * @return int|null
     */
    public function getRole(): ?int
    {
        return $this->role;
    }

    /**
     * Sets role.
     *
     * @param int|null $role
     *
     * @return $this
     */
    public function setRole(?int $role): self
    {
        $this->role = $role;

        return $this;
    }

    /**
     * Gets totalSize.
     *
     * @return int|null
     */
    public function getTotalSize(): ?int
    {
        return $this->totalSize;
    }

    /**
     * Sets totalSize.
     *
     * @param int|null $totalSize
     *
     * @return $this
     */
    public function setTotalSize(?int $totalSize): self
    {
        $this->totalSize = $totalSize;

        return $this;
    }

    /**
     * Gets smartDataSize.
     *
     * @return int|null
     */
    public function getSmartDataSize(): ?int
    {
        return $this->smartDataSize;
    }

    /**
     * Sets smartDataSize.
     *
     * @param int|null $smartDataSize
     *
     * @return $this
     */
    public function setSmartDataSize(?int $smartDataSize): self
    {
        $this->smartDataSize = $smartDataSize;

        return $this;
    }

    /**
     * Gets totalSizeAvailable.
     *
     * @return int|null
     */
    public function getTotalSizeAvailable(): ?int
    {
        return $this->totalSizeAvailable;
    }

    /**
     * Sets totalSizeAvailable.
     *
     * @param int|null $totalSizeAvailable
     *
     * @return $this
     */
    public function setTotalSizeAvailable(?int $totalSizeAvailable): self
    {
        $this->totalSizeAvailable = $totalSizeAvailable;

        return $this;
    }

    /**
     * Gets smartDataSizeAvailable.
     *
     * @return int|null
     */
    public function getSmartDataSizeAvailable(): ?int
    {
        return $this->smartDataSizeAvailable;
    }

    /**
     * Sets smartDataSizeAvailable.
     *
     * @param int|null $smartDataSizeAvailable
     *
     * @return $this
     */
    public function setSmartDataSizeAvailable(?int $smartDataSizeAvailable): self
    {
        $this->smartDataSizeAvailable = $smartDataSizeAvailable;

        return $this;
    }

    /**
     * Gets remainingTotalSize.
     *
     * @return int|null
     */
    public function getRemainingTotalSize(): ?int
    {
        return $this->remainingTotalSize;
    }

    /**
     * Sets remainingTotalSize.
     *
     * @param int|null $remainingTotalSize
     *
     * @return $this
     */
    public function setRemainingTotalSize(?int $remainingTotalSize): self
    {
        $this->remainingTotalSize = $remainingTotalSize;

        return $this;
    }

    /**
     * Gets remainingSmartDataSize.
     *
     * @return int|null
     */
    public function getRemainingSmartDataSize(): ?int
    {
        return $this->remainingSmartDataSize;
    }

    /**
     * Sets remainingSmartDataSize.
     *
     * @param int|null $remainingSmartDataSize
     *
     * @return $this
     */
    public function setRemainingSmartDataSize(?int $remainingSmartDataSize): self
    {
        $this->remainingSmartDataSize = $remainingSmartDataSize;

        return $this;
    }

    /**
     * Gets remainingTotalSizePercent.
     *
     * @return int|null
     */
    public function getRemainingTotalSizePercent(): ?int
    {
        return $this->remainingTotalSizePercent;
    }

    /**
     * Sets remainingTotalSizePercent.
     *
     * @param int|null $remainingTotalSizePercent
     *
     * @return $this
     */
    public function setRemainingTotalSizePercent(?int $remainingTotalSizePercent): self
    {
        $this->remainingTotalSizePercent = $remainingTotalSizePercent;

        return $this;
    }

    /**
     * Gets remainingSmartDataSizePercent.
     *
     * @return int|null
     */
    public function getRemainingSmartDataSizePercent(): ?int
    {
        return $this->remainingSmartDataSizePercent;
    }

    /**
     * Sets remainingSmartDataSizePercent.
     *
     * @param int|null $remainingSmartDataSizePercent
     *
     * @return $this
     */
    public function setRemainingSmartDataSizePercent(?int $remainingSmartDataSizePercent): self
    {
        $this->remainingSmartDataSizePercent = $remainingSmartDataSizePercent;

        return $this;
    }
}


