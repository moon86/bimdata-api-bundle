<?php
/**
 * PatchedModelRequest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * BIMData API
 *
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1 (v1)
 * Contact: support@bimdata.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the PatchedModelRequest model.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */
class PatchedModelRequest 
{
        /**
     * @var string|null
     * @SerializedName("name")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 512
     * )
     */
    protected ?string $name = null;

    /**
     * @var string|null
     * @SerializedName("source")
     * @Assert\Choice({ "UPLOAD", "SPLIT", "MERGE", "EXPORT", "OPTIMIZED" })
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $source = null;

    /**
     * [x,y,z] array of the position of the local_placement in world coordinates
     *
     * @var array|null
     * @SerializedName("world_position")
     * @Assert\All({
     *   @Assert\Type("float")
     * })
     * @Type("array<float>")
     * @Assert\Count(
     *   max = 3
     * )
     */
    protected ?array $worldPosition = null;

    /**
     * How many meters a unit represents
     *
     * @var float|null
     * @SerializedName("size_ratio")
     * @Assert\Type("float")
     * @Type("float")
     */
    protected ?float $sizeRatio = null;

    /**
     * @var bool|null
     * @SerializedName("archived")
     * @Assert\Type("bool")
     * @Type("bool")
     */
    protected ?bool $archived = null;

    /**
     * This field is only for information. Updating it won&#39;t impact the export.
     *
     * @var string|null
     * @SerializedName("version")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 256
     * )
     */
    protected ?string $version = null;

    /**
     * This field is only for information. Updating it won&#39;t impact the export.
     *
     * @var array|null
     * @SerializedName("north_vector")
     * @Assert\All({
     *   @Assert\Type("float")
     * })
     * @Type("array<float>")
     * @Assert\Count(
     *   max = 2
     * )
     */
    protected ?array $northVector = null;

    /**
     * This is the angle in clockwise degree to apply on the 2D to optimise the horizontality of objects. This field is only for information. Updating it won&#39;t impact the export.
     *
     * @var float|null
     * @SerializedName("recommanded_2d_angle")
     * @Assert\Type("float")
     * @Type("float")
     */
    protected ?float $recommanded2dAngle = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->name = $data['name'] ?? null;
        $this->source = $data['source'] ?? null;
        $this->worldPosition = $data['worldPosition'] ?? null;
        $this->sizeRatio = $data['sizeRatio'] ?? null;
        $this->archived = $data['archived'] ?? null;
        $this->version = $data['version'] ?? null;
        $this->northVector = $data['northVector'] ?? null;
        $this->recommanded2dAngle = $data['recommanded2dAngle'] ?? null;
    }

    /**
     * Gets name.
     *
     * @return string|null
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
     * Sets name.
     *
     * @param string|null $name
     *
     * @return $this
     */
    public function setName(?string $name = null): self
    {
        $this->name = $name;

        return $this;
    }

    /**
     * Gets source.
     *
     * @return string|null
     */
    public function getSource(): ?string
    {
        return $this->source;
    }

    /**
     * Sets source.
     *
     * @param string|null $source
     *
     * @return $this
     */
    public function setSource(?string $source = null): self
    {
        $this->source = $source;

        return $this;
    }

    /**
     * Gets worldPosition.
     *
     * @return array|null
     */
    public function getWorldPosition(): ?array
    {
        return $this->worldPosition;
    }

    /**
     * Sets worldPosition.
     *
     * @param array|null $worldPosition  [x,y,z] array of the position of the local_placement in world coordinates
     *
     * @return $this
     */
    public function setWorldPosition(?array $worldPosition = null): self
    {
        $this->worldPosition = $worldPosition;

        return $this;
    }

    /**
     * Gets sizeRatio.
     *
     * @return float|null
     */
    public function getSizeRatio(): ?float
    {
        return $this->sizeRatio;
    }

    /**
     * Sets sizeRatio.
     *
     * @param float|null $sizeRatio  How many meters a unit represents
     *
     * @return $this
     */
    public function setSizeRatio(?float $sizeRatio = null): self
    {
        $this->sizeRatio = $sizeRatio;

        return $this;
    }

    /**
     * Gets archived.
     *
     * @return bool|null
     */
    public function isArchived(): ?bool
    {
        return $this->archived;
    }

    /**
     * Sets archived.
     *
     * @param bool|null $archived
     *
     * @return $this
     */
    public function setArchived(?bool $archived = null): self
    {
        $this->archived = $archived;

        return $this;
    }

    /**
     * Gets version.
     *
     * @return string|null
     */
    public function getVersion(): ?string
    {
        return $this->version;
    }

    /**
     * Sets version.
     *
     * @param string|null $version  This field is only for information. Updating it won't impact the export.
     *
     * @return $this
     */
    public function setVersion(?string $version = null): self
    {
        $this->version = $version;

        return $this;
    }

    /**
     * Gets northVector.
     *
     * @return array|null
     */
    public function getNorthVector(): ?array
    {
        return $this->northVector;
    }

    /**
     * Sets northVector.
     *
     * @param array|null $northVector  This field is only for information. Updating it won't impact the export.
     *
     * @return $this
     */
    public function setNorthVector(?array $northVector = null): self
    {
        $this->northVector = $northVector;

        return $this;
    }

    /**
     * Gets recommanded2dAngle.
     *
     * @return float|null
     */
    public function getRecommanded2dAngle(): ?float
    {
        return $this->recommanded2dAngle;
    }

    /**
     * Sets recommanded2dAngle.
     *
     * @param float|null $recommanded2dAngle  This is the angle in clockwise degree to apply on the 2D to optimise the horizontality of objects. This field is only for information. Updating it won't impact the export.
     *
     * @return $this
     */
    public function setRecommanded2dAngle(?float $recommanded2dAngle = null): self
    {
        $this->recommanded2dAngle = $recommanded2dAngle;

        return $this;
    }
}


