<?php
/**
 * PropertyDefinitionUnit
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * BIMData API
 *
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1 (v1)
 * Contact: support@bimdata.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the PropertyDefinitionUnit model.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */
class PropertyDefinitionUnit 
{
        /**
     * @var int|null
     * @SerializedName("id")
     * @Assert\NotNull()
     * @Assert\Type("int")
     * @Type("int")
     */
    protected ?int $id = null;

    /**
     * IfcDerivedUnit, IfcContextDependentUnit, IfcConversionBasedUnit, IfcSIUnit or IfcMonetaryUnit
     *
     * @var string|null
     * @SerializedName("type")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $type = null;

    /**
     * Name of the unit (ex: DEGREE)
     *
     * @var string|null
     * @SerializedName("name")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $name = null;

    /**
     * IFC type of the unit or user defined type (ex: PLANEANGLEUNIT for DEGREE and RADIAN)
     *
     * @var string|null
     * @SerializedName("unit_type")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $unitType = null;

    /**
     * Litteral prefix for scale (ex: MILLI, KILO, etc..)
     *
     * @var string|null
     * @SerializedName("prefix")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $prefix = null;

    /**
     * List of 7 units dimensions
     *
     * @var array|null
     * @SerializedName("dimensions")
     * @Assert\All({
     *   @Assert\Type("float")
     * })
     * @Type("array<float>")
     */
    protected ?array $dimensions = null;

    /**
     * Factor of conversion and base unit id (ex: DEGREE from RADIAN with factor 0.0174532925199433)
     *
     * @var float|null
     * @SerializedName("conversion_factor")
     * @Assert\Type("float")
     * @Type("float")
     */
    protected ?float $conversionFactor = null;

    /**
     * @var Unit|null
     * @SerializedName("conversion_baseunit")
     * @Assert\Type("OpenAPI\Server\Model\Unit")
     * @Type("OpenAPI\Server\Model\Unit")
     */
    protected ?Unit $conversionBaseunit = null;

    /**
     * List of constitutive unit elements by id with corresponding exponent (ex: [meterID/1, secondID/-1] for velocity)
     *
     * @var array|null
     * @SerializedName("elements")
     * @Assert\All({
     *   @Assert\Type("AnyType")
     * })
     * @Type("array<string, AnyType>")
     */
    protected ?array $elements = null;

    /**
     * @var bool|null
     * @SerializedName("is_default")
     * @Assert\Type("bool")
     * @Type("bool")
     */
    protected ?bool $isDefault = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->id = $data['id'] ?? null;
        $this->type = $data['type'] ?? null;
        $this->name = $data['name'] ?? null;
        $this->unitType = $data['unitType'] ?? null;
        $this->prefix = $data['prefix'] ?? null;
        $this->dimensions = $data['dimensions'] ?? null;
        $this->conversionFactor = $data['conversionFactor'] ?? null;
        $this->conversionBaseunit = $data['conversionBaseunit'] ?? null;
        $this->elements = $data['elements'] ?? null;
        $this->isDefault = $data['isDefault'] ?? null;
    }

    /**
     * Gets id.
     *
     * @return int|null
     */
    public function getId(): ?int
    {
        return $this->id;
    }

    /**
     * Sets id.
     *
     * @param int|null $id
     *
     * @return $this
     */
    public function setId(?int $id): self
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Gets type.
     *
     * @return string|null
     */
    public function getType(): ?string
    {
        return $this->type;
    }

    /**
     * Sets type.
     *
     * @param string|null $type  IfcDerivedUnit, IfcContextDependentUnit, IfcConversionBasedUnit, IfcSIUnit or IfcMonetaryUnit
     *
     * @return $this
     */
    public function setType(?string $type): self
    {
        $this->type = $type;

        return $this;
    }

    /**
     * Gets name.
     *
     * @return string|null
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
     * Sets name.
     *
     * @param string|null $name  Name of the unit (ex: DEGREE)
     *
     * @return $this
     */
    public function setName(?string $name = null): self
    {
        $this->name = $name;

        return $this;
    }

    /**
     * Gets unitType.
     *
     * @return string|null
     */
    public function getUnitType(): ?string
    {
        return $this->unitType;
    }

    /**
     * Sets unitType.
     *
     * @param string|null $unitType  IFC type of the unit or user defined type (ex: PLANEANGLEUNIT for DEGREE and RADIAN)
     *
     * @return $this
     */
    public function setUnitType(?string $unitType = null): self
    {
        $this->unitType = $unitType;

        return $this;
    }

    /**
     * Gets prefix.
     *
     * @return string|null
     */
    public function getPrefix(): ?string
    {
        return $this->prefix;
    }

    /**
     * Sets prefix.
     *
     * @param string|null $prefix  Litteral prefix for scale (ex: MILLI, KILO, etc..)
     *
     * @return $this
     */
    public function setPrefix(?string $prefix = null): self
    {
        $this->prefix = $prefix;

        return $this;
    }

    /**
     * Gets dimensions.
     *
     * @return array|null
     */
    public function getDimensions(): ?array
    {
        return $this->dimensions;
    }

    /**
     * Sets dimensions.
     *
     * @param array|null $dimensions  List of 7 units dimensions
     *
     * @return $this
     */
    public function setDimensions(?array $dimensions = null): self
    {
        $this->dimensions = $dimensions;

        return $this;
    }

    /**
     * Gets conversionFactor.
     *
     * @return float|null
     */
    public function getConversionFactor(): ?float
    {
        return $this->conversionFactor;
    }

    /**
     * Sets conversionFactor.
     *
     * @param float|null $conversionFactor  Factor of conversion and base unit id (ex: DEGREE from RADIAN with factor 0.0174532925199433)
     *
     * @return $this
     */
    public function setConversionFactor(?float $conversionFactor = null): self
    {
        $this->conversionFactor = $conversionFactor;

        return $this;
    }

    /**
     * Gets conversionBaseunit.
     *
     * @return Unit|null
     */
    public function getConversionBaseunit(): ?Unit
    {
        return $this->conversionBaseunit;
    }

    /**
     * Sets conversionBaseunit.
     *
     * @param Unit|null $conversionBaseunit
     *
     * @return $this
     */
    public function setConversionBaseunit(?Unit $conversionBaseunit = null): self
    {
        $this->conversionBaseunit = $conversionBaseunit;

        return $this;
    }

    /**
     * Gets elements.
     *
     * @return array|null
     */
    public function getElements(): ?array
    {
        return $this->elements;
    }

    /**
     * Sets elements.
     *
     * @param array|null $elements  List of constitutive unit elements by id with corresponding exponent (ex: [meterID/1, secondID/-1] for velocity)
     *
     * @return $this
     */
    public function setElements(?array $elements = null): self
    {
        $this->elements = $elements;

        return $this;
    }

    /**
     * Gets isDefault.
     *
     * @return bool|null
     */
    public function isIsDefault(): ?bool
    {
        return $this->isDefault;
    }

    /**
     * Sets isDefault.
     *
     * @param bool|null $isDefault
     *
     * @return $this
     */
    public function setIsDefault(?bool $isDefault = null): self
    {
        $this->isDefault = $isDefault;

        return $this;
    }
}


